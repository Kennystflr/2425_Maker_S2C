
S2C_motorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800d4a0  0800d4a0  0000e4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d700  0800d700  0000f1c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d700  0800d700  0000e700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d708  0800d708  0000f1c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d708  0800d708  0000e708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d70c  0800d70c  0000e70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0800d710  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  200001c4  0800d8d4  0000f1c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800d8d4  0000f5dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c89c  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000432a  00000000  00000000  0002ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  000314c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002204d  00000000  00000000  00032678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3e1  00000000  00000000  000546c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb69a  00000000  00000000  00072aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  0013e184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001444e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d488 	.word	0x0800d488

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800d488 	.word	0x0800d488

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b988 	b.w	8000edc <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	468e      	mov	lr, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	4688      	mov	r8, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d962      	bls.n	8000cc0 <__udivmoddi4+0xdc>
 8000bfa:	fab2 f682 	clz	r6, r2
 8000bfe:	b14e      	cbz	r6, 8000c14 <__udivmoddi4+0x30>
 8000c00:	f1c6 0320 	rsb	r3, r6, #32
 8000c04:	fa01 f806 	lsl.w	r8, r1, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	40b7      	lsls	r7, r6
 8000c0e:	ea43 0808 	orr.w	r8, r3, r8
 8000c12:	40b4      	lsls	r4, r6
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c38:	f080 80ea 	bcs.w	8000e10 <__udivmoddi4+0x22c>
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f240 80e7 	bls.w	8000e10 <__udivmoddi4+0x22c>
 8000c42:	3902      	subs	r1, #2
 8000c44:	443b      	add	r3, r7
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	b2a3      	uxth	r3, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5a:	459c      	cmp	ip, r3
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x8e>
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	f080 80d6 	bcs.w	8000e14 <__udivmoddi4+0x230>
 8000c68:	459c      	cmp	ip, r3
 8000c6a:	f240 80d3 	bls.w	8000e14 <__udivmoddi4+0x230>
 8000c6e:	443b      	add	r3, r7
 8000c70:	3802      	subs	r0, #2
 8000c72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c76:	eba3 030c 	sub.w	r3, r3, ip
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11d      	cbz	r5, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40f3      	lsrs	r3, r6
 8000c80:	2200      	movs	r2, #0
 8000c82:	e9c5 3200 	strd	r3, r2, [r5]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d905      	bls.n	8000c9a <__udivmoddi4+0xb6>
 8000c8e:	b10d      	cbz	r5, 8000c94 <__udivmoddi4+0xb0>
 8000c90:	e9c5 0100 	strd	r0, r1, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4608      	mov	r0, r1
 8000c98:	e7f5      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d146      	bne.n	8000d30 <__udivmoddi4+0x14c>
 8000ca2:	4573      	cmp	r3, lr
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xc8>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 8105 	bhi.w	8000eb6 <__udivmoddi4+0x2d2>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e5      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cba:	e9c5 4800 	strd	r4, r8, [r5]
 8000cbe:	e7e2      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f000 8090 	beq.w	8000de6 <__udivmoddi4+0x202>
 8000cc6:	fab2 f682 	clz	r6, r2
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	f040 80a4 	bne.w	8000e18 <__udivmoddi4+0x234>
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	0c03      	lsrs	r3, r0, #16
 8000cd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd8:	b280      	uxth	r0, r0
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb04 f20c 	mul.w	r2, r4, ip
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x11e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x11c>
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	f200 80e0 	bhi.w	8000ec0 <__udivmoddi4+0x2dc>
 8000d00:	46c4      	mov	ip, r8
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d10:	fb02 f404 	mul.w	r4, r2, r4
 8000d14:	429c      	cmp	r4, r3
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x144>
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x142>
 8000d20:	429c      	cmp	r4, r3
 8000d22:	f200 80ca 	bhi.w	8000eba <__udivmoddi4+0x2d6>
 8000d26:	4602      	mov	r2, r0
 8000d28:	1b1b      	subs	r3, r3, r4
 8000d2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d30:	f1c1 0620 	rsb	r6, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d40:	fa20 f306 	lsr.w	r3, r0, r6
 8000d44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	fa1f fc87 	uxth.w	ip, r7
 8000d56:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x1a0>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d76:	f080 809c 	bcs.w	8000eb2 <__udivmoddi4+0x2ce>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8099 	bls.w	8000eb2 <__udivmoddi4+0x2ce>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	eba4 040e 	sub.w	r4, r4, lr
 8000d88:	fa1f fe83 	uxth.w	lr, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9c:	45a4      	cmp	ip, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1ce>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000da6:	f080 8082 	bcs.w	8000eae <__udivmoddi4+0x2ca>
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d97f      	bls.n	8000eae <__udivmoddi4+0x2ca>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dbe:	4564      	cmp	r4, ip
 8000dc0:	4673      	mov	r3, lr
 8000dc2:	46e1      	mov	r9, ip
 8000dc4:	d362      	bcc.n	8000e8c <__udivmoddi4+0x2a8>
 8000dc6:	d05f      	beq.n	8000e88 <__udivmoddi4+0x2a4>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x1fe>
 8000dca:	ebb8 0203 	subs.w	r2, r8, r3
 8000dce:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dda:	431e      	orrs	r6, r3
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	e9c5 6400 	strd	r6, r4, [r5]
 8000de2:	2100      	movs	r1, #0
 8000de4:	e74f      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000de6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dea:	0c01      	lsrs	r1, r0, #16
 8000dec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df0:	b280      	uxth	r0, r0
 8000df2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000df6:	463b      	mov	r3, r7
 8000df8:	4638      	mov	r0, r7
 8000dfa:	463c      	mov	r4, r7
 8000dfc:	46b8      	mov	r8, r7
 8000dfe:	46be      	mov	lr, r7
 8000e00:	2620      	movs	r6, #32
 8000e02:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e06:	eba2 0208 	sub.w	r2, r2, r8
 8000e0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e0e:	e766      	b.n	8000cde <__udivmoddi4+0xfa>
 8000e10:	4601      	mov	r1, r0
 8000e12:	e718      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e72c      	b.n	8000c72 <__udivmoddi4+0x8e>
 8000e18:	f1c6 0220 	rsb	r2, r6, #32
 8000e1c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e20:	40b7      	lsls	r7, r6
 8000e22:	40b1      	lsls	r1, r6
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e32:	b2bc      	uxth	r4, r7
 8000e34:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e38:	0c11      	lsrs	r1, r2, #16
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb08 f904 	mul.w	r9, r8, r4
 8000e42:	40b0      	lsls	r0, r6
 8000e44:	4589      	cmp	r9, r1
 8000e46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4a:	b280      	uxth	r0, r0
 8000e4c:	d93e      	bls.n	8000ecc <__udivmoddi4+0x2e8>
 8000e4e:	1879      	adds	r1, r7, r1
 8000e50:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e54:	d201      	bcs.n	8000e5a <__udivmoddi4+0x276>
 8000e56:	4589      	cmp	r9, r1
 8000e58:	d81f      	bhi.n	8000e9a <__udivmoddi4+0x2b6>
 8000e5a:	eba1 0109 	sub.w	r1, r1, r9
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d229      	bcs.n	8000ec8 <__udivmoddi4+0x2e4>
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7a:	d2c4      	bcs.n	8000e06 <__udivmoddi4+0x222>
 8000e7c:	4542      	cmp	r2, r8
 8000e7e:	d2c2      	bcs.n	8000e06 <__udivmoddi4+0x222>
 8000e80:	f1a9 0102 	sub.w	r1, r9, #2
 8000e84:	443a      	add	r2, r7
 8000e86:	e7be      	b.n	8000e06 <__udivmoddi4+0x222>
 8000e88:	45f0      	cmp	r8, lr
 8000e8a:	d29d      	bcs.n	8000dc8 <__udivmoddi4+0x1e4>
 8000e8c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e94:	3801      	subs	r0, #1
 8000e96:	46e1      	mov	r9, ip
 8000e98:	e796      	b.n	8000dc8 <__udivmoddi4+0x1e4>
 8000e9a:	eba7 0909 	sub.w	r9, r7, r9
 8000e9e:	4449      	add	r1, r9
 8000ea0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea8:	fb09 f804 	mul.w	r8, r9, r4
 8000eac:	e7db      	b.n	8000e66 <__udivmoddi4+0x282>
 8000eae:	4673      	mov	r3, lr
 8000eb0:	e77f      	b.n	8000db2 <__udivmoddi4+0x1ce>
 8000eb2:	4650      	mov	r0, sl
 8000eb4:	e766      	b.n	8000d84 <__udivmoddi4+0x1a0>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e6fd      	b.n	8000cb6 <__udivmoddi4+0xd2>
 8000eba:	443b      	add	r3, r7
 8000ebc:	3a02      	subs	r2, #2
 8000ebe:	e733      	b.n	8000d28 <__udivmoddi4+0x144>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e71c      	b.n	8000d02 <__udivmoddi4+0x11e>
 8000ec8:	4649      	mov	r1, r9
 8000eca:	e79c      	b.n	8000e06 <__udivmoddi4+0x222>
 8000ecc:	eba1 0109 	sub.w	r1, r1, r9
 8000ed0:	46c4      	mov	ip, r8
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	e7c4      	b.n	8000e66 <__udivmoddi4+0x282>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_GPIO_Init+0x44>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f001 fab7 	bl	800249e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f842 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f7ff ffd4 	bl	8000ee0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f38:	f001 f97e 	bl	8002238 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8000f3c:	f00a fce4 	bl	800b908 <MX_USB_Device_Init>
  MX_TIM2_Init();
 8000f40:	f000 fe72 	bl	8001c28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f44:	f000 ff1e 	bl	8001d84 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f48:	f000 ffb4 	bl	8001eb4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f4c:	f000 fe1a 	bl	8001b84 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000f50:	f001 f848 	bl	8001fe4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f54:	2100      	movs	r1, #0
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <main+0x7c>)
 8000f58:	f004 fc30 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <main+0x7c>)
 8000f60:	f004 fc2c 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f64:	2108      	movs	r1, #8
 8000f66:	480f      	ldr	r0, [pc, #60]	@ (8000fa4 <main+0x7c>)
 8000f68:	f004 fc28 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <main+0x7c>)
 8000f70:	f004 fc24 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <main+0x80>)
 8000f78:	f004 fc20 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <main+0x80>)
 8000f80:	f004 fc1c 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	4809      	ldr	r0, [pc, #36]	@ (8000fac <main+0x84>)
 8000f88:	f004 fc18 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4807      	ldr	r0, [pc, #28]	@ (8000fac <main+0x84>)
 8000f90:	f004 fc14 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <main+0x88>)
 8000f96:	f004 fae3 	bl	8005560 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f9a:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <main+0x8c>)
 8000f9c:	f004 fb42 	bl	8005624 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <main+0x78>
 8000fa4:	20000244 	.word	0x20000244
 8000fa8:	20000290 	.word	0x20000290
 8000fac:	200002dc 	.word	0x200002dc
 8000fb0:	200001f8 	.word	0x200001f8
 8000fb4:	20000328 	.word	0x20000328

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	@ 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	2238      	movs	r2, #56	@ 0x38
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00b f9b8 	bl	800c33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fde:	f003 fa95 	bl	800450c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000fe2:	2322      	movs	r3, #34	@ 0x22
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001000:	2332      	movs	r3, #50	@ 0x32
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fb2d 	bl	8004674 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001020:	f000 f818 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2303      	movs	r3, #3
 800102a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2103      	movs	r1, #3
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fe2b 	bl	8004c98 <HAL_RCC_ClockConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001048:	f000 f804 	bl	8001054 <Error_Handler>
  }
}
 800104c:	bf00      	nop
 800104e:	3750      	adds	r7, #80	@ 0x50
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <normalize_angle>:
RobotState robot_state = {0.0, 0, 0, 0, 0, 0, 0};
CommandBuffer command_buffer = {0, 0, 0};
extern TIM_HandleTypeDef htim7; // Timer pour 10 ms


float normalize_angle(float angle) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle >= 360.0) angle -= 360.0;
 800106a:	e007      	b.n	800107c <normalize_angle+0x1c>
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80010c4 <normalize_angle+0x64>
 8001074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001078:	edc7 7a01 	vstr	s15, [r7, #4]
 800107c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001080:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80010c4 <normalize_angle+0x64>
 8001084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	daee      	bge.n	800106c <normalize_angle+0xc>
    while (angle < 0.0) angle += 360.0;
 800108e:	e007      	b.n	80010a0 <normalize_angle+0x40>
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80010c4 <normalize_angle+0x64>
 8001098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109c:	edc7 7a01 	vstr	s15, [r7, #4]
 80010a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	d4f0      	bmi.n	8001090 <normalize_angle+0x30>
    return angle;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	ee07 3a90 	vmov	s15, r3
}
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	43b40000 	.word	0x43b40000

080010c8 <shortest_angle_diff>:



float shortest_angle_diff(float target, float current) {
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d2:	edc7 0a00 	vstr	s1, [r7]
    float diff = target - current;
 80010d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010da:	edd7 7a00 	vldr	s15, [r7]
 80010de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e2:	edc7 7a03 	vstr	s15, [r7, #12]
    while (diff > 180.0) diff -= 360.0;
 80010e6:	e007      	b.n	80010f8 <shortest_angle_diff+0x30>
 80010e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ec:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001144 <shortest_angle_diff+0x7c>
 80010f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010f4:	edc7 7a03 	vstr	s15, [r7, #12]
 80010f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001148 <shortest_angle_diff+0x80>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dcee      	bgt.n	80010e8 <shortest_angle_diff+0x20>
    while (diff < -180.0) diff += 360.0;
 800110a:	e007      	b.n	800111c <shortest_angle_diff+0x54>
 800110c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001110:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001144 <shortest_angle_diff+0x7c>
 8001114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001118:	edc7 7a03 	vstr	s15, [r7, #12]
 800111c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001120:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800114c <shortest_angle_diff+0x84>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d4ee      	bmi.n	800110c <shortest_angle_diff+0x44>
    return diff;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	43b40000 	.word	0x43b40000
 8001148:	43340000 	.word	0x43340000
 800114c:	c3340000 	.word	0xc3340000

08001150 <motor_setSpeed>:


void motor_setSpeed(motor_t motor,uint16_t speed,int polarity){
 8001150:	b490      	push	{r4, r7}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	463c      	mov	r4, r7
 8001158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if((speed<=MAX_SPEED)&(speed!=0)){
 800115c:	8b3b      	ldrh	r3, [r7, #24]
 800115e:	3b01      	subs	r3, #1
 8001160:	b29b      	uxth	r3, r3
 8001162:	2bfe      	cmp	r3, #254	@ 0xfe
 8001164:	f200 80da 	bhi.w	800131c <motor_setSpeed+0x1cc>
		if(polarity==POLARITY_POSITIVE){
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d168      	bne.n	8001240 <motor_setSpeed+0xf0>
			__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_high, speed);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <motor_setSpeed+0x2e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	8b3a      	ldrh	r2, [r7, #24]
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34
 800117c:	e023      	b.n	80011c6 <motor_setSpeed+0x76>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d104      	bne.n	800118e <motor_setSpeed+0x3e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	8b3b      	ldrh	r3, [r7, #24]
 800118a:	6393      	str	r3, [r2, #56]	@ 0x38
 800118c:	e01b      	b.n	80011c6 <motor_setSpeed+0x76>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d104      	bne.n	800119e <motor_setSpeed+0x4e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	8b3b      	ldrh	r3, [r7, #24]
 800119a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800119c:	e013      	b.n	80011c6 <motor_setSpeed+0x76>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d104      	bne.n	80011ae <motor_setSpeed+0x5e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	8b3b      	ldrh	r3, [r7, #24]
 80011aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ac:	e00b      	b.n	80011c6 <motor_setSpeed+0x76>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d104      	bne.n	80011be <motor_setSpeed+0x6e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	8b3b      	ldrh	r3, [r7, #24]
 80011ba:	6493      	str	r3, [r2, #72]	@ 0x48
 80011bc:	e003      	b.n	80011c6 <motor_setSpeed+0x76>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	8b3b      	ldrh	r3, [r7, #24]
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
			__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, MAX_SPEED - speed);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d106      	bne.n	80011da <motor_setSpeed+0x8a>
 80011cc:	8b3b      	ldrh	r3, [r7, #24]
 80011ce:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011d8:	e032      	b.n	8001240 <motor_setSpeed+0xf0>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d107      	bne.n	80011f0 <motor_setSpeed+0xa0>
 80011e0:	8b3b      	ldrh	r3, [r7, #24]
 80011e2:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80011ee:	e027      	b.n	8001240 <motor_setSpeed+0xf0>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d107      	bne.n	8001206 <motor_setSpeed+0xb6>
 80011f6:	8b3b      	ldrh	r3, [r7, #24]
 80011f8:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	460b      	mov	r3, r1
 8001202:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001204:	e01c      	b.n	8001240 <motor_setSpeed+0xf0>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d107      	bne.n	800121c <motor_setSpeed+0xcc>
 800120c:	8b3b      	ldrh	r3, [r7, #24]
 800120e:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	460b      	mov	r3, r1
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	e011      	b.n	8001240 <motor_setSpeed+0xf0>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d107      	bne.n	8001232 <motor_setSpeed+0xe2>
 8001222:	8b3b      	ldrh	r3, [r7, #24]
 8001224:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	460b      	mov	r3, r1
 800122e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001230:	e006      	b.n	8001240 <motor_setSpeed+0xf0>
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	460b      	mov	r3, r1
 800123e:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		if(polarity==POLARITY_NEGATIVE){
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 80c3 	bne.w	80013ce <motor_setSpeed+0x27e>
			__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_high, MAX_SPEED-speed);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <motor_setSpeed+0x10c>
 800124e:	8b3b      	ldrh	r3, [r7, #24]
 8001250:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	@ 0x34
 800125a:	e032      	b.n	80012c2 <motor_setSpeed+0x172>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d107      	bne.n	8001272 <motor_setSpeed+0x122>
 8001262:	8b3b      	ldrh	r3, [r7, #24]
 8001264:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	460b      	mov	r3, r1
 800126e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001270:	e027      	b.n	80012c2 <motor_setSpeed+0x172>
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d107      	bne.n	8001288 <motor_setSpeed+0x138>
 8001278:	8b3b      	ldrh	r3, [r7, #24]
 800127a:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	460b      	mov	r3, r1
 8001284:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001286:	e01c      	b.n	80012c2 <motor_setSpeed+0x172>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d107      	bne.n	800129e <motor_setSpeed+0x14e>
 800128e:	8b3b      	ldrh	r3, [r7, #24]
 8001290:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	460b      	mov	r3, r1
 800129a:	6413      	str	r3, [r2, #64]	@ 0x40
 800129c:	e011      	b.n	80012c2 <motor_setSpeed+0x172>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d107      	bne.n	80012b4 <motor_setSpeed+0x164>
 80012a4:	8b3b      	ldrh	r3, [r7, #24]
 80012a6:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	460b      	mov	r3, r1
 80012b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012b2:	e006      	b.n	80012c2 <motor_setSpeed+0x172>
 80012b4:	8b3b      	ldrh	r3, [r7, #24]
 80012b6:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	460b      	mov	r3, r1
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
			__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, speed);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d104      	bne.n	80012d2 <motor_setSpeed+0x182>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	8b3a      	ldrh	r2, [r7, #24]
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
	else {
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_high, 125);
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
	}

}
 80012d0:	e07d      	b.n	80013ce <motor_setSpeed+0x27e>
			__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, speed);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d104      	bne.n	80012e2 <motor_setSpeed+0x192>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	8b3b      	ldrh	r3, [r7, #24]
 80012de:	6393      	str	r3, [r2, #56]	@ 0x38
 80012e0:	e075      	b.n	80013ce <motor_setSpeed+0x27e>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d104      	bne.n	80012f2 <motor_setSpeed+0x1a2>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	8b3b      	ldrh	r3, [r7, #24]
 80012ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012f0:	e06d      	b.n	80013ce <motor_setSpeed+0x27e>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d104      	bne.n	8001302 <motor_setSpeed+0x1b2>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	8b3b      	ldrh	r3, [r7, #24]
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	e065      	b.n	80013ce <motor_setSpeed+0x27e>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b10      	cmp	r3, #16
 8001306:	d104      	bne.n	8001312 <motor_setSpeed+0x1c2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	8b3b      	ldrh	r3, [r7, #24]
 800130e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001310:	e05d      	b.n	80013ce <motor_setSpeed+0x27e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	8b3b      	ldrh	r3, [r7, #24]
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800131a:	e058      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_high, 125);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <motor_setSpeed+0x1dc>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	227d      	movs	r2, #125	@ 0x7d
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
 800132a:	e023      	b.n	8001374 <motor_setSpeed+0x224>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d104      	bne.n	800133c <motor_setSpeed+0x1ec>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	237d      	movs	r3, #125	@ 0x7d
 8001338:	6393      	str	r3, [r2, #56]	@ 0x38
 800133a:	e01b      	b.n	8001374 <motor_setSpeed+0x224>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d104      	bne.n	800134c <motor_setSpeed+0x1fc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	237d      	movs	r3, #125	@ 0x7d
 8001348:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800134a:	e013      	b.n	8001374 <motor_setSpeed+0x224>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d104      	bne.n	800135c <motor_setSpeed+0x20c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	237d      	movs	r3, #125	@ 0x7d
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	e00b      	b.n	8001374 <motor_setSpeed+0x224>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b10      	cmp	r3, #16
 8001360:	d104      	bne.n	800136c <motor_setSpeed+0x21c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	237d      	movs	r3, #125	@ 0x7d
 8001368:	6493      	str	r3, [r2, #72]	@ 0x48
 800136a:	e003      	b.n	8001374 <motor_setSpeed+0x224>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	237d      	movs	r3, #125	@ 0x7d
 8001372:	64d3      	str	r3, [r2, #76]	@ 0x4c
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d104      	bne.n	8001384 <motor_setSpeed+0x234>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	227d      	movs	r2, #125	@ 0x7d
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001382:	e024      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d104      	bne.n	8001394 <motor_setSpeed+0x244>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	237d      	movs	r3, #125	@ 0x7d
 8001390:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001392:	e01c      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d104      	bne.n	80013a4 <motor_setSpeed+0x254>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	237d      	movs	r3, #125	@ 0x7d
 80013a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80013a2:	e014      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d104      	bne.n	80013b4 <motor_setSpeed+0x264>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	237d      	movs	r3, #125	@ 0x7d
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013b2:	e00c      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d104      	bne.n	80013c4 <motor_setSpeed+0x274>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	237d      	movs	r3, #125	@ 0x7d
 80013c0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80013c2:	e004      	b.n	80013ce <motor_setSpeed+0x27e>
		__HAL_TIM_SET_COMPARE(motor.TIM_motor, motor.TIM_CH_motor_low, 125);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	237d      	movs	r3, #125	@ 0x7d
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80013cc:	e7ff      	b.n	80013ce <motor_setSpeed+0x27e>
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc90      	pop	{r4, r7}
 80013d6:	4770      	bx	lr

080013d8 <apply_motor_speeds>:
		}

	}
}

void apply_motor_speeds(int16_t left_speed, int16_t right_speed) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	80fb      	strh	r3, [r7, #6]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80bb      	strh	r3, [r7, #4]
    float right_speed_compensated = (float)right_speed * RIGHT_SPEED_COMPENSATION;
 80013e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	edc7 7a05 	vstr	s15, [r7, #20]

    if (right_speed_compensated > MAX_SPEED) right_speed_compensated = MAX_SPEED;
 80013f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014d8 <apply_motor_speeds+0x100>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dd01      	ble.n	800140e <apply_motor_speeds+0x36>
 800140a:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <apply_motor_speeds+0x104>)
 800140c:	617b      	str	r3, [r7, #20]
    if (right_speed_compensated < -MAX_SPEED) right_speed_compensated = -MAX_SPEED;
 800140e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001412:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80014e0 <apply_motor_speeds+0x108>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d501      	bpl.n	8001424 <apply_motor_speeds+0x4c>
 8001420:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <apply_motor_speeds+0x10c>)
 8001422:	617b      	str	r3, [r7, #20]

    uint16_t left_speed_abs = (uint16_t)(left_speed >= 0 ? left_speed : -left_speed);
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	da03      	bge.n	8001434 <apply_motor_speeds+0x5c>
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	425b      	negs	r3, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	e000      	b.n	8001436 <apply_motor_speeds+0x5e>
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	827b      	strh	r3, [r7, #18]
    uint16_t right_speed_abs = (uint16_t)(right_speed_compensated >= 0 ? right_speed_compensated : -right_speed_compensated);
 8001438:	edd7 7a05 	vldr	s15, [r7, #20]
 800143c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	db07      	blt.n	8001456 <apply_motor_speeds+0x7e>
 8001446:	edd7 7a05 	vldr	s15, [r7, #20]
 800144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144e:	ee17 3a90 	vmov	r3, s15
 8001452:	b29b      	uxth	r3, r3
 8001454:	e008      	b.n	8001468 <apply_motor_speeds+0x90>
 8001456:	edd7 7a05 	vldr	s15, [r7, #20]
 800145a:	eef1 7a67 	vneg.f32	s15, s15
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	b29b      	uxth	r3, r3
 8001468:	823b      	strh	r3, [r7, #16]
    int left_polarity = (left_speed >= 0) ? POLARITY_POSITIVE : POLARITY_NEGATIVE;
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	0bdb      	lsrs	r3, r3, #15
 800146e:	b2db      	uxtb	r3, r3
 8001470:	60fb      	str	r3, [r7, #12]
    int right_polarity = (right_speed_compensated >= 0) ? POLARITY_POSITIVE : POLARITY_NEGATIVE;
 8001472:	edd7 7a05 	vldr	s15, [r7, #20]
 8001476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	bfac      	ite	ge
 8001480:	2301      	movge	r3, #1
 8001482:	2300      	movlt	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	60bb      	str	r3, [r7, #8]

    motor_setSpeed(m1, left_speed_abs, left_polarity);
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <apply_motor_speeds+0x110>)
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	9201      	str	r2, [sp, #4]
 8001494:	8a7a      	ldrh	r2, [r7, #18]
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149a:	f7ff fe59 	bl	8001150 <motor_setSpeed>
    motor_setSpeed(m2, left_speed_abs, left_polarity);
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <apply_motor_speeds+0x114>)
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	9201      	str	r2, [sp, #4]
 80014a4:	8a7a      	ldrh	r2, [r7, #18]
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014aa:	f7ff fe51 	bl	8001150 <motor_setSpeed>
    motor_setSpeed(m3, right_speed_abs, right_polarity);
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <apply_motor_speeds+0x118>)
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	9201      	str	r2, [sp, #4]
 80014b4:	8a3a      	ldrh	r2, [r7, #16]
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ba:	f7ff fe49 	bl	8001150 <motor_setSpeed>
    motor_setSpeed(m4, right_speed_abs, right_polarity);
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <apply_motor_speeds+0x11c>)
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	8a3a      	ldrh	r2, [r7, #16]
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ca:	f7ff fe41 	bl	8001150 <motor_setSpeed>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	437f0000 	.word	0x437f0000
 80014dc:	437f0000 	.word	0x437f0000
 80014e0:	c37f0000 	.word	0xc37f0000
 80014e4:	c37f0000 	.word	0xc37f0000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000010 	.word	0x20000010
 80014f0:	20000020 	.word	0x20000020
 80014f4:	20000030 	.word	0x20000030

080014f8 <control_wheels_with_time>:

//################
// Function to control differential drive with 4 wheels (tank-like)
// Input: direction (0-360 degrees, 8-bit), speed (0-255, 8-bit)
// Output: wheel speeds for left and right sides (positive for forward, negative for backward)
void control_wheels_with_time(RobotState* state, int16_t* left_speed, int16_t* right_speed) {
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    // Convertir direction 8 bits (0-255) en angle (0-360°)
    float target_angle = ((float)state->target_direction * 360.0) / 256.0;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001510:	ee17 0a90 	vmov	r0, s15
 8001514:	f7fe ffe4 	bl	80004e0 <__aeabi_f2d>
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4bb4      	ldr	r3, [pc, #720]	@ (80017f0 <control_wheels_with_time+0x2f8>)
 800151e:	f7ff f837 	bl	8000590 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4bb1      	ldr	r3, [pc, #708]	@ (80017f4 <control_wheels_with_time+0x2fc>)
 8001530:	f7ff f958 	bl	80007e4 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff faea 	bl	8000b14 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
    float angle_diff = shortest_angle_diff(target_angle, state->current_angle);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eef0 0a67 	vmov.f32	s1, s15
 800154e:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001552:	f7ff fdb9 	bl	80010c8 <shortest_angle_diff>
 8001556:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // Calculer la vitesse de rotation
    float rotation_speed = angle_diff / ADJUSTMENT_PERIOD;
 800155a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800155c:	f7fe ffc0 	bl	80004e0 <__aeabi_f2d>
 8001560:	a39b      	add	r3, pc, #620	@ (adr r3, 80017d0 <control_wheels_with_time+0x2d8>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f93d 	bl	80007e4 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff facf 	bl	8000b14 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	637b      	str	r3, [r7, #52]	@ 0x34
    if (fabs(rotation_speed) > MAX_ROTATION_SPEED) {
 800157a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800157e:	eef0 7ae7 	vabs.f32	s15, s15
 8001582:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80017f8 <control_wheels_with_time+0x300>
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	dd0a      	ble.n	80015a6 <control_wheels_with_time+0xae>
        rotation_speed = (rotation_speed > 0) ? MAX_ROTATION_SPEED : -MAX_ROTATION_SPEED;
 8001590:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	dd01      	ble.n	80015a2 <control_wheels_with_time+0xaa>
 800159e:	4b97      	ldr	r3, [pc, #604]	@ (80017fc <control_wheels_with_time+0x304>)
 80015a0:	e000      	b.n	80015a4 <control_wheels_with_time+0xac>
 80015a2:	4b97      	ldr	r3, [pc, #604]	@ (8001800 <control_wheels_with_time+0x308>)
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    // Mettre à jour l'angle actuel
    state->current_angle = normalize_angle(state->current_angle + rotation_speed * CONTROL_PERIOD);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff98 	bl	80004e0 <__aeabi_f2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80015b6:	f7fe ff93 	bl	80004e0 <__aeabi_f2d>
 80015ba:	a387      	add	r3, pc, #540	@ (adr r3, 80017d8 <control_wheels_with_time+0x2e0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ffe6 	bl	8000590 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4620      	mov	r0, r4
 80015ca:	4629      	mov	r1, r5
 80015cc:	f7fe fe2a 	bl	8000224 <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fa9c 	bl	8000b14 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	ee00 3a10 	vmov	s0, r3
 80015e2:	f7ff fd3d 	bl	8001060 <normalize_angle>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edc3 7a00 	vstr	s15, [r3]

    // Si l'angle est presque atteint, avancer dans la direction cible
    if (fabs(angle_diff) < 5.0) {
 80015f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80015f4:	eef0 7ae7 	vabs.f32	s15, s15
 80015f8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	f140 808e 	bpl.w	8001724 <control_wheels_with_time+0x22c>
        float rad = target_angle * PI / 180.0;
 8001608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800160a:	f7fe ff69 	bl	80004e0 <__aeabi_f2d>
 800160e:	a374      	add	r3, pc, #464	@ (adr r3, 80017e0 <control_wheels_with_time+0x2e8>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe ffbc 	bl	8000590 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b77      	ldr	r3, [pc, #476]	@ (8001804 <control_wheels_with_time+0x30c>)
 8001626:	f7ff f8dd 	bl	80007e4 <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa6f 	bl	8000b14 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
        float forward_component = cos(rad);
 800163a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800163c:	f7fe ff50 	bl	80004e0 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	ec43 2b10 	vmov	d0, r2, r3
 8001648:	f00a fea6 	bl	800c398 <cos>
 800164c:	ec53 2b10 	vmov	r2, r3, d0
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa5e 	bl	8000b14 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	623b      	str	r3, [r7, #32]
        float turn_component = sin(rad);
 800165c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800165e:	f7fe ff3f 	bl	80004e0 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	ec43 2b10 	vmov	d0, r2, r3
 800166a:	f00a fee9 	bl	800c440 <sin>
 800166e:	ec53 2b10 	vmov	r2, r3, d0
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa4d 	bl	8000b14 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	61fb      	str	r3, [r7, #28]

        float left = state->target_speed * (forward_component + turn_component);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168a:	edd7 6a08 	vldr	s13, [r7, #32]
 800168e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169a:	edc7 7a06 	vstr	s15, [r7, #24]
        float right = state->target_speed * (forward_component - turn_component);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	795b      	ldrb	r3, [r3, #5]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80016ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80016b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ba:	edc7 7a05 	vstr	s15, [r7, #20]

        *left_speed = (int16_t)(left * MAX_SPEED / 255.0);
 80016be:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001808 <control_wheels_with_time+0x310>
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	ee17 0a90 	vmov	r0, s15
 80016ce:	f7fe ff07 	bl	80004e0 <__aeabi_f2d>
 80016d2:	a345      	add	r3, pc, #276	@ (adr r3, 80017e8 <control_wheels_with_time+0x2f0>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7ff f884 	bl	80007e4 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9ee 	bl	8000ac4 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	801a      	strh	r2, [r3, #0]
        *right_speed = (int16_t)(right * MAX_SPEED / 255.0);
 80016f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001808 <control_wheels_with_time+0x310>
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe feee 	bl	80004e0 <__aeabi_f2d>
 8001704:	a338      	add	r3, pc, #224	@ (adr r3, 80017e8 <control_wheels_with_time+0x2f0>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7ff f86b 	bl	80007e4 <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9d5 	bl	8000ac4 <__aeabi_d2iz>
 800171a:	4603      	mov	r3, r0
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	e02c      	b.n	800177e <control_wheels_with_time+0x286>
    } else {
        // Pivoter sur place
        float turn_speed = rotation_speed / MAX_ROTATION_SPEED * MAX_SPEED;
 8001724:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001726:	f7fe fedb 	bl	80004e0 <__aeabi_f2d>
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <control_wheels_with_time+0x314>)
 8001730:	f7ff f858 	bl	80007e4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	a32a      	add	r3, pc, #168	@ (adr r3, 80017e8 <control_wheels_with_time+0x2f0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff f9e1 	bl	8000b14 <__aeabi_d2f>
 8001752:	4603      	mov	r3, r0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
        *left_speed = (int16_t)(-turn_speed);
 8001756:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800175a:	eef1 7a67 	vneg.f32	s15, s15
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ee17 3a90 	vmov	r3, s15
 8001766:	b21a      	sxth	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	801a      	strh	r2, [r3, #0]
        *right_speed = (int16_t)(turn_speed);
 800176c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 3a90 	vmov	r3, s15
 8001778:	b21a      	sxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	801a      	strh	r2, [r3, #0]
    }

    // Clamp des vitesses
    if (*left_speed > MAX_SPEED) *left_speed = MAX_SPEED;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001784:	2bff      	cmp	r3, #255	@ 0xff
 8001786:	dd02      	ble.n	800178e <control_wheels_with_time+0x296>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	22ff      	movs	r2, #255	@ 0xff
 800178c:	801a      	strh	r2, [r3, #0]
    if (*left_speed < -MAX_SPEED) *left_speed = -MAX_SPEED;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 8001798:	da03      	bge.n	80017a2 <control_wheels_with_time+0x2aa>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f64f 7201 	movw	r2, #65281	@ 0xff01
 80017a0:	801a      	strh	r2, [r3, #0]
    if (*right_speed > MAX_SPEED) *right_speed = MAX_SPEED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	2bff      	cmp	r3, #255	@ 0xff
 80017aa:	dd02      	ble.n	80017b2 <control_wheels_with_time+0x2ba>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	22ff      	movs	r2, #255	@ 0xff
 80017b0:	801a      	strh	r2, [r3, #0]
    if (*right_speed < -MAX_SPEED) *right_speed = -MAX_SPEED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 80017bc:	da03      	bge.n	80017c6 <control_wheels_with_time+0x2ce>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f64f 7201 	movw	r2, #65281	@ 0xff01
 80017c4:	801a      	strh	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	3738      	adds	r7, #56	@ 0x38
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	9999999a 	.word	0x9999999a
 80017d4:	3fc99999 	.word	0x3fc99999
 80017d8:	47ae147b 	.word	0x47ae147b
 80017dc:	3f847ae1 	.word	0x3f847ae1
 80017e0:	54442eea 	.word	0x54442eea
 80017e4:	400921fb 	.word	0x400921fb
 80017e8:	00000000 	.word	0x00000000
 80017ec:	406fe000 	.word	0x406fe000
 80017f0:	40768000 	.word	0x40768000
 80017f4:	40700000 	.word	0x40700000
 80017f8:	42340000 	.word	0x42340000
 80017fc:	42340000 	.word	0x42340000
 8001800:	c2340000 	.word	0xc2340000
 8001804:	40668000 	.word	0x40668000
 8001808:	437f0000 	.word	0x437f0000
 800180c:	40468000 	.word	0x40468000

08001810 <limit_speed_ramp>:
// Example usage

// Limiter les changements de vitesse, y compris les changements de sens
void limit_speed_ramp(RobotState* state, int16_t target_left_speed, int16_t target_right_speed,
                      int16_t* applied_left_speed, int16_t* applied_right_speed) {
 8001810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001814:	b088      	sub	sp, #32
 8001816:	af00      	add	r7, sp, #0
 8001818:	6178      	str	r0, [r7, #20]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	460b      	mov	r3, r1
 800181e:	827b      	strh	r3, [r7, #18]
 8001820:	4613      	mov	r3, r2
 8001822:	823b      	strh	r3, [r7, #16]
    // Gauche
    int16_t left_diff = target_left_speed - state->current_left_speed;
 8001824:	8a7a      	ldrh	r2, [r7, #18]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29b      	uxth	r3, r3
 8001832:	83fb      	strh	r3, [r7, #30]
    // Changement de sens si signes opposés
    if (state->current_left_speed * target_left_speed < 0) {
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800183a:	461a      	mov	r2, r3
 800183c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	da2c      	bge.n	80018a2 <limit_speed_ramp+0x92>
        // Aller vers 0
        if (fabs(state->current_left_speed) > MAX_SPEED_CHANGE_PER_STEP) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe34 	bl	80004bc <__aeabi_i2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	603a      	str	r2, [r7, #0]
 800185a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <limit_speed_ramp+0x1d0>)
 8001866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186a:	f7ff f921 	bl	8000ab0 <__aeabi_dcmpgt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <limit_speed_ramp+0x8a>
            state->current_left_speed += (state->current_left_speed > 0) ? -MAX_SPEED_CHANGE_PER_STEP : MAX_SPEED_CHANGE_PER_STEP;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187a:	b29b      	uxth	r3, r3
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001882:	2a00      	cmp	r2, #0
 8001884:	dd02      	ble.n	800188c <limit_speed_ramp+0x7c>
 8001886:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 800188a:	e000      	b.n	800188e <limit_speed_ramp+0x7e>
 800188c:	2205      	movs	r2, #5
 800188e:	4413      	add	r3, r2
 8001890:	b29b      	uxth	r3, r3
 8001892:	b21a      	sxth	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	81da      	strh	r2, [r3, #14]
 8001898:	e02c      	b.n	80018f4 <limit_speed_ramp+0xe4>
        } else {
            state->current_left_speed = 0; // Atteint 0, prêt pour le nouveau sens
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2200      	movs	r2, #0
 800189e:	81da      	strh	r2, [r3, #14]
 80018a0:	e028      	b.n	80018f4 <limit_speed_ramp+0xe4>
        }
    } else {
        // Même sens ou à partir de 0
        if (fabs(left_diff) > MAX_SPEED_CHANGE_PER_STEP) {
 80018a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe08 	bl	80004bc <__aeabi_i2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4692      	mov	sl, r2
 80018b2:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b49      	ldr	r3, [pc, #292]	@ (80019e0 <limit_speed_ramp+0x1d0>)
 80018bc:	4650      	mov	r0, sl
 80018be:	4659      	mov	r1, fp
 80018c0:	f7ff f8f6 	bl	8000ab0 <__aeabi_dcmpgt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d011      	beq.n	80018ee <limit_speed_ramp+0xde>
            state->current_left_speed += (left_diff > 0) ? MAX_SPEED_CHANGE_PER_STEP : -MAX_SPEED_CHANGE_PER_STEP;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	dd01      	ble.n	80018de <limit_speed_ramp+0xce>
 80018da:	2205      	movs	r2, #5
 80018dc:	e001      	b.n	80018e2 <limit_speed_ramp+0xd2>
 80018de:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	81da      	strh	r2, [r3, #14]
 80018ec:	e002      	b.n	80018f4 <limit_speed_ramp+0xe4>
        } else {
            state->current_left_speed = target_left_speed;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	8a7a      	ldrh	r2, [r7, #18]
 80018f2:	81da      	strh	r2, [r3, #14]
        }
    }

    // Droite
    int16_t right_diff = target_right_speed - state->current_right_speed;
 80018f4:	8a3a      	ldrh	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	83bb      	strh	r3, [r7, #28]
    // Changement de sens si signes opposés
    if (state->current_right_speed * target_right_speed < 0) {
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800190a:	461a      	mov	r2, r3
 800190c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	da2b      	bge.n	8001970 <limit_speed_ramp+0x160>
        // Aller vers 0
        if (fabs(state->current_right_speed) > MAX_SPEED_CHANGE_PER_STEP) {
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdcc 	bl	80004bc <__aeabi_i2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4690      	mov	r8, r2
 800192a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <limit_speed_ramp+0x1d0>)
 8001934:	4640      	mov	r0, r8
 8001936:	4649      	mov	r1, r9
 8001938:	f7ff f8ba 	bl	8000ab0 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <limit_speed_ramp+0x158>
            state->current_right_speed += (state->current_right_speed > 0) ? -MAX_SPEED_CHANGE_PER_STEP : MAX_SPEED_CHANGE_PER_STEP;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001950:	2a00      	cmp	r2, #0
 8001952:	dd02      	ble.n	800195a <limit_speed_ramp+0x14a>
 8001954:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8001958:	e000      	b.n	800195c <limit_speed_ramp+0x14c>
 800195a:	2205      	movs	r2, #5
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21a      	sxth	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	821a      	strh	r2, [r3, #16]
 8001966:	e02c      	b.n	80019c2 <limit_speed_ramp+0x1b2>
        } else {
            state->current_right_speed = 0; // Atteint 0, prêt pour le nouveau sens
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2200      	movs	r2, #0
 800196c:	821a      	strh	r2, [r3, #16]
 800196e:	e028      	b.n	80019c2 <limit_speed_ramp+0x1b2>
        }
    } else {
        // Même sens ou à partir de 0
        if (fabs(right_diff) > MAX_SPEED_CHANGE_PER_STEP) {
 8001970:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fda1 	bl	80004bc <__aeabi_i2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4614      	mov	r4, r2
 8001980:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <limit_speed_ramp+0x1d0>)
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7ff f88f 	bl	8000ab0 <__aeabi_dcmpgt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d011      	beq.n	80019bc <limit_speed_ramp+0x1ac>
            state->current_right_speed += (right_diff > 0) ? MAX_SPEED_CHANGE_PER_STEP : -MAX_SPEED_CHANGE_PER_STEP;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	dd01      	ble.n	80019ac <limit_speed_ramp+0x19c>
 80019a8:	2205      	movs	r2, #5
 80019aa:	e001      	b.n	80019b0 <limit_speed_ramp+0x1a0>
 80019ac:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 80019b0:	4413      	add	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	821a      	strh	r2, [r3, #16]
 80019ba:	e002      	b.n	80019c2 <limit_speed_ramp+0x1b2>
        } else {
            state->current_right_speed = target_right_speed;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	8a3a      	ldrh	r2, [r7, #16]
 80019c0:	821a      	strh	r2, [r3, #16]
        }
    }

    *applied_left_speed = state->current_left_speed;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	801a      	strh	r2, [r3, #0]
    *applied_right_speed = state->current_right_speed;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80019d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e0:	40140000 	.word	0x40140000

080019e4 <HAL_TIM_PeriodElapsedCallback>:

}


// Callback du timer de 10ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d138      	bne.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x84>
        int16_t target_left_speed, target_right_speed;
        int16_t applied_left_speed, applied_right_speed;

        // Calculer les vitesses cibles
        control_wheels_with_time(&robot_state, &target_left_speed, &target_right_speed);
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	f107 030e 	add.w	r3, r7, #14
 80019fe:	4619      	mov	r1, r3
 8001a00:	481c      	ldr	r0, [pc, #112]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a02:	f7ff fd79 	bl	80014f8 <control_wheels_with_time>

        // Appliquer la rampe de vitesse
        limit_speed_ramp(&robot_state, target_left_speed, target_right_speed,
 8001a06:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001a0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a0e:	f107 000a 	add.w	r0, r7, #10
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4816      	ldr	r0, [pc, #88]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a1c:	f7ff fef8 	bl	8001810 <limit_speed_ramp>
                         &applied_left_speed, &applied_right_speed);

        // Appliquer les vitesses limitées
        apply_motor_speeds(applied_left_speed, applied_right_speed);
 8001a20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fcd4 	bl	80013d8 <apply_motor_speeds>

        robot_state.step_counter++;
 8001a30:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a0f      	ldr	r2, [pc, #60]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a38:	6093      	str	r3, [r2, #8]
        if (robot_state.step_counter >= STEPS_PER_ADJUSTMENT) {
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b13      	cmp	r3, #19
 8001a40:	d912      	bls.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x84>
            robot_state.step_counter = 0;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
            if (command_buffer.valid) {
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a4a:	789b      	ldrb	r3, [r3, #2]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x84>
                robot_state.target_direction = command_buffer.direction;
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a58:	711a      	strb	r2, [r3, #4]
                robot_state.target_speed = command_buffer.speed;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a5c:	785a      	ldrb	r2, [r3, #1]
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a60:	715a      	strb	r2, [r3, #5]
                command_buffer.valid = 0;
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	709a      	strb	r2, [r3, #2]
            }
        }
    }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40001400 	.word	0x40001400
 8001a74:	200001e0 	.word	0x200001e0
 8001a78:	200001f4 	.word	0x200001f4

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a86:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ab2:	f002 fdcf 	bl	8004654 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <NMI_Handler+0x4>

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <MemManage_Handler+0x4>

08001adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1a:	f000 fd13 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <USB_HP_IRQHandler+0x10>)
 8001b2a:	f001 f8ab 	bl	8002c84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200010e0 	.word	0x200010e0

08001b38 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <USB_LP_IRQHandler+0x10>)
 8001b3e:	f001 f8a1 	bl	8002c84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200010e0 	.word	0x200010e0

08001b4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <TIM7_IRQHandler+0x10>)
 8001b52:	f003 ff33 	bl	80059bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000328 	.word	0x20000328

08001b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <MX_TIM1_Init+0xa0>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001baa:	220f      	movs	r2, #15
 8001bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bb6:	22f9      	movs	r2, #249	@ 0xf9
 8001bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bcc:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bce:	f003 fc6f 	bl	80054b0 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bd8:	f7ff fa3c 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001bea:	f004 f94b 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf4:	f7ff fa2e 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_TIM1_Init+0x9c>)
 8001c0a:	f004 ffb7 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c14:	f7ff fa1e 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200001f8 	.word	0x200001f8
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	@ 0x50
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6a:	4b45      	ldr	r3, [pc, #276]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c74:	220f      	movs	r2, #15
 8001c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c80:	22f9      	movs	r2, #249	@ 0xf9
 8001c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c90:	483b      	ldr	r0, [pc, #236]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001c92:	f003 fc0d 	bl	80054b0 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c9c:	f7ff f9da 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001caa:	4619      	mov	r1, r3
 8001cac:	4834      	ldr	r0, [pc, #208]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001cae:	f004 f8e9 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f7ff f9cc 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cbc:	4830      	ldr	r0, [pc, #192]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001cbe:	f003 fd1b 	bl	80056f8 <HAL_TIM_PWM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001cc8:	f7ff f9c4 	bl	8001054 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4829      	ldr	r0, [pc, #164]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001cdc:	f004 f9cc 	bl	8006078 <HAL_TIM_SlaveConfigSynchro>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001ce6:	f7ff f9b5 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4821      	ldr	r0, [pc, #132]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001cfa:	f004 ff3f 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001d04:	f7ff f9a6 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	@ 0x60
 8001d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4818      	ldr	r0, [pc, #96]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001d20:	f003 ff9c 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001d2a:	f7ff f993 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001d36:	f003 ff91 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001d40:	f7ff f988 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2208      	movs	r2, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001d4c:	f003 ff86 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM2_Init+0x132>
  {
    Error_Handler();
 8001d56:	f7ff f97d 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001d62:	f003 ff7b 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x148>
  {
    Error_Handler();
 8001d6c:	f7ff f972 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <MX_TIM2_Init+0x158>)
 8001d72:	f000 f9e1 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	@ 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000244 	.word	0x20000244

08001d84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	@ 0x50
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc6:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001dc8:	4a39      	ldr	r2, [pc, #228]	@ (8001eb0 <MX_TIM3_Init+0x12c>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001dce:	220f      	movs	r2, #15
 8001dd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 249;
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001dda:	22f9      	movs	r2, #249	@ 0xf9
 8001ddc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dea:	4830      	ldr	r0, [pc, #192]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001dec:	f003 fb60 	bl	80054b0 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001df6:	f7ff f92d 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e04:	4619      	mov	r1, r3
 8001e06:	4829      	ldr	r0, [pc, #164]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e08:	f004 f83c 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e12:	f7ff f91f 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e16:	4825      	ldr	r0, [pc, #148]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e18:	f003 fc6e 	bl	80056f8 <HAL_TIM_PWM_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001e22:	f7ff f917 	bl	8001054 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e26:	2306      	movs	r3, #6
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e32:	4619      	mov	r1, r3
 8001e34:	481d      	ldr	r0, [pc, #116]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e36:	f004 f91f 	bl	8006078 <HAL_TIM_SlaveConfigSynchro>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001e40:	f7ff f908 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e44:	2320      	movs	r3, #32
 8001e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	4619      	mov	r1, r3
 8001e52:	4816      	ldr	r0, [pc, #88]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e54:	f004 fe92 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001e5e:	f7ff f8f9 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2360      	movs	r3, #96	@ 0x60
 8001e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	4619      	mov	r1, r3
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e7a:	f003 feef 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001e84:	f7ff f8e6 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4807      	ldr	r0, [pc, #28]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001e90:	f003 fee4 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001e9a:	f7ff f8db 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e9e:	4803      	ldr	r0, [pc, #12]	@ (8001eac <MX_TIM3_Init+0x128>)
 8001ea0:	f000 f94a 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001ea4:	bf00      	nop
 8001ea6:	3750      	adds	r7, #80	@ 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000290 	.word	0x20000290
 8001eb0:	40000400 	.word	0x40000400

08001eb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	@ 0x50
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001ef8:	4a39      	ldr	r2, [pc, #228]	@ (8001fe0 <MX_TIM4_Init+0x12c>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001efe:	220f      	movs	r2, #15
 8001f00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001f08:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f0a:	22f9      	movs	r2, #249	@ 0xf9
 8001f0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b33      	ldr	r3, [pc, #204]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f1a:	4830      	ldr	r0, [pc, #192]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f1c:	f003 fac8 	bl	80054b0 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f26:	f7ff f895 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f34:	4619      	mov	r1, r3
 8001f36:	4829      	ldr	r0, [pc, #164]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f38:	f003 ffa4 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f42:	f7ff f887 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f46:	4825      	ldr	r0, [pc, #148]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f48:	f003 fbd6 	bl	80056f8 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001f52:	f7ff f87f 	bl	8001054 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f56:	2306      	movs	r3, #6
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	481d      	ldr	r0, [pc, #116]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f66:	f004 f887 	bl	8006078 <HAL_TIM_SlaveConfigSynchro>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001f70:	f7ff f870 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f74:	2320      	movs	r3, #32
 8001f76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	4619      	mov	r1, r3
 8001f82:	4816      	ldr	r0, [pc, #88]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001f84:	f004 fdfa 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001f8e:	f7ff f861 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f92:	2360      	movs	r3, #96	@ 0x60
 8001f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001faa:	f003 fe57 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001fb4:	f7ff f84e 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001fc0:	f003 fe4c 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001fca:	f7ff f843 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fce:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <MX_TIM4_Init+0x128>)
 8001fd0:	f000 f8b2 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	@ 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200002dc 	.word	0x200002dc
 8001fe0:	40000800 	.word	0x40000800

08001fe4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <MX_TIM7_Init+0x64>)
 8001ff6:	4a15      	ldr	r2, [pc, #84]	@ (800204c <MX_TIM7_Init+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <MX_TIM7_Init+0x64>)
 8001ffc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002000:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <MX_TIM7_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <MX_TIM7_Init+0x64>)
 800200a:	2263      	movs	r2, #99	@ 0x63
 800200c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <MX_TIM7_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <MX_TIM7_Init+0x64>)
 8002016:	f003 fa4b 	bl	80054b0 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002020:	f7ff f818 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	@ (8002048 <MX_TIM7_Init+0x64>)
 8002032:	f004 fda3 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800203c:	f7ff f80a 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000328 	.word	0x20000328
 800204c:	40001400 	.word	0x40001400

08002050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_TIM_Base_MspInit+0xd4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10c      	bne.n	800207c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002062:	4b31      	ldr	r3, [pc, #196]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	4a30      	ldr	r2, [pc, #192]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002068:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800206c:	6613      	str	r3, [r2, #96]	@ 0x60
 800206e:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800207a:	e04e      	b.n	800211a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d10c      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]
}
 800209e:	e03c      	b.n	800211a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a21      	ldr	r2, [pc, #132]	@ (800212c <HAL_TIM_Base_MspInit+0xdc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10c      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
}
 80020c2:	e02a      	b.n	800211a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_TIM_Base_MspInit+0xe0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10c      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ce:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
}
 80020e6:	e018      	b.n	800211a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM7)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a11      	ldr	r2, [pc, #68]	@ (8002134 <HAL_TIM_Base_MspInit+0xe4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d113      	bne.n	800211a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <HAL_TIM_Base_MspInit+0xd8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2101      	movs	r1, #1
 800210e:	2037      	movs	r0, #55	@ 0x37
 8002110:	f000 fb11 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002114:	2037      	movs	r0, #55	@ 0x37
 8002116:	f000 fb28 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40001400 	.word	0x40001400

08002138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002158:	d11d      	bne.n	8002196 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	4a32      	ldr	r2, [pc, #200]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_A_Pin|M2_B_Pin|M3_A_Pin|M3_B_Pin;
 8002172:	230f      	movs	r3, #15
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002190:	f000 fb06 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002194:	e043      	b.n	800221e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a24      	ldr	r2, [pc, #144]	@ (800222c <HAL_TIM_MspPostInit+0xf4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d11d      	bne.n	80021dc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a4:	4a20      	ldr	r2, [pc, #128]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin;
 80021b8:	23c0      	movs	r3, #192	@ 0xc0
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c8:	2302      	movs	r3, #2
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d6:	f000 fae3 	bl	80027a0 <HAL_GPIO_Init>
}
 80021da:	e020      	b.n	800221e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a13      	ldr	r2, [pc, #76]	@ (8002230 <HAL_TIM_MspPostInit+0xf8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11b      	bne.n	800221e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <HAL_TIM_MspPostInit+0xf0>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_B_Pin|M4_A_Pin;
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800220e:	2302      	movs	r3, #2
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4806      	ldr	r0, [pc, #24]	@ (8002234 <HAL_TIM_MspPostInit+0xfc>)
 800221a:	f000 fac1 	bl	80027a0 <HAL_GPIO_Init>
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	48000400 	.word	0x48000400

08002238 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <MX_USART1_UART_Init+0x94>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002282:	f004 fd43 	bl	8006d0c <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800228c:	f7fe fee2 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002290:	2100      	movs	r1, #0
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002294:	f005 faae 	bl	80077f4 <HAL_UARTEx_SetTxFifoThreshold>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800229e:	f7fe fed9 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a2:	2100      	movs	r1, #0
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 80022a6:	f005 fae3 	bl	8007870 <HAL_UARTEx_SetRxFifoThreshold>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b0:	f7fe fed0 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 80022b6:	f005 fa64 	bl	8007782 <HAL_UARTEx_DisableFifoMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c0:	f7fe fec8 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000374 	.word	0x20000374
 80022cc:	40013800 	.word	0x40013800

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b09a      	sub	sp, #104	@ 0x68
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2244      	movs	r2, #68	@ 0x44
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00a f823 	bl	800c33c <memset>
  if(uartHandle->Instance==USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_UART_MspInit+0xa8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d137      	bne.n	8002370 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fedf 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002318:	f7fe fe9c 	bl	8001054 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	4b17      	ldr	r3, [pc, #92]	@ (800237c <HAL_UART_MspInit+0xac>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002320:	4a16      	ldr	r2, [pc, #88]	@ (800237c <HAL_UART_MspInit+0xac>)
 8002322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002326:	6613      	str	r3, [r2, #96]	@ 0x60
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_UART_MspInit+0xac>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_UART_MspInit+0xac>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_UART_MspInit+0xac>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002340:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_UART_MspInit+0xac>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800234c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002350:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800235e:	2307      	movs	r3, #7
 8002360:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800236c:	f000 fa18 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002370:	bf00      	nop
 8002372:	3768      	adds	r7, #104	@ 0x68
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013800 	.word	0x40013800
 800237c:	40021000 	.word	0x40021000

08002380 <calculate_checksum>:


extern CommandBuffer command_buffer;


static uint8_t calculate_checksum(uint8_t * data,uint32_t len) {
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	uint8_t checksum = data[0];
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 1; i < len-1; i++) {
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	e009      	b.n	80023aa <calculate_checksum+0x2a>
		checksum ^= data[i];
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4413      	add	r3, r2
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4053      	eors	r3, r2
 80023a2:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 1; i < len-1; i++) {
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3f0      	bcc.n	8002396 <calculate_checksum+0x16>
	}
	return checksum;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <process_received_data>:

void process_received_data(uint8_t* data, uint32_t len) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	if (len==0) return;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d035      	beq.n	8002440 <process_received_data+0x7c>

	if (len == 4) {
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d133      	bne.n	8002442 <process_received_data+0x7e>
		// Traiter directement
		// Exemple : data[0] = commande, data[1-4] = paramètres
		uint8_t response[1];
		switch (data[0]) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b24      	cmp	r3, #36	@ 0x24
 80023e0:	d002      	beq.n	80023e8 <process_received_data+0x24>
 80023e2:	2b40      	cmp	r3, #64	@ 0x40
 80023e4:	d012      	beq.n	800240c <process_received_data+0x48>
 80023e6:	e021      	b.n	800242c <process_received_data+0x68>
		case 0x24:

			command_buffer.direction = data[1];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	785a      	ldrb	r2, [r3, #1]
 80023ec:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <process_received_data+0x84>)
 80023ee:	701a      	strb	r2, [r3, #0]
			command_buffer.speed = data[2];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	789a      	ldrb	r2, [r3, #2]
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <process_received_data+0x84>)
 80023f6:	705a      	strb	r2, [r3, #1]
			command_buffer.valid = 1;
 80023f8:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <process_received_data+0x84>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	709a      	strb	r2, [r3, #2]
			response[0] = calculate_checksum(data,len);
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffbd 	bl	8002380 <calculate_checksum>
 8002406:	4603      	mov	r3, r0
 8002408:	733b      	strb	r3, [r7, #12]
			break;
 800240a:	e012      	b.n	8002432 <process_received_data+0x6e>
		case 0x40: // Commande 2
			command_buffer.direction = 0;
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <process_received_data+0x84>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
			command_buffer.speed = 0;
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <process_received_data+0x84>)
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
			command_buffer.valid = 0;
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <process_received_data+0x84>)
 800241a:	2200      	movs	r2, #0
 800241c:	709a      	strb	r2, [r3, #2]

			response[0] = calculate_checksum(data,len);
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffad 	bl	8002380 <calculate_checksum>
 8002426:	4603      	mov	r3, r0
 8002428:	733b      	strb	r3, [r7, #12]
			break;
 800242a:	e002      	b.n	8002432 <process_received_data+0x6e>
		default:
			response[0] = ((uint8_t)0x33);
 800242c:	2333      	movs	r3, #51	@ 0x33
 800242e:	733b      	strb	r3, [r7, #12]
			break;
 8002430:	bf00      	nop

		}
		CDC_Transmit_FS(response,1);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f009 fb2b 	bl	800ba94 <CDC_Transmit_FS>
 800243e:	e000      	b.n	8002442 <process_received_data+0x7e>
	if (len==0) return;
 8002440:	bf00      	nop
	}
}
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200001f4 	.word	0x200001f4

0800244c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800244c:	480d      	ldr	r0, [pc, #52]	@ (8002484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800244e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002450:	f7ff fb86 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002454:	480c      	ldr	r0, [pc, #48]	@ (8002488 <LoopForever+0x6>)
  ldr r1, =_edata
 8002456:	490d      	ldr	r1, [pc, #52]	@ (800248c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <LoopForever+0xe>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800246c:	4c0a      	ldr	r4, [pc, #40]	@ (8002498 <LoopForever+0x16>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f009 ff67 	bl	800c34c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247e:	f7fe fd53 	bl	8000f28 <main>

08002482 <LoopForever>:

LoopForever:
    b LoopForever
 8002482:	e7fe      	b.n	8002482 <LoopForever>
  ldr   r0, =_estack
 8002484:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8002490:	0800d710 	.word	0x0800d710
  ldr r2, =_sbss
 8002494:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8002498:	200015dc 	.word	0x200015dc

0800249c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_2_IRQHandler>

0800249e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f939 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ae:	200f      	movs	r0, #15
 80024b0:	f000 f80e 	bl	80024d0 <HAL_InitTick>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	e001      	b.n	80024c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c0:	f7ff fadc 	bl	8001a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c4:	79fb      	ldrb	r3, [r7, #7]

}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_InitTick+0x68>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d022      	beq.n	800252a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024e4:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_InitTick+0x6c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_InitTick+0x68>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f944 	bl	8002786 <HAL_SYSTICK_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d809      	bhi.n	800251e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250a:	2200      	movs	r2, #0
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	f000 f910 	bl	8002736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_InitTick+0x70>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e007      	b.n	800252e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e004      	b.n	800252e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000048 	.word	0x20000048
 800253c:	20000040 	.word	0x20000040
 8002540:	20000044 	.word	0x20000044

08002544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_IncTick+0x1c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_IncTick+0x20>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4413      	add	r3, r2
 8002552:	4a03      	ldr	r2, [pc, #12]	@ (8002560 <HAL_IncTick+0x1c>)
 8002554:	6013      	str	r3, [r2, #0]
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000408 	.word	0x20000408
 8002564:	20000048 	.word	0x20000048

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000408 	.word	0x20000408

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	@ (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	@ (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	@ (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	@ (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff40 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff33 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa4 	bl	80026dc <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ae:	e15a      	b.n	8002a66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 814c 	beq.w	8002a60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d005      	beq.n	80027e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d130      	bne.n	8002842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002816:	2201      	movs	r2, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0201 	and.w	r2, r3, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d017      	beq.n	800287e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d123      	bne.n	80028d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0203 	and.w	r2, r3, #3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80a6 	beq.w	8002a60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002914:	4b5b      	ldr	r3, [pc, #364]	@ (8002a84 <HAL_GPIO_Init+0x2e4>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	4a5a      	ldr	r2, [pc, #360]	@ (8002a84 <HAL_GPIO_Init+0x2e4>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002920:	4b58      	ldr	r3, [pc, #352]	@ (8002a84 <HAL_GPIO_Init+0x2e4>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292c:	4a56      	ldr	r2, [pc, #344]	@ (8002a88 <HAL_GPIO_Init+0x2e8>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002956:	d01f      	beq.n	8002998 <HAL_GPIO_Init+0x1f8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a8c <HAL_GPIO_Init+0x2ec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d019      	beq.n	8002994 <HAL_GPIO_Init+0x1f4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a4b      	ldr	r2, [pc, #300]	@ (8002a90 <HAL_GPIO_Init+0x2f0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <HAL_GPIO_Init+0x1f0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a94 <HAL_GPIO_Init+0x2f4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00d      	beq.n	800298c <HAL_GPIO_Init+0x1ec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a49      	ldr	r2, [pc, #292]	@ (8002a98 <HAL_GPIO_Init+0x2f8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <HAL_GPIO_Init+0x1e8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a48      	ldr	r2, [pc, #288]	@ (8002a9c <HAL_GPIO_Init+0x2fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_GPIO_Init+0x1e4>
 8002980:	2305      	movs	r3, #5
 8002982:	e00a      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 8002984:	2306      	movs	r3, #6
 8002986:	e008      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 8002988:	2304      	movs	r3, #4
 800298a:	e006      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 800298c:	2303      	movs	r3, #3
 800298e:	e004      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 8002990:	2302      	movs	r3, #2
 8002992:	e002      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_GPIO_Init+0x1fa>
 8002998:	2300      	movs	r3, #0
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029aa:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_GPIO_Init+0x2e8>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b8:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029dc:	4a30      	ldr	r2, [pc, #192]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029e2:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a06:	4a26      	ldr	r2, [pc, #152]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a30:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a5a:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f ae9d 	bne.w	80027b0 <HAL_GPIO_Init+0x10>
  }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	48000400 	.word	0x48000400
 8002a90:	48000800 	.word	0x48000800
 8002a94:	48000c00 	.word	0x48000c00
 8002a98:	48001000 	.word	0x48001000
 8002a9c:	48001400 	.word	0x48001400
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0c0      	b.n	8002c38 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f009 f92a 	bl	800bd24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 ff6a 	bl	80079b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e03e      	b.n	8002b66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3311      	adds	r3, #17
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3310      	adds	r3, #16
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3313      	adds	r3, #19
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3320      	adds	r3, #32
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	3324      	adds	r3, #36	@ 0x24
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3bb      	bcc.n	8002ae8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e044      	b.n	8002c00 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3b5      	bcc.n	8002b76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c16:	f004 fee9 	bl	80079ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a9b      	ldrb	r3, [r3, #10]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d102      	bne.n	8002c36 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 fc40 	bl	80044b6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_Start+0x16>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e012      	b.n	8002c7c <HAL_PCD_Start+0x3c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fe90 	bl	8007988 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f007 f950 	bl	8009f12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f007 f955 	bl	8009f40 <USB_ReadInterrupts>
 8002c96:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fb04 	bl	80032b0 <PCD_EP_ISR_Handler>

    return;
 8002ca8:	e110      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f009 f8c2 	bl	800be56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8fc 	bl	8002ed2 <HAL_PCD_SetAddress>

    return;
 8002cda:	e0f7      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cfe:	e0e5      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d22:	e0d3      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d034      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0204 	bic.w	r2, r2, #4
 8002d40:	b292      	uxth	r2, r2
 8002d42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d70:	2100      	movs	r1, #0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f009 fa62 	bl	800c23c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f009 f8a5 	bl	800bec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d96:	e099      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d027      	beq.n	8002df2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0208 	orr.w	r2, r2, #8
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0204 	orr.w	r2, r2, #4
 8002de4:	b292      	uxth	r2, r2
 8002de6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f009 f852 	bl	800be94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002df0:	e06c      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d040      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0204 	orr.w	r2, r2, #4
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0208 	orr.w	r2, r2, #8
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f009 f9e4 	bl	800c23c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002e74:	e02a      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f009 f80c 	bl	800be94 <HAL_PCD_SuspendCallback>
    return;
 8002e7c:	e026      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00f      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f008 ffca 	bl	800be3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ea6:	e011      	b.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eca:	bf00      	nop
  }
}
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_PCD_SetAddress+0x1a>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e012      	b.n	8002f12 <HAL_PCD_SetAddress+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f006 fff1 	bl	8009eea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	4608      	mov	r0, r1
 8002f24:	4611      	mov	r1, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	70fb      	strb	r3, [r7, #3]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	803b      	strh	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da0e      	bge.n	8002f5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 0207 	and.w	r2, r3, #7
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	3310      	adds	r3, #16
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	e00e      	b.n	8002f7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0207 	and.w	r2, r3, #7
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f88:	883a      	ldrh	r2, [r7, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	78ba      	ldrb	r2, [r7, #2]
 8002f92:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f94:	78bb      	ldrb	r3, [r7, #2]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d102      	bne.n	8002fa0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_EP_Open+0x94>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_Open+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fd33 	bl	8007a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da0e      	bge.n	8003006 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	705a      	strb	r2, [r3, #1]
 8003004:	e00e      	b.n	8003024 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 0207 	and.w	r2, r3, #7
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_PCD_EP_Close+0x6a>
 800303a:	2302      	movs	r3, #2
 800303c:	e00e      	b.n	800305c <HAL_PCD_EP_Close+0x88>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f005 f8af 	bl	80081b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	460b      	mov	r3, r1
 8003072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 0207 	and.w	r2, r3, #7
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f005 fa67 	bl	800858a <USB_EPStartXfer>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 0207 	and.w	r2, r3, #7
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80030e8:	681b      	ldr	r3, [r3, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	460b      	mov	r3, r1
 8003104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 0207 	and.w	r2, r3, #7
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3310      	adds	r3, #16
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2201      	movs	r2, #1
 8003140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	b2da      	uxtb	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	4618      	mov	r0, r3
 8003156:	f005 fa18 	bl	800858a <USB_EPStartXfer>

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	7912      	ldrb	r2, [r2, #4]
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e03e      	b.n	8003200 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0e      	bge.n	80031a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0207 	and.w	r2, r3, #7
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3310      	adds	r3, #16
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00c      	b.n	80031c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_PCD_EP_SetStall+0x7e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e00e      	b.n	8003200 <HAL_PCD_EP_SetStall+0x9c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f006 fd7b 	bl	8009cec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	7912      	ldrb	r2, [r2, #4]
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e040      	b.n	80032a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322a:	2b00      	cmp	r3, #0
 800322c:	da0e      	bge.n	800324c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 0207 	and.w	r2, r3, #7
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	3310      	adds	r3, #16
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	705a      	strb	r2, [r3, #1]
 800324a:	e00e      	b.n	800326a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_PCD_EP_ClrStall+0x82>
 8003286:	2302      	movs	r3, #2
 8003288:	e00e      	b.n	80032a8 <HAL_PCD_EP_ClrStall+0xa0>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f006 fd78 	bl	8009d8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b096      	sub	sp, #88	@ 0x58
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032b8:	e3ad      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80032d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 816f 	bne.w	80035bc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14c      	bne.n	8003384 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fa:	81fb      	strh	r3, [r7, #14]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3310      	adds	r3, #16
 8003312:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	441a      	add	r2, r3
 8003346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003348:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800334a:	2100      	movs	r1, #0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f008 fd5a 	bl	800be06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7b1b      	ldrb	r3, [r3, #12]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 835c 	beq.w	8003a16 <PCD_EP_ISR_Handler+0x766>
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8357 	bne.w	8003a16 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7b1b      	ldrb	r3, [r3, #12]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003372:	b2da      	uxtb	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	731a      	strb	r2, [r3, #12]
 8003382:	e348      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800338a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800339a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d032      	beq.n	8003408 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f006 fe02 	bl	8009fe6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033ee:	4013      	ands	r3, r2
 80033f0:	823b      	strh	r3, [r7, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	8a3a      	ldrh	r2, [r7, #16]
 80033f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033fc:	b292      	uxth	r2, r2
 80033fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f008 fcd3 	bl	800bdac <HAL_PCD_SetupStageCallback>
 8003406:	e306      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003408:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800340c:	2b00      	cmp	r3, #0
 800340e:	f280 8302 	bge.w	8003a16 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29a      	uxth	r2, r3
 800341a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800341e:	4013      	ands	r3, r2
 8003420:	83fb      	strh	r3, [r7, #30]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	8bfa      	ldrh	r2, [r7, #30]
 8003428:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800342c:	b292      	uxth	r2, r2
 800342e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4413      	add	r3, r2
 800344a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003456:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d019      	beq.n	8003494 <PCD_EP_ISR_Handler+0x1e4>
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	6959      	ldr	r1, [r3, #20]
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003478:	b29b      	uxth	r3, r3
 800347a:	f006 fdb4 	bl	8009fe6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	441a      	add	r2, r3
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800348c:	2100      	movs	r1, #0
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f008 fc9e 	bl	800bdd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800349e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 82b5 	bne.w	8003a16 <PCD_EP_ISR_Handler+0x766>
 80034ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034b0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034b8:	f000 82ad 	beq.w	8003a16 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80034f2:	d91d      	bls.n	8003530 <PCD_EP_ISR_Handler+0x280>
 80034f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <PCD_EP_ISR_Handler+0x25e>
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	3b01      	subs	r3, #1
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003516:	b29b      	uxth	r3, r3
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	b29b      	uxth	r3, r3
 800351c:	4313      	orrs	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003528:	b29a      	uxth	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	e026      	b.n	800357e <PCD_EP_ISR_Handler+0x2ce>
 8003530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <PCD_EP_ISR_Handler+0x29e>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003546:	b29a      	uxth	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	801a      	strh	r2, [r3, #0]
 800354c:	e017      	b.n	800357e <PCD_EP_ISR_Handler+0x2ce>
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	647b      	str	r3, [r7, #68]	@ 0x44
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <PCD_EP_ISR_Handler+0x2b8>
 8003562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003564:	3301      	adds	r3, #1
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003570:	b29b      	uxth	r3, r3
 8003572:	029b      	lsls	r3, r3, #10
 8003574:	b29b      	uxth	r3, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	b29a      	uxth	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800358a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358e:	827b      	strh	r3, [r7, #18]
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003596:	827b      	strh	r3, [r7, #18]
 8003598:	8a7b      	ldrh	r3, [r7, #18]
 800359a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800359e:	827b      	strh	r3, [r7, #18]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	8a7b      	ldrh	r3, [r7, #18]
 80035a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]
 80035ba:	e22c      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f280 80f6 	bge.w	80037c6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035f0:	4013      	ands	r3, r2
 80035f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003608:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003610:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003628:	7b1b      	ldrb	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d123      	bne.n	8003676 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	4413      	add	r3, r2
 8003648:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003652:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003656:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 808e 	beq.w	800377c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	6959      	ldr	r1, [r3, #20]
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	88da      	ldrh	r2, [r3, #6]
 800366c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003670:	f006 fcb9 	bl	8009fe6 <USB_ReadPMA>
 8003674:	e082      	b.n	800377c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	78db      	ldrb	r3, [r3, #3]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d10a      	bne.n	8003694 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800367e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003682:	461a      	mov	r2, r3
 8003684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9d3 	bl	8003a32 <HAL_PCD_EP_DB_Receive>
 800368c:	4603      	mov	r3, r0
 800368e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003692:	e073      	b.n	800377c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	441a      	add	r2, r3
 80036c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d022      	beq.n	8003738 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	4413      	add	r3, r2
 800370c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003716:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800371a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02c      	beq.n	800377c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003728:	6959      	ldr	r1, [r3, #20]
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	891a      	ldrh	r2, [r3, #8]
 800372e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003732:	f006 fc58 	bl	8009fe6 <USB_ReadPMA>
 8003736:	e021      	b.n	800377c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003740:	b29b      	uxth	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4413      	add	r3, r2
 8003752:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003760:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	6959      	ldr	r1, [r3, #20]
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	895a      	ldrh	r2, [r3, #10]
 8003774:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003778:	f006 fc35 	bl	8009fe6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800377c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003784:	441a      	add	r2, r3
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800378a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003792:	441a      	add	r2, r3
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <PCD_EP_ISR_Handler+0x4fc>
 80037a0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d206      	bcs.n	80037ba <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f008 fb0c 	bl	800bdd0 <HAL_PCD_DataOutStageCallback>
 80037b8:	e005      	b.n	80037c6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fee2 	bl	800858a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8121 	beq.w	8003a16 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80037d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	3310      	adds	r3, #16
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003820:	b29b      	uxth	r3, r3
 8003822:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	78db      	ldrb	r3, [r3, #3]
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 80a2 	bne.w	8003972 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	7b1b      	ldrb	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8093 	beq.w	8003964 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800383e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d046      	beq.n	80038d8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d126      	bne.n	80038a0 <PCD_EP_ISR_Handler+0x5f0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003860:	b29b      	uxth	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	4413      	add	r3, r2
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	00da      	lsls	r2, r3, #3
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	4413      	add	r3, r2
 8003874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003884:	b29a      	uxth	r2, r3
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003898:	b29a      	uxth	r2, r3
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e061      	b.n	8003964 <PCD_EP_ISR_Handler+0x6b4>
 80038a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d15d      	bne.n	8003964 <PCD_EP_ISR_Handler+0x6b4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	4413      	add	r3, r2
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	2200      	movs	r2, #0
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	e045      	b.n	8003964 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d126      	bne.n	8003934 <PCD_EP_ISR_Handler+0x684>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fa:	4413      	add	r3, r2
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	00da      	lsls	r2, r3, #3
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	4413      	add	r3, r2
 8003908:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800390c:	633b      	str	r3, [r7, #48]	@ 0x30
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003918:	b29a      	uxth	r2, r3
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392c:	b29a      	uxth	r2, r3
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e017      	b.n	8003964 <PCD_EP_ISR_Handler+0x6b4>
 8003934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d113      	bne.n	8003964 <PCD_EP_ISR_Handler+0x6b4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394a:	4413      	add	r3, r2
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	00da      	lsls	r2, r3, #3
 8003954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003956:	4413      	add	r3, r2
 8003958:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f008 fa4b 	bl	800be06 <HAL_PCD_DataInStageCallback>
 8003970:	e051      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d144      	bne.n	8003a08 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4413      	add	r3, r2
 8003998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d907      	bls.n	80039c2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039ba:	1ad2      	subs	r2, r2, r3
 80039bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	e002      	b.n	80039c8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80039c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f008 fa15 	bl	800be06 <HAL_PCD_DataInStageCallback>
 80039dc:	e01b      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039e6:	441a      	add	r2, r3
 80039e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039f4:	441a      	add	r2, r3
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fdc2 	bl	800858a <USB_EPStartXfer>
 8003a06:	e006      	b.n	8003a16 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f917 	bl	8003c44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f6ff ac49 	blt.w	80032ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3758      	adds	r7, #88	@ 0x58
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b088      	sub	sp, #32
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07c      	beq.n	8003b44 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d306      	bcc.n	8003a88 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e002      	b.n	8003a8e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d123      	bne.n	8003ade <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab0:	833b      	strh	r3, [r7, #24]
 8003ab2:	8b3b      	ldrh	r3, [r7, #24]
 8003ab4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ab8:	833b      	strh	r3, [r7, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8b3b      	ldrh	r3, [r7, #24]
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	82fb      	strh	r3, [r7, #22]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	8afb      	ldrh	r3, [r7, #22]
 8003b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b28:	8b7b      	ldrh	r3, [r7, #26]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8085 	beq.w	8003c3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6959      	ldr	r1, [r3, #20]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	891a      	ldrh	r2, [r3, #8]
 8003b3c:	8b7b      	ldrh	r3, [r7, #26]
 8003b3e:	f006 fa52 	bl	8009fe6 <USB_ReadPMA>
 8003b42:	e07a      	b.n	8003c3a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	8b7b      	ldrh	r3, [r7, #26]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d306      	bcc.n	8003b82 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	1ad2      	subs	r2, r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	e002      	b.n	8003b88 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2200      	movs	r2, #0
 8003b86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d123      	bne.n	8003bd8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	83fb      	strh	r3, [r7, #30]
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bb2:	83fb      	strh	r3, [r7, #30]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	8bfb      	ldrh	r3, [r7, #30]
 8003bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11f      	bne.n	8003c22 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfc:	83bb      	strh	r3, [r7, #28]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	441a      	add	r2, r3
 8003c0c:	8bbb      	ldrh	r3, [r7, #28]
 8003c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c22:	8b7b      	ldrh	r3, [r7, #26]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6959      	ldr	r1, [r3, #20]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	895a      	ldrh	r2, [r3, #10]
 8003c34:	8b7b      	ldrh	r3, [r7, #26]
 8003c36:	f006 f9d6 	bl	8009fe6 <USB_ReadPMA>
    }
  }

  return count;
 8003c3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b0a4      	sub	sp, #144	@ 0x90
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 81db 	beq.w	8004014 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c82:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d907      	bls.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c9a:	1ad2      	subs	r2, r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	619a      	str	r2, [r3, #24]
 8003ca0:	e002      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f040 80b9 	bne.w	8003e24 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d126      	bne.n	8003d08 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	4413      	add	r3, r2
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	00da      	lsls	r2, r3, #3
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	4413      	add	r3, r2
 8003cdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e01a      	b.n	8003d3e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d116      	bne.n	8003d3e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d24:	4413      	add	r3, r2
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	00da      	lsls	r2, r3, #3
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d30:	4413      	add	r3, r2
 8003d32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d126      	bne.n	8003d9a <HAL_PCD_EP_DB_Transmit+0x156>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00da      	lsls	r2, r3, #3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	e017      	b.n	8003dca <HAL_PCD_EP_DB_Transmit+0x186>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d113      	bne.n	8003dca <HAL_PCD_EP_DB_Transmit+0x186>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	4413      	add	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	00da      	lsls	r2, r3, #3
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f008 f818 	bl	800be06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 82fa 	beq.w	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	82fb      	strh	r3, [r7, #22]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	8afb      	ldrh	r3, [r7, #22]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
 8003e22:	e2d8      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d021      	beq.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 82ac 	bne.w	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e86:	441a      	add	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e94:	441a      	add	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d30b      	bcc.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb6:	1ad2      	subs	r2, r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	621a      	str	r2, [r3, #32]
 8003ebc:	e017      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003ec6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ed6:	e00a      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d165      	bne.n	8003fc2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0a:	4413      	add	r3, r2
 8003f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	00da      	lsls	r2, r3, #3
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f32:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f34:	d91d      	bls.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e044      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	e035      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_PCD_EP_DB_Transmit+0x366>
 8003fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e01c      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d118      	bne.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fde:	4413      	add	r3, r2
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00da      	lsls	r2, r3, #3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6959      	ldr	r1, [r3, #20]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	891a      	ldrh	r2, [r3, #8]
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800400c:	b29b      	uxth	r3, r3
 800400e:	f005 ffa7 	bl	8009f60 <USB_WritePMA>
 8004012:	e1e0      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	4413      	add	r3, r2
 800402e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004038:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004044:	429a      	cmp	r2, r3
 8004046:	d307      	bcc.n	8004058 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	619a      	str	r2, [r3, #24]
 8004056:	e002      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 80c0 	bne.w	80041e8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d126      	bne.n	80040be <HAL_PCD_EP_DB_Transmit+0x47a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004084:	4413      	add	r3, r2
 8004086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	00da      	lsls	r2, r3, #3
 800408e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004090:	4413      	add	r3, r2
 8004092:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004096:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	e01a      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d116      	bne.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040da:	4413      	add	r3, r2
 80040dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	00da      	lsls	r2, r3, #3
 80040e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e6:	4413      	add	r3, r2
 80040e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040f0:	2200      	movs	r2, #0
 80040f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d12b      	bne.n	800415a <HAL_PCD_EP_DB_Transmit+0x516>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004110:	b29b      	uxth	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004116:	4413      	add	r3, r2
 8004118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004122:	4413      	add	r3, r2
 8004124:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800412c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	b29a      	uxth	r2, r3
 800413a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004150:	b29a      	uxth	r2, r3
 8004152:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	e017      	b.n	800418a <HAL_PCD_EP_DB_Transmit+0x546>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d113      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x546>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004170:	4413      	add	r3, r2
 8004172:	677b      	str	r3, [r7, #116]	@ 0x74
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	00da      	lsls	r2, r3, #3
 800417a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800417c:	4413      	add	r3, r2
 800417e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004182:	673b      	str	r3, [r7, #112]	@ 0x70
 8004184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004186:	2200      	movs	r2, #0
 8004188:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f007 fe38 	bl	800be06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 811a 	bne.w	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041bc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
 80041e6:	e0f6      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d121      	bne.n	8004236 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800423c:	2b01      	cmp	r3, #1
 800423e:	f040 80ca 	bne.w	80043d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800424a:	441a      	add	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004258:	441a      	add	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	429a      	cmp	r2, r3
 8004268:	d30b      	bcc.n	8004282 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	621a      	str	r2, [r3, #32]
 8004280:	e017      	b.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800428a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800428e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800429a:	e00a      	b.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d165      	bne.n	800438c <HAL_PCD_EP_DB_Transmit+0x748>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d4:	4413      	add	r3, r2
 80042d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00da      	lsls	r2, r3, #3
 80042de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80042fe:	d91d      	bls.n	800433c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004316:	3b01      	subs	r3, #1
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29a      	uxth	r2, r3
 8004320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004322:	b29b      	uxth	r3, r3
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	b29b      	uxth	r3, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004334:	b29a      	uxth	r2, r3
 8004336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	e041      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <HAL_PCD_EP_DB_Transmit+0x716>
 8004344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004352:	b29a      	uxth	r2, r3
 8004354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	e032      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_PCD_EP_DB_Transmit+0x730>
 800436e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004370:	3301      	adds	r3, #1
 8004372:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29a      	uxth	r2, r3
 800437a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437c:	b29b      	uxth	r3, r3
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	b29b      	uxth	r3, r3
 8004382:	4313      	orrs	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e019      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d115      	bne.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a2:	4413      	add	r3, r2
 80043a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	00da      	lsls	r2, r3, #3
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	4413      	add	r3, r2
 80043b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6959      	ldr	r1, [r3, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	895a      	ldrh	r2, [r3, #10]
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f005 fdc5 	bl	8009f60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f0:	82bb      	strh	r3, [r7, #20]
 80043f2:	8abb      	ldrh	r3, [r7, #20]
 80043f4:	f083 0310 	eor.w	r3, r3, #16
 80043f8:	82bb      	strh	r3, [r7, #20]
 80043fa:	8abb      	ldrh	r3, [r7, #20]
 80043fc:	f083 0320 	eor.w	r3, r3, #32
 8004400:	82bb      	strh	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	8abb      	ldrh	r3, [r7, #20]
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800441a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3790      	adds	r7, #144	@ 0x90
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	4613      	mov	r3, r2
 8004440:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	f003 0207 	and.w	r2, r3, #7
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	3310      	adds	r3, #16
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e009      	b.n	800447a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004466:	897a      	ldrh	r2, [r7, #10]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2200      	movs	r2, #0
 8004484:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	b29a      	uxth	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	80da      	strh	r2, [r3, #6]
 800448e:	e00b      	b.n	80044a8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2201      	movs	r2, #1
 8004494:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	b29a      	uxth	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d141      	bne.n	800459e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800451a:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004526:	d131      	bne.n	800458c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004528:	4b47      	ldr	r3, [pc, #284]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800452e:	4a46      	ldr	r2, [pc, #280]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004538:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004540:	4a41      	ldr	r2, [pc, #260]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004548:	4b40      	ldr	r3, [pc, #256]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2232      	movs	r2, #50	@ 0x32
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	4a3f      	ldr	r2, [pc, #252]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	0c9b      	lsrs	r3, r3, #18
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800455e:	e002      	b.n	8004566 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3b01      	subs	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004566:	4b38      	ldr	r3, [pc, #224]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004572:	d102      	bne.n	800457a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f2      	bne.n	8004560 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800457a:	4b33      	ldr	r3, [pc, #204]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004586:	d158      	bne.n	800463a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e057      	b.n	800463c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800458c:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004592:	4a2d      	ldr	r2, [pc, #180]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800459c:	e04d      	b.n	800463a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a4:	d141      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a6:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b2:	d131      	bne.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b4:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ba:	4a23      	ldr	r2, [pc, #140]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045c4:	4b20      	ldr	r3, [pc, #128]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2232      	movs	r2, #50	@ 0x32
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	4a1c      	ldr	r2, [pc, #112]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	0c9b      	lsrs	r3, r3, #18
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ea:	e002      	b.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f2:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fe:	d102      	bne.n	8004606 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f2      	bne.n	80045ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d112      	bne.n	800463a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e011      	b.n	800463c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	4a0a      	ldr	r2, [pc, #40]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004628:	e007      	b.n	800463a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004632:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004638:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40007000 	.word	0x40007000
 800464c:	20000040 	.word	0x20000040
 8004650:	431bde83 	.word	0x431bde83

08004654 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800465e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004662:	6093      	str	r3, [r2, #8]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40007000 	.word	0x40007000

08004674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e2fe      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d075      	beq.n	800477e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004692:	4b97      	ldr	r3, [pc, #604]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800469c:	4b94      	ldr	r3, [pc, #592]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3e>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d002      	beq.n	80046b8 <HAL_RCC_OscConfig+0x44>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05b      	beq.n	800477c <HAL_RCC_OscConfig+0x108>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d157      	bne.n	800477c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e2d9      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCC_OscConfig+0x74>
 80046da:	4b85      	ldr	r3, [pc, #532]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a84      	ldr	r2, [pc, #528]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e01d      	b.n	8004724 <HAL_RCC_OscConfig+0xb0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0x98>
 80046f2:	4b7f      	ldr	r3, [pc, #508]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7e      	ldr	r2, [pc, #504]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80046f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b7c      	ldr	r3, [pc, #496]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a7b      	ldr	r2, [pc, #492]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e00b      	b.n	8004724 <HAL_RCC_OscConfig+0xb0>
 800470c:	4b78      	ldr	r3, [pc, #480]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a77      	ldr	r2, [pc, #476]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b75      	ldr	r3, [pc, #468]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a74      	ldr	r2, [pc, #464]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800471e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd ff1c 	bl	8002568 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd ff18 	bl	8002568 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	@ 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e29e      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0xc0>
 8004752:	e014      	b.n	800477e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd ff08 	bl	8002568 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fd ff04 	bl	8002568 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	@ 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e28a      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	4b60      	ldr	r3, [pc, #384]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0xe8>
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d075      	beq.n	8004876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478a:	4b59      	ldr	r3, [pc, #356]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004794:	4b56      	ldr	r3, [pc, #344]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d102      	bne.n	80047aa <HAL_RCC_OscConfig+0x136>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_OscConfig+0x13c>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11f      	bne.n	80047f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b0:	4b4f      	ldr	r3, [pc, #316]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_OscConfig+0x154>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e25d      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b49      	ldr	r3, [pc, #292]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	4946      	ldr	r1, [pc, #280]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047dc:	4b45      	ldr	r3, [pc, #276]	@ (80048f4 <HAL_RCC_OscConfig+0x280>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd fe75 	bl	80024d0 <HAL_InitTick>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d043      	beq.n	8004874 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e249      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d023      	beq.n	8004840 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f8:	4b3d      	ldr	r3, [pc, #244]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3c      	ldr	r2, [pc, #240]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd feb0 	bl	8002568 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480c:	f7fd feac 	bl	8002568 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e232      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481e:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b31      	ldr	r3, [pc, #196]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	492d      	ldr	r1, [pc, #180]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
 800483e:	e01a      	b.n	8004876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004840:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fe8c 	bl	8002568 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fd fe88 	bl	8002568 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e20e      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1e0>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d041      	beq.n	8004906 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488a:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fd fe65 	bl	8002568 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a2:	f7fd fe61 	bl	8002568 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1e7      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b4:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ef      	beq.n	80048a2 <HAL_RCC_OscConfig+0x22e>
 80048c2:	e020      	b.n	8004906 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ca:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fd fe48 	bl	8002568 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048da:	e00d      	b.n	80048f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fd fe44 	bl	8002568 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d906      	bls.n	80048f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1ca      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f8:	4b8c      	ldr	r3, [pc, #560]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ea      	bne.n	80048dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a6 	beq.w	8004a60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004918:	4b84      	ldr	r3, [pc, #528]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 800491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x2b4>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x2b6>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	4a7e      	ldr	r2, [pc, #504]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004938:	6593      	str	r3, [r2, #88]	@ 0x58
 800493a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004946:	2301      	movs	r3, #1
 8004948:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494a:	4b79      	ldr	r3, [pc, #484]	@ (8004b30 <HAL_RCC_OscConfig+0x4bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d118      	bne.n	8004988 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004956:	4b76      	ldr	r3, [pc, #472]	@ (8004b30 <HAL_RCC_OscConfig+0x4bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a75      	ldr	r2, [pc, #468]	@ (8004b30 <HAL_RCC_OscConfig+0x4bc>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004962:	f7fd fe01 	bl	8002568 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496a:	f7fd fdfd 	bl	8002568 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e183      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b30 <HAL_RCC_OscConfig+0x4bc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0x32e>
 8004990:	4b66      	ldr	r3, [pc, #408]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	4a65      	ldr	r2, [pc, #404]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a0:	e024      	b.n	80049ec <HAL_RCC_OscConfig+0x378>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d110      	bne.n	80049cc <HAL_RCC_OscConfig+0x358>
 80049aa:	4b60      	ldr	r3, [pc, #384]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ba:	4b5c      	ldr	r3, [pc, #368]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ca:	e00f      	b.n	80049ec <HAL_RCC_OscConfig+0x378>
 80049cc:	4b57      	ldr	r3, [pc, #348]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	4a56      	ldr	r2, [pc, #344]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049dc:	4b53      	ldr	r3, [pc, #332]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	4a52      	ldr	r2, [pc, #328]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d016      	beq.n	8004a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fd fdb8 	bl	8002568 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fd fdb4 	bl	8002568 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e138      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a12:	4b46      	ldr	r3, [pc, #280]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ed      	beq.n	80049fc <HAL_RCC_OscConfig+0x388>
 8004a20:	e015      	b.n	8004a4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd fda1 	bl	8002568 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fd9d 	bl	8002568 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e121      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a40:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ed      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	4a34      	ldr	r2, [pc, #208]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01c      	beq.n	8004aae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a74:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd fd70 	bl	8002568 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8c:	f7fd fd6c 	bl	8002568 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0f2      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9e:	4b23      	ldr	r3, [pc, #140]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ef      	beq.n	8004a8c <HAL_RCC_OscConfig+0x418>
 8004aac:	e01b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aae:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fd fd53 	bl	8002568 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac6:	f7fd fd4f 	bl	8002568 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0d5      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad8:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80c9 	beq.w	8004c82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f000 8083 	beq.w	8004c04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d15e      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fd29 	bl	8002568 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	e00c      	b.n	8004b34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd fd25 	bl	8002568 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d905      	bls.n	8004b34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0ab      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b34:	4b55      	ldr	r3, [pc, #340]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ec      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b40:	4b52      	ldr	r3, [pc, #328]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	4b52      	ldr	r3, [pc, #328]	@ (8004c90 <HAL_RCC_OscConfig+0x61c>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6a11      	ldr	r1, [r2, #32]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b50:	3a01      	subs	r2, #1
 8004b52:	0112      	lsls	r2, r2, #4
 8004b54:	4311      	orrs	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b5a:	0212      	lsls	r2, r2, #8
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b62:	0852      	lsrs	r2, r2, #1
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0552      	lsls	r2, r2, #21
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b6e:	0852      	lsrs	r2, r2, #1
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0652      	lsls	r2, r2, #25
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b7a:	06d2      	lsls	r2, r2, #27
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	4943      	ldr	r1, [pc, #268]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b84:	4b41      	ldr	r3, [pc, #260]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a40      	ldr	r2, [pc, #256]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b90:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a3d      	ldr	r2, [pc, #244]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fce4 	bl	8002568 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd fce0 	bl	8002568 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e066      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	4b35      	ldr	r3, [pc, #212]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x530>
 8004bc2:	e05e      	b.n	8004c82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b31      	ldr	r3, [pc, #196]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd fcca 	bl	8002568 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd fcc6 	bl	8002568 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e04c      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bea:	4b28      	ldr	r3, [pc, #160]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bf6:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	4924      	ldr	r1, [pc, #144]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bfc:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <HAL_RCC_OscConfig+0x620>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]
 8004c02:	e03e      	b.n	8004c82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e039      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d12c      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d123      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d11b      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d113      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	3b01      	subs	r3, #1
 8004c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	019f800c 	.word	0x019f800c
 8004c94:	feeefffc 	.word	0xfeeefffc

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e11e      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b91      	ldr	r3, [pc, #580]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d910      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	498c      	ldr	r1, [pc, #560]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e106      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d073      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d129      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf4:	4b81      	ldr	r3, [pc, #516]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0f4      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d04:	f000 f99e 	bl	8005044 <RCC_GetSysClockFreqFromPLLSource>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f00 <HAL_RCC_ClockConfig+0x268>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d93f      	bls.n	8004d92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d12:	4b7a      	ldr	r3, [pc, #488]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d033      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d12f      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d32:	4b72      	ldr	r3, [pc, #456]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d3a:	4a70      	ldr	r2, [pc, #448]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e024      	b.n	8004d92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d50:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0c6      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d60:	4b66      	ldr	r3, [pc, #408]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0be      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d70:	f000 f8ce 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4a61      	ldr	r2, [pc, #388]	@ (8004f00 <HAL_RCC_ClockConfig+0x268>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d909      	bls.n	8004d92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d86:	4a5d      	ldr	r2, [pc, #372]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b5a      	ldr	r3, [pc, #360]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4957      	ldr	r1, [pc, #348]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fd fbe0 	bl	8002568 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fd fbdc 	bl	8002568 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e095      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b43      	ldr	r3, [pc, #268]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a42      	ldr	r2, [pc, #264]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004df6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e04:	4b3d      	ldr	r3, [pc, #244]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b39      	ldr	r3, [pc, #228]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4936      	ldr	r1, [pc, #216]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b80      	cmp	r3, #128	@ 0x80
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e2e:	4b33      	ldr	r3, [pc, #204]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d21d      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 020f 	bic.w	r2, r3, #15
 8004e50:	4929      	ldr	r1, [pc, #164]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e58:	f7fd fb86 	bl	8002568 <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e60:	f7fd fb82 	bl	8002568 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e03b      	b.n	8004eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <HAL_RCC_ClockConfig+0x260>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d1ed      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e90:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4917      	ldr	r1, [pc, #92]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eae:	4b13      	ldr	r3, [pc, #76]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	490f      	ldr	r1, [pc, #60]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ec2:	f000 f825 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <HAL_RCC_ClockConfig+0x264>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	490c      	ldr	r1, [pc, #48]	@ (8004f04 <HAL_RCC_ClockConfig+0x26c>)
 8004ed4:	5ccb      	ldrb	r3, [r1, r3]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	4a0a      	ldr	r2, [pc, #40]	@ (8004f08 <HAL_RCC_ClockConfig+0x270>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_ClockConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd faf2 	bl	80024d0 <HAL_InitTick>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40022000 	.word	0x40022000
 8004efc:	40021000 	.word	0x40021000
 8004f00:	04c4b400 	.word	0x04c4b400
 8004f04:	0800d4e8 	.word	0x0800d4e8
 8004f08:	20000040 	.word	0x20000040
 8004f0c:	20000044 	.word	0x20000044

08004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f16:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d102      	bne.n	8004f28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f22:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e047      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f28:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d102      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f34:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e03e      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f3a:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d136      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f46:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d10c      	bne.n	8004f7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f64:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6e:	68d2      	ldr	r2, [r2, #12]
 8004f70:	0a12      	lsrs	r2, r2, #8
 8004f72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
      break;
 8004f7c:	e00c      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f7e:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	4a10      	ldr	r2, [pc, #64]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	0a12      	lsrs	r2, r2, #8
 8004f8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
      break;
 8004f96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f98:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	0e5b      	lsrs	r3, r3, #25
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	e001      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fb8:	693b      	ldr	r3, [r7, #16]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	00f42400 	.word	0x00f42400
 8004fd0:	007a1200 	.word	0x007a1200

08004fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000040 	.word	0x20000040

08004fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ff0:	f7ff fff0 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4904      	ldr	r1, [pc, #16]	@ (8005014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	0800d4f8 	.word	0x0800d4f8

08005018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800501c:	f7ff ffda 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0adb      	lsrs	r3, r3, #11
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4904      	ldr	r1, [pc, #16]	@ (8005040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0800d4f8 	.word	0x0800d4f8

08005044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800504a:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005054:	4b1b      	ldr	r3, [pc, #108]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d10c      	bne.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005068:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005072:	68d2      	ldr	r2, [r2, #12]
 8005074:	0a12      	lsrs	r2, r2, #8
 8005076:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	617b      	str	r3, [r7, #20]
    break;
 8005080:	e00c      	b.n	800509c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005082:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	4a0e      	ldr	r2, [pc, #56]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	0a12      	lsrs	r2, r2, #8
 8005090:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005094:	fb02 f303 	mul.w	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
    break;
 800509a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800509c:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	0e5b      	lsrs	r3, r3, #25
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	3301      	adds	r3, #1
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050b6:	687b      	ldr	r3, [r7, #4]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40021000 	.word	0x40021000
 80050c8:	007a1200 	.word	0x007a1200
 80050cc:	00f42400 	.word	0x00f42400

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d8:	2300      	movs	r3, #0
 80050da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050dc:	2300      	movs	r3, #0
 80050de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8098 	beq.w	800521e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b43      	ldr	r3, [pc, #268]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b40      	ldr	r3, [pc, #256]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	4a3f      	ldr	r2, [pc, #252]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6593      	str	r3, [r2, #88]	@ 0x58
 800510a:	4b3d      	ldr	r3, [pc, #244]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511a:	4b3a      	ldr	r3, [pc, #232]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a39      	ldr	r2, [pc, #228]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005126:	f7fd fa1f 	bl	8002568 <HAL_GetTick>
 800512a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800512c:	e009      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fd fa1b 	bl	8002568 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d902      	bls.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	74fb      	strb	r3, [r7, #19]
        break;
 8005140:	e005      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005142:	4b30      	ldr	r3, [pc, #192]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0ef      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d159      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005154:	4b2a      	ldr	r3, [pc, #168]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01e      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	429a      	cmp	r2, r3
 800516e:	d019      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005170:	4b23      	ldr	r3, [pc, #140]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800517c:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800518c:	4b1c      	ldr	r3, [pc, #112]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005192:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800519c:	4a18      	ldr	r2, [pc, #96]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd f9db 	bl	8002568 <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b4:	e00b      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f7fd f9d7 	bl	8002568 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d902      	bls.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	74fb      	strb	r3, [r7, #19]
            break;
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ec      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	4903      	ldr	r1, [pc, #12]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051f8:	e008      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	74bb      	strb	r3, [r7, #18]
 80051fe:	e005      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005200:	40021000 	.word	0x40021000
 8005204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800520c:	7c7b      	ldrb	r3, [r7, #17]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d105      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005212:	4ba6      	ldr	r3, [pc, #664]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005216:	4aa5      	ldr	r2, [pc, #660]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800522a:	4ba0      	ldr	r3, [pc, #640]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f023 0203 	bic.w	r2, r3, #3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	499c      	ldr	r1, [pc, #624]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800524c:	4b97      	ldr	r3, [pc, #604]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f023 020c 	bic.w	r2, r3, #12
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4994      	ldr	r1, [pc, #592]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800526e:	4b8f      	ldr	r3, [pc, #572]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	498b      	ldr	r1, [pc, #556]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005290:	4b86      	ldr	r3, [pc, #536]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	4983      	ldr	r1, [pc, #524]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b2:	4b7e      	ldr	r3, [pc, #504]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	497a      	ldr	r1, [pc, #488]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052d4:	4b75      	ldr	r3, [pc, #468]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	4972      	ldr	r1, [pc, #456]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f6:	4b6d      	ldr	r3, [pc, #436]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	4969      	ldr	r1, [pc, #420]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005318:	4b64      	ldr	r3, [pc, #400]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4961      	ldr	r1, [pc, #388]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005340:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	4958      	ldr	r1, [pc, #352]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	4950      	ldr	r1, [pc, #320]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537a:	d105      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537c:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a4a      	ldr	r2, [pc, #296]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005386:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005394:	4b45      	ldr	r3, [pc, #276]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4942      	ldr	r1, [pc, #264]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b2:	d105      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b4:	4b3d      	ldr	r3, [pc, #244]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a3c      	ldr	r2, [pc, #240]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053cc:	4b37      	ldr	r3, [pc, #220]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	4934      	ldr	r1, [pc, #208]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053ea:	d105      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ec:	4b2f      	ldr	r3, [pc, #188]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a2e      	ldr	r2, [pc, #184]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d015      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005404:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	4926      	ldr	r1, [pc, #152]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005422:	d105      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005424:	4b21      	ldr	r3, [pc, #132]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4a20      	ldr	r2, [pc, #128]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800542e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800543c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	4918      	ldr	r1, [pc, #96]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800545a:	d105      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800545c:	4b13      	ldr	r3, [pc, #76]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a12      	ldr	r2, [pc, #72]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005466:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005474:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	490a      	ldr	r1, [pc, #40]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005492:	d105      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e049      	b.n	8005556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fdba 	bl	8002050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 fe2c 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d001      	beq.n	8005578 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e042      	b.n	80055fe <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a21      	ldr	r2, [pc, #132]	@ (800560c <HAL_TIM_Base_Start+0xac>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_TIM_Base_Start+0x5c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d013      	beq.n	80055bc <HAL_TIM_Base_Start+0x5c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <HAL_TIM_Base_Start+0xb0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_Base_Start+0x5c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_TIM_Base_Start+0xb4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_Base_Start+0x5c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005618 <HAL_TIM_Base_Start+0xb8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_Base_Start+0x5c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a19      	ldr	r2, [pc, #100]	@ (800561c <HAL_TIM_Base_Start+0xbc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d115      	bne.n	80055e8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <HAL_TIM_Base_Start+0xc0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d015      	beq.n	80055fa <HAL_TIM_Base_Start+0x9a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d011      	beq.n	80055fa <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e008      	b.n	80055fa <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e000      	b.n	80055fc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	00010007 	.word	0x00010007

08005624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d001      	beq.n	800563c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e04a      	b.n	80056d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x6c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005666:	d013      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x6c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	@ (80056e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x6c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <HAL_TIM_Base_Start_IT+0xc8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x6c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a19      	ldr	r2, [pc, #100]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d115      	bne.n	80056bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d015      	beq.n	80056ce <HAL_TIM_Base_Start_IT+0xaa>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a8:	d011      	beq.n	80056ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ba:	e008      	b.n	80056ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e000      	b.n	80056d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40013400 	.word	0x40013400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e049      	b.n	800579e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f841 	bl	80057a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fd08 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_TIM_PWM_Start+0x24>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e03c      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d109      	bne.n	80057fa <HAL_TIM_PWM_Start+0x3e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	bf14      	ite	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	2300      	moveq	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e02f      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d109      	bne.n	8005814 <HAL_TIM_PWM_Start+0x58>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e022      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d109      	bne.n	800582e <HAL_TIM_PWM_Start+0x72>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e015      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b10      	cmp	r3, #16
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x8c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e008      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e097      	b.n	8005992 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0xb6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005870:	e023      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xc6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005880:	e01b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005890:	e013      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start+0xe6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xf6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b0:	e003      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 f934 	bl	8006b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a33      	ldr	r2, [pc, #204]	@ (800599c <HAL_TIM_PWM_Start+0x1e0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <HAL_TIM_PWM_Start+0x1e4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a30      	ldr	r2, [pc, #192]	@ (80059a4 <HAL_TIM_PWM_Start+0x1e8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	@ (80059a8 <HAL_TIM_PWM_Start+0x1ec>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2d      	ldr	r2, [pc, #180]	@ (80059ac <HAL_TIM_PWM_Start+0x1f0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_PWM_Start+0x142>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_TIM_PWM_Start+0x144>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a20      	ldr	r2, [pc, #128]	@ (800599c <HAL_TIM_PWM_Start+0x1e0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_TIM_PWM_Start+0x194>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d013      	beq.n	8005950 <HAL_TIM_PWM_Start+0x194>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <HAL_TIM_PWM_Start+0x1f4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_TIM_PWM_Start+0x194>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <HAL_TIM_PWM_Start+0x1f8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_TIM_PWM_Start+0x194>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <HAL_TIM_PWM_Start+0x1e4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIM_PWM_Start+0x194>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <HAL_TIM_PWM_Start+0x1e8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d115      	bne.n	800597c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4b18      	ldr	r3, [pc, #96]	@ (80059b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d015      	beq.n	800598e <HAL_TIM_PWM_Start+0x1d2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005968:	d011      	beq.n	800598e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	e008      	b.n	800598e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e000      	b.n	8005990 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	00010007 	.word	0x00010007

080059bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d020      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0202 	mvn.w	r2, #2
 80059f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fb82 	bl	8006110 <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb74 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb85 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01b      	beq.n	8005a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0204 	mvn.w	r2, #4
 8005a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fb5c 	bl	8006110 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fb4e 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb5f 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d020      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01b      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0208 	mvn.w	r2, #8
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fb36 	bl	8006110 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb28 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb39 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d020      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01b      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0210 	mvn.w	r2, #16
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fb10 	bl	8006110 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb02 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb13 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0201 	mvn.w	r2, #1
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb ff5e 	bl	80019e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f89f 	bl	8006c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00c      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 f897 	bl	8006ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00c      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 facd 	bl	8006138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00c      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0220 	mvn.w	r2, #32
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 f85f 	bl	8006c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f86b 	bl	8006cbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f863 	bl	8006cd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f85b 	bl	8006ce4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f853 	bl	8006cf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e0ff      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b14      	cmp	r3, #20
 8005c86:	f200 80f0 	bhi.w	8005e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005e6b 	.word	0x08005e6b
 8005c98:	08005e6b 	.word	0x08005e6b
 8005c9c:	08005e6b 	.word	0x08005e6b
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005e6b 	.word	0x08005e6b
 8005ca8:	08005e6b 	.word	0x08005e6b
 8005cac:	08005e6b 	.word	0x08005e6b
 8005cb0:	08005d67 	.word	0x08005d67
 8005cb4:	08005e6b 	.word	0x08005e6b
 8005cb8:	08005e6b 	.word	0x08005e6b
 8005cbc:	08005e6b 	.word	0x08005e6b
 8005cc0:	08005da7 	.word	0x08005da7
 8005cc4:	08005e6b 	.word	0x08005e6b
 8005cc8:	08005e6b 	.word	0x08005e6b
 8005ccc:	08005e6b 	.word	0x08005e6b
 8005cd0:	08005de9 	.word	0x08005de9
 8005cd4:	08005e6b 	.word	0x08005e6b
 8005cd8:	08005e6b 	.word	0x08005e6b
 8005cdc:	08005e6b 	.word	0x08005e6b
 8005ce0:	08005e29 	.word	0x08005e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 faca 	bl	8006284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e0a5      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fb3a 	bl	80063a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]
      break;
 8005d64:	e084      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fba3 	bl	80064b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0208 	orr.w	r2, r2, #8
 8005d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69d9      	ldr	r1, [r3, #28]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	61da      	str	r2, [r3, #28]
      break;
 8005da4:	e064      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fc0b 	bl	80065c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	61da      	str	r2, [r3, #28]
      break;
 8005de6:	e043      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fc74 	bl	80066dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0204 	bic.w	r2, r2, #4
 8005e12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e26:	e023      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fcb8 	bl	80067a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e68:	e002      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop

08005e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0de      	b.n	800605e <HAL_TIM_ConfigClockSource+0x1da>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a63      	ldr	r2, [pc, #396]	@ (8006068 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	f000 80a9 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ee0:	4a61      	ldr	r2, [pc, #388]	@ (8006068 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	f200 80ae 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ee8:	4a60      	ldr	r2, [pc, #384]	@ (800606c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f000 80a1 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800606c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f200 80a6 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8006070 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f000 8099 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f00:	4a5b      	ldr	r2, [pc, #364]	@ (8006070 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f200 809e 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f08:	4a5a      	ldr	r2, [pc, #360]	@ (8006074 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f000 8091 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f10:	4a58      	ldr	r2, [pc, #352]	@ (8006074 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f200 8096 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f1c:	f000 8089 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f24:	f200 808e 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d03e      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x128>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f32:	f200 8087 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3a:	f000 8086 	beq.w	800604a <HAL_TIM_ConfigClockSource+0x1c6>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f42:	d87f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f44:	2b70      	cmp	r3, #112	@ 0x70
 8005f46:	d01a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xfa>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d87b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f4c:	2b60      	cmp	r3, #96	@ 0x60
 8005f4e:	d050      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0x16e>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d877      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f54:	2b50      	cmp	r3, #80	@ 0x50
 8005f56:	d03c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x14e>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d873      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	d058      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x18e>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d86f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f64:	2b30      	cmp	r3, #48	@ 0x30
 8005f66:	d064      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d86b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d060      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d867      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d05a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f7c:	e062      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8e:	f000 fdaf 	bl	8006af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e04f      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbc:	f000 fd98 	bl	8006af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fce:	609a      	str	r2, [r3, #8]
      break;
 8005fd0:	e03c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f000 fd0a 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2150      	movs	r1, #80	@ 0x50
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fd63 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8005ff0:	e02c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	461a      	mov	r2, r3
 8006000:	f000 fd29 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2160      	movs	r1, #96	@ 0x60
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fd53 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006010:	e01c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fcea 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2140      	movs	r1, #64	@ 0x40
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fd43 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006030:	e00c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 fd3a 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006042:	e003      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e000      	b.n	800604c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800604a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	00100070 	.word	0x00100070
 800606c:	00100040 	.word	0x00100040
 8006070:	00100030 	.word	0x00100030
 8006074:	00100020 	.word	0x00100020

08006078 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIM_SlaveConfigSynchro+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e031      	b.n	80060f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fbe4 	bl	8006870 <TIM_SlaveTimer_SetConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e018      	b.n	80060f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a42      	ldr	r2, [pc, #264]	@ (8006268 <TIM_Base_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00f      	beq.n	8006184 <TIM_Base_SetConfig+0x38>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d00b      	beq.n	8006184 <TIM_Base_SetConfig+0x38>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3f      	ldr	r2, [pc, #252]	@ (800626c <TIM_Base_SetConfig+0x120>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_Base_SetConfig+0x38>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3e      	ldr	r2, [pc, #248]	@ (8006270 <TIM_Base_SetConfig+0x124>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0x38>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3d      	ldr	r2, [pc, #244]	@ (8006274 <TIM_Base_SetConfig+0x128>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a33      	ldr	r2, [pc, #204]	@ (8006268 <TIM_Base_SetConfig+0x11c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01b      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a4:	d017      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a30      	ldr	r2, [pc, #192]	@ (800626c <TIM_Base_SetConfig+0x120>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006270 <TIM_Base_SetConfig+0x124>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00f      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006274 <TIM_Base_SetConfig+0x128>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00b      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006278 <TIM_Base_SetConfig+0x12c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2c      	ldr	r2, [pc, #176]	@ (800627c <TIM_Base_SetConfig+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_Base_SetConfig+0x8a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006280 <TIM_Base_SetConfig+0x134>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d108      	bne.n	80061e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a16      	ldr	r2, [pc, #88]	@ (8006268 <TIM_Base_SetConfig+0x11c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00f      	beq.n	8006234 <TIM_Base_SetConfig+0xe8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <TIM_Base_SetConfig+0x128>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00b      	beq.n	8006234 <TIM_Base_SetConfig+0xe8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <TIM_Base_SetConfig+0x12c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_Base_SetConfig+0xe8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a15      	ldr	r2, [pc, #84]	@ (800627c <TIM_Base_SetConfig+0x130>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0xe8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a14      	ldr	r2, [pc, #80]	@ (8006280 <TIM_Base_SetConfig+0x134>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d103      	bne.n	800623c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]
  }
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40013400 	.word	0x40013400
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f023 0201 	bic.w	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 0302 	bic.w	r3, r3, #2
 80062d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2c      	ldr	r2, [pc, #176]	@ (8006390 <TIM_OC1_SetConfig+0x10c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00f      	beq.n	8006304 <TIM_OC1_SetConfig+0x80>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006394 <TIM_OC1_SetConfig+0x110>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_OC1_SetConfig+0x80>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006398 <TIM_OC1_SetConfig+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_OC1_SetConfig+0x80>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a29      	ldr	r2, [pc, #164]	@ (800639c <TIM_OC1_SetConfig+0x118>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC1_SetConfig+0x80>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a28      	ldr	r2, [pc, #160]	@ (80063a0 <TIM_OC1_SetConfig+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d10c      	bne.n	800631e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0308 	bic.w	r3, r3, #8
 800630a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0304 	bic.w	r3, r3, #4
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1b      	ldr	r2, [pc, #108]	@ (8006390 <TIM_OC1_SetConfig+0x10c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <TIM_OC1_SetConfig+0xc2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <TIM_OC1_SetConfig+0x110>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <TIM_OC1_SetConfig+0xc2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a19      	ldr	r2, [pc, #100]	@ (8006398 <TIM_OC1_SetConfig+0x114>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <TIM_OC1_SetConfig+0xc2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a18      	ldr	r2, [pc, #96]	@ (800639c <TIM_OC1_SetConfig+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC1_SetConfig+0xc2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <TIM_OC1_SetConfig+0x11c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d111      	bne.n	800636a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400
 80063a0:	40014800 	.word	0x40014800

080063a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f023 0210 	bic.w	r2, r3, #16
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a28      	ldr	r2, [pc, #160]	@ (80064a4 <TIM_OC2_SetConfig+0x100>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0x6c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a27      	ldr	r2, [pc, #156]	@ (80064a8 <TIM_OC2_SetConfig+0x104>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10d      	bne.n	800642c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a1d      	ldr	r2, [pc, #116]	@ (80064a4 <TIM_OC2_SetConfig+0x100>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00f      	beq.n	8006454 <TIM_OC2_SetConfig+0xb0>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a1c      	ldr	r2, [pc, #112]	@ (80064a8 <TIM_OC2_SetConfig+0x104>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_OC2_SetConfig+0xb0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <TIM_OC2_SetConfig+0x108>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_OC2_SetConfig+0xb0>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a1a      	ldr	r2, [pc, #104]	@ (80064b0 <TIM_OC2_SetConfig+0x10c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC2_SetConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <TIM_OC2_SetConfig+0x110>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d113      	bne.n	800647c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800645a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a27      	ldr	r2, [pc, #156]	@ (80065b4 <TIM_OC3_SetConfig+0xfc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC3_SetConfig+0x6a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a26      	ldr	r2, [pc, #152]	@ (80065b8 <TIM_OC3_SetConfig+0x100>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d10d      	bne.n	800653e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800653c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <TIM_OC3_SetConfig+0xfc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_OC3_SetConfig+0xae>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1b      	ldr	r2, [pc, #108]	@ (80065b8 <TIM_OC3_SetConfig+0x100>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_OC3_SetConfig+0xae>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1a      	ldr	r2, [pc, #104]	@ (80065bc <TIM_OC3_SetConfig+0x104>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_OC3_SetConfig+0xae>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a19      	ldr	r2, [pc, #100]	@ (80065c0 <TIM_OC3_SetConfig+0x108>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC3_SetConfig+0xae>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <TIM_OC3_SetConfig+0x10c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d113      	bne.n	800658e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	031b      	lsls	r3, r3, #12
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a28      	ldr	r2, [pc, #160]	@ (80066c8 <TIM_OC4_SetConfig+0x100>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_OC4_SetConfig+0x6c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a27      	ldr	r2, [pc, #156]	@ (80066cc <TIM_OC4_SetConfig+0x104>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10d      	bne.n	8006650 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800664e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a1d      	ldr	r2, [pc, #116]	@ (80066c8 <TIM_OC4_SetConfig+0x100>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <TIM_OC4_SetConfig+0xb0>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a1c      	ldr	r2, [pc, #112]	@ (80066cc <TIM_OC4_SetConfig+0x104>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_OC4_SetConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1b      	ldr	r2, [pc, #108]	@ (80066d0 <TIM_OC4_SetConfig+0x108>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_OC4_SetConfig+0xb0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1a      	ldr	r2, [pc, #104]	@ (80066d4 <TIM_OC4_SetConfig+0x10c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC4_SetConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <TIM_OC4_SetConfig+0x110>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d113      	bne.n	80066a0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800667e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006686:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	019b      	lsls	r3, r3, #6
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	019b      	lsls	r3, r3, #6
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40013400 	.word	0x40013400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800

080066dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a17      	ldr	r2, [pc, #92]	@ (8006790 <TIM_OC5_SetConfig+0xb4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_OC5_SetConfig+0x7a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <TIM_OC5_SetConfig+0xb8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_OC5_SetConfig+0x7a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <TIM_OC5_SetConfig+0xbc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_OC5_SetConfig+0x7a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <TIM_OC5_SetConfig+0xc0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_OC5_SetConfig+0x7a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <TIM_OC5_SetConfig+0xc4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d109      	bne.n	800676a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	051b      	lsls	r3, r3, #20
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a18      	ldr	r2, [pc, #96]	@ (800685c <TIM_OC6_SetConfig+0xb8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00f      	beq.n	8006820 <TIM_OC6_SetConfig+0x7c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <TIM_OC6_SetConfig+0xbc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_OC6_SetConfig+0x7c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a16      	ldr	r2, [pc, #88]	@ (8006864 <TIM_OC6_SetConfig+0xc0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_OC6_SetConfig+0x7c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <TIM_OC6_SetConfig+0xc4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC6_SetConfig+0x7c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a14      	ldr	r2, [pc, #80]	@ (800686c <TIM_OC6_SetConfig+0xc8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d109      	bne.n	8006834 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800

08006870 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800688c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006890:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	4a4a      	ldr	r2, [pc, #296]	@ (80069e8 <TIM_SlaveTimer_SetConfig+0x178>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	f000 808a 	beq.w	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 80068c6:	4a48      	ldr	r2, [pc, #288]	@ (80069e8 <TIM_SlaveTimer_SetConfig+0x178>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	f200 8083 	bhi.w	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 80068ce:	4a47      	ldr	r2, [pc, #284]	@ (80069ec <TIM_SlaveTimer_SetConfig+0x17c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	f000 8082 	beq.w	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 80068d6:	4a45      	ldr	r2, [pc, #276]	@ (80069ec <TIM_SlaveTimer_SetConfig+0x17c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d87b      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 80068dc:	4a44      	ldr	r2, [pc, #272]	@ (80069f0 <TIM_SlaveTimer_SetConfig+0x180>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d07b      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 80068e2:	4a43      	ldr	r2, [pc, #268]	@ (80069f0 <TIM_SlaveTimer_SetConfig+0x180>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d875      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 80068e8:	4a42      	ldr	r2, [pc, #264]	@ (80069f4 <TIM_SlaveTimer_SetConfig+0x184>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d075      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 80068ee:	4a41      	ldr	r2, [pc, #260]	@ (80069f4 <TIM_SlaveTimer_SetConfig+0x184>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d86f      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 80068f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068f8:	d06f      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 80068fa:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068fe:	d869      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006900:	2b70      	cmp	r3, #112	@ 0x70
 8006902:	d01a      	beq.n	800693a <TIM_SlaveTimer_SetConfig+0xca>
 8006904:	2b70      	cmp	r3, #112	@ 0x70
 8006906:	d865      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006908:	2b60      	cmp	r3, #96	@ 0x60
 800690a:	d059      	beq.n	80069c0 <TIM_SlaveTimer_SetConfig+0x150>
 800690c:	2b60      	cmp	r3, #96	@ 0x60
 800690e:	d861      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006910:	2b50      	cmp	r3, #80	@ 0x50
 8006912:	d04b      	beq.n	80069ac <TIM_SlaveTimer_SetConfig+0x13c>
 8006914:	2b50      	cmp	r3, #80	@ 0x50
 8006916:	d85d      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006918:	2b40      	cmp	r3, #64	@ 0x40
 800691a:	d019      	beq.n	8006950 <TIM_SlaveTimer_SetConfig+0xe0>
 800691c:	2b40      	cmp	r3, #64	@ 0x40
 800691e:	d859      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006920:	2b30      	cmp	r3, #48	@ 0x30
 8006922:	d05a      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 8006924:	2b30      	cmp	r3, #48	@ 0x30
 8006926:	d855      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006928:	2b20      	cmp	r3, #32
 800692a:	d056      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 800692c:	2b20      	cmp	r3, #32
 800692e:	d851      	bhi.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d052      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 8006934:	2b10      	cmp	r3, #16
 8006936:	d050      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x16a>
 8006938:	e04c      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800694a:	f000 f8d1 	bl	8006af0 <TIM_ETR_SetConfig>
      break;
 800694e:	e045      	b.n	80069dc <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d004      	beq.n	8006962 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800695c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006960:	d101      	bne.n	8006966 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e03b      	b.n	80069de <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a1a      	ldr	r2, [r3, #32]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800698c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4313      	orrs	r3, r2
 8006998:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
      break;
 80069aa:	e017      	b.n	80069dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b8:	461a      	mov	r2, r3
 80069ba:	f000 f81d 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      break;
 80069be:	e00d      	b.n	80069dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069cc:	461a      	mov	r2, r3
 80069ce:	f000 f842 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      break;
 80069d2:	e003      	b.n	80069dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	e000      	b.n	80069dc <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 80069da:	bf00      	nop
  }

  return status;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	00100070 	.word	0x00100070
 80069ec:	00100040 	.word	0x00100040
 80069f0:	00100030 	.word	0x00100030
 80069f4:	00100020 	.word	0x00100020

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 030a 	bic.w	r3, r3, #10
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e065      	b.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d108      	bne.n	8006bda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0a:	d013      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a18      	ldr	r2, [pc, #96]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a12      	ldr	r2, [pc, #72]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d10c      	bne.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40014000 	.word	0x40014000

08006c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e042      	b.n	8006da4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fb facd 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	@ 0x24
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 faf4 	bl	8007344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f825 	bl	8006dac <UART_SetConfig>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e01b      	b.n	8006da4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb73 	bl	8007488 <UART_CheckIdleState>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db0:	b08c      	sub	sp, #48	@ 0x30
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4bab      	ldr	r3, [pc, #684]	@ (8007088 <UART_SetConfig+0x2dc>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4aa0      	ldr	r2, [pc, #640]	@ (800708c <UART_SetConfig+0x2e0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e14:	4313      	orrs	r3, r2
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	f023 010f 	bic.w	r1, r3, #15
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a91      	ldr	r2, [pc, #580]	@ (8007090 <UART_SetConfig+0x2e4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d125      	bne.n	8006e9c <UART_SetConfig+0xf0>
 8006e50:	4b90      	ldr	r3, [pc, #576]	@ (8007094 <UART_SetConfig+0x2e8>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d81a      	bhi.n	8006e94 <UART_SetConfig+0xe8>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <UART_SetConfig+0xb8>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7a:	e0d6      	b.n	800702a <UART_SetConfig+0x27e>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e82:	e0d2      	b.n	800702a <UART_SetConfig+0x27e>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8a:	e0ce      	b.n	800702a <UART_SetConfig+0x27e>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e0ca      	b.n	800702a <UART_SetConfig+0x27e>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e0c6      	b.n	800702a <UART_SetConfig+0x27e>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a7d      	ldr	r2, [pc, #500]	@ (8007098 <UART_SetConfig+0x2ec>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d138      	bne.n	8006f18 <UART_SetConfig+0x16c>
 8006ea6:	4b7b      	ldr	r3, [pc, #492]	@ (8007094 <UART_SetConfig+0x2e8>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eac:	f003 030c 	and.w	r3, r3, #12
 8006eb0:	2b0c      	cmp	r3, #12
 8006eb2:	d82d      	bhi.n	8006f10 <UART_SetConfig+0x164>
 8006eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ebc <UART_SetConfig+0x110>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ef1 	.word	0x08006ef1
 8006ec0:	08006f11 	.word	0x08006f11
 8006ec4:	08006f11 	.word	0x08006f11
 8006ec8:	08006f11 	.word	0x08006f11
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08006f11 	.word	0x08006f11
 8006ed4:	08006f11 	.word	0x08006f11
 8006ed8:	08006f11 	.word	0x08006f11
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006f11 	.word	0x08006f11
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef6:	e098      	b.n	800702a <UART_SetConfig+0x27e>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efe:	e094      	b.n	800702a <UART_SetConfig+0x27e>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f06:	e090      	b.n	800702a <UART_SetConfig+0x27e>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0e:	e08c      	b.n	800702a <UART_SetConfig+0x27e>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f16:	e088      	b.n	800702a <UART_SetConfig+0x27e>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800709c <UART_SetConfig+0x2f0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d125      	bne.n	8006f6e <UART_SetConfig+0x1c2>
 8006f22:	4b5c      	ldr	r3, [pc, #368]	@ (8007094 <UART_SetConfig+0x2e8>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f2c:	2b30      	cmp	r3, #48	@ 0x30
 8006f2e:	d016      	beq.n	8006f5e <UART_SetConfig+0x1b2>
 8006f30:	2b30      	cmp	r3, #48	@ 0x30
 8006f32:	d818      	bhi.n	8006f66 <UART_SetConfig+0x1ba>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d00a      	beq.n	8006f4e <UART_SetConfig+0x1a2>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d814      	bhi.n	8006f66 <UART_SetConfig+0x1ba>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <UART_SetConfig+0x19a>
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d008      	beq.n	8006f56 <UART_SetConfig+0x1aa>
 8006f44:	e00f      	b.n	8006f66 <UART_SetConfig+0x1ba>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4c:	e06d      	b.n	800702a <UART_SetConfig+0x27e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f54:	e069      	b.n	800702a <UART_SetConfig+0x27e>
 8006f56:	2304      	movs	r3, #4
 8006f58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5c:	e065      	b.n	800702a <UART_SetConfig+0x27e>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f64:	e061      	b.n	800702a <UART_SetConfig+0x27e>
 8006f66:	2310      	movs	r3, #16
 8006f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6c:	e05d      	b.n	800702a <UART_SetConfig+0x27e>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4b      	ldr	r2, [pc, #300]	@ (80070a0 <UART_SetConfig+0x2f4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d125      	bne.n	8006fc4 <UART_SetConfig+0x218>
 8006f78:	4b46      	ldr	r3, [pc, #280]	@ (8007094 <UART_SetConfig+0x2e8>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f84:	d016      	beq.n	8006fb4 <UART_SetConfig+0x208>
 8006f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f88:	d818      	bhi.n	8006fbc <UART_SetConfig+0x210>
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d00a      	beq.n	8006fa4 <UART_SetConfig+0x1f8>
 8006f8e:	2b80      	cmp	r3, #128	@ 0x80
 8006f90:	d814      	bhi.n	8006fbc <UART_SetConfig+0x210>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <UART_SetConfig+0x1f0>
 8006f96:	2b40      	cmp	r3, #64	@ 0x40
 8006f98:	d008      	beq.n	8006fac <UART_SetConfig+0x200>
 8006f9a:	e00f      	b.n	8006fbc <UART_SetConfig+0x210>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	e042      	b.n	800702a <UART_SetConfig+0x27e>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e03e      	b.n	800702a <UART_SetConfig+0x27e>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb2:	e03a      	b.n	800702a <UART_SetConfig+0x27e>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e036      	b.n	800702a <UART_SetConfig+0x27e>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e032      	b.n	800702a <UART_SetConfig+0x27e>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a30      	ldr	r2, [pc, #192]	@ (800708c <UART_SetConfig+0x2e0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d12a      	bne.n	8007024 <UART_SetConfig+0x278>
 8006fce:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <UART_SetConfig+0x2e8>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fdc:	d01a      	beq.n	8007014 <UART_SetConfig+0x268>
 8006fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fe2:	d81b      	bhi.n	800701c <UART_SetConfig+0x270>
 8006fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe8:	d00c      	beq.n	8007004 <UART_SetConfig+0x258>
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fee:	d815      	bhi.n	800701c <UART_SetConfig+0x270>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <UART_SetConfig+0x250>
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff8:	d008      	beq.n	800700c <UART_SetConfig+0x260>
 8006ffa:	e00f      	b.n	800701c <UART_SetConfig+0x270>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x27e>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e00e      	b.n	800702a <UART_SetConfig+0x27e>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e00a      	b.n	800702a <UART_SetConfig+0x27e>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e006      	b.n	800702a <UART_SetConfig+0x27e>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e002      	b.n	800702a <UART_SetConfig+0x27e>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a17      	ldr	r2, [pc, #92]	@ (800708c <UART_SetConfig+0x2e0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	f040 80a8 	bne.w	8007186 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800703a:	2b08      	cmp	r3, #8
 800703c:	d834      	bhi.n	80070a8 <UART_SetConfig+0x2fc>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <UART_SetConfig+0x298>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007069 	.word	0x08007069
 8007048:	080070a9 	.word	0x080070a9
 800704c:	08007071 	.word	0x08007071
 8007050:	080070a9 	.word	0x080070a9
 8007054:	08007077 	.word	0x08007077
 8007058:	080070a9 	.word	0x080070a9
 800705c:	080070a9 	.word	0x080070a9
 8007060:	080070a9 	.word	0x080070a9
 8007064:	0800707f 	.word	0x0800707f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007068:	f7fd ffc0 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 800706c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706e:	e021      	b.n	80070b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007070:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <UART_SetConfig+0x2f8>)
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007074:	e01e      	b.n	80070b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007076:	f7fd ff4b 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 800707a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800707c:	e01a      	b.n	80070b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007084:	e016      	b.n	80070b4 <UART_SetConfig+0x308>
 8007086:	bf00      	nop
 8007088:	cfff69f3 	.word	0xcfff69f3
 800708c:	40008000 	.word	0x40008000
 8007090:	40013800 	.word	0x40013800
 8007094:	40021000 	.word	0x40021000
 8007098:	40004400 	.word	0x40004400
 800709c:	40004800 	.word	0x40004800
 80070a0:	40004c00 	.word	0x40004c00
 80070a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 812a 	beq.w	8007310 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c0:	4a9e      	ldr	r2, [pc, #632]	@ (800733c <UART_SetConfig+0x590>)
 80070c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c6:	461a      	mov	r2, r3
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	4413      	add	r3, r2
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d305      	bcc.n	80070ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d903      	bls.n	80070f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070f2:	e10d      	b.n	8007310 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	2200      	movs	r2, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	60fa      	str	r2, [r7, #12]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	4a8e      	ldr	r2, [pc, #568]	@ (800733c <UART_SetConfig+0x590>)
 8007102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007106:	b29b      	uxth	r3, r3
 8007108:	2200      	movs	r2, #0
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007116:	f7f9 fd4d 	bl	8000bb4 <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	020b      	lsls	r3, r1, #8
 800712c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007130:	0202      	lsls	r2, r0, #8
 8007132:	6979      	ldr	r1, [r7, #20]
 8007134:	6849      	ldr	r1, [r1, #4]
 8007136:	0849      	lsrs	r1, r1, #1
 8007138:	2000      	movs	r0, #0
 800713a:	460c      	mov	r4, r1
 800713c:	4605      	mov	r5, r0
 800713e:	eb12 0804 	adds.w	r8, r2, r4
 8007142:	eb43 0905 	adc.w	r9, r3, r5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	469a      	mov	sl, r3
 800714e:	4693      	mov	fp, r2
 8007150:	4652      	mov	r2, sl
 8007152:	465b      	mov	r3, fp
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 fd2c 	bl	8000bb4 <__aeabi_uldivmod>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4613      	mov	r3, r2
 8007162:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716a:	d308      	bcc.n	800717e <UART_SetConfig+0x3d2>
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007172:	d204      	bcs.n	800717e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	60da      	str	r2, [r3, #12]
 800717c:	e0c8      	b.n	8007310 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007184:	e0c4      	b.n	8007310 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800718e:	d167      	bne.n	8007260 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007190:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007194:	2b08      	cmp	r3, #8
 8007196:	d828      	bhi.n	80071ea <UART_SetConfig+0x43e>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x3f4>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071eb 	.word	0x080071eb
 80071b0:	080071db 	.word	0x080071db
 80071b4:	080071eb 	.word	0x080071eb
 80071b8:	080071eb 	.word	0x080071eb
 80071bc:	080071eb 	.word	0x080071eb
 80071c0:	080071e3 	.word	0x080071e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c4:	f7fd ff12 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 80071c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ca:	e014      	b.n	80071f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071cc:	f7fd ff24 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071d2:	e010      	b.n	80071f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007340 <UART_SetConfig+0x594>)
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071d8:	e00d      	b.n	80071f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071da:	f7fd fe99 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 80071de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071e0:	e009      	b.n	80071f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071e8:	e005      	b.n	80071f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8089 	beq.w	8007310 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	4a4e      	ldr	r2, [pc, #312]	@ (800733c <UART_SetConfig+0x590>)
 8007204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007208:	461a      	mov	r2, r3
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007210:	005a      	lsls	r2, r3, #1
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	441a      	add	r2, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	2b0f      	cmp	r3, #15
 8007228:	d916      	bls.n	8007258 <UART_SetConfig+0x4ac>
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007230:	d212      	bcs.n	8007258 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f023 030f 	bic.w	r3, r3, #15
 800723a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	085b      	lsrs	r3, r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	b29a      	uxth	r2, r3
 8007248:	8bfb      	ldrh	r3, [r7, #30]
 800724a:	4313      	orrs	r3, r2
 800724c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	8bfa      	ldrh	r2, [r7, #30]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	e05b      	b.n	8007310 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800725e:	e057      	b.n	8007310 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007260:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007264:	2b08      	cmp	r3, #8
 8007266:	d828      	bhi.n	80072ba <UART_SetConfig+0x50e>
 8007268:	a201      	add	r2, pc, #4	@ (adr r2, 8007270 <UART_SetConfig+0x4c4>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007295 	.word	0x08007295
 8007274:	0800729d 	.word	0x0800729d
 8007278:	080072a5 	.word	0x080072a5
 800727c:	080072bb 	.word	0x080072bb
 8007280:	080072ab 	.word	0x080072ab
 8007284:	080072bb 	.word	0x080072bb
 8007288:	080072bb 	.word	0x080072bb
 800728c:	080072bb 	.word	0x080072bb
 8007290:	080072b3 	.word	0x080072b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007294:	f7fd feaa 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8007298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800729a:	e014      	b.n	80072c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fd febc 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a2:	e010      	b.n	80072c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a4:	4b26      	ldr	r3, [pc, #152]	@ (8007340 <UART_SetConfig+0x594>)
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a8:	e00d      	b.n	80072c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fd fe31 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 80072ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b0:	e009      	b.n	80072c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b8:	e005      	b.n	80072c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072c4:	bf00      	nop
    }

    if (pclk != 0U)
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d021      	beq.n	8007310 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	4a1a      	ldr	r2, [pc, #104]	@ (800733c <UART_SetConfig+0x590>)
 80072d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	fbb3 f2f2 	udiv	r2, r3, r2
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	441a      	add	r2, r3
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	d909      	bls.n	800730a <UART_SetConfig+0x55e>
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fc:	d205      	bcs.n	800730a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	b29a      	uxth	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e002      	b.n	8007310 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2201      	movs	r2, #1
 8007314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2201      	movs	r2, #1
 800731c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2200      	movs	r2, #0
 800732a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800732c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007330:	4618      	mov	r0, r3
 8007332:	3730      	adds	r7, #48	@ 0x30
 8007334:	46bd      	mov	sp, r7
 8007336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800733a:	bf00      	nop
 800733c:	0800d500 	.word	0x0800d500
 8007340:	00f42400 	.word	0x00f42400

08007344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01a      	beq.n	800745a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007442:	d10a      	bne.n	800745a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b098      	sub	sp, #96	@ 0x60
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007498:	f7fb f866 	bl	8002568 <HAL_GetTick>
 800749c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d12f      	bne.n	800750c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b4:	2200      	movs	r2, #0
 80074b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f88e 	bl	80075dc <UART_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d022      	beq.n	800750c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074da:	653b      	str	r3, [r7, #80]	@ 0x50
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e063      	b.n	80075d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b04      	cmp	r3, #4
 8007518:	d149      	bne.n	80075ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007522:	2200      	movs	r2, #0
 8007524:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f857 	bl	80075dc <UART_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d03c      	beq.n	80075ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	623b      	str	r3, [r7, #32]
   return(result);
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30
 8007554:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e6      	bne.n	8007534 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	60fb      	str	r3, [r7, #12]
   return(result);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007586:	61fa      	str	r2, [r7, #28]
 8007588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69b9      	ldr	r1, [r7, #24]
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	617b      	str	r3, [r7, #20]
   return(result);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e012      	b.n	80075d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3758      	adds	r7, #88	@ 0x58
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	4613      	mov	r3, r2
 80075ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ec:	e04f      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d04b      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f6:	f7fa ffb7 	bl	8002568 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d302      	bcc.n	800760c <UART_WaitOnFlagUntilTimeout+0x30>
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e04e      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d037      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b80      	cmp	r3, #128	@ 0x80
 8007622:	d034      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b40      	cmp	r3, #64	@ 0x40
 8007628:	d031      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b08      	cmp	r3, #8
 8007636:	d110      	bne.n	800765a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2208      	movs	r2, #8
 800763e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f838 	bl	80076b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2208      	movs	r2, #8
 800764a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e029      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007668:	d111      	bne.n	800768e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f81e 	bl	80076b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e00f      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4013      	ands	r3, r2
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	bf0c      	ite	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	2300      	movne	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d0a0      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b095      	sub	sp, #84	@ 0x54
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80076de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800771a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e3      	bne.n	80076f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d118      	bne.n	8007762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	60bb      	str	r3, [r7, #8]
   return(result);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 0310 	bic.w	r3, r3, #16
 8007744:	647b      	str	r3, [r7, #68]	@ 0x44
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6979      	ldr	r1, [r7, #20]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	613b      	str	r3, [r7, #16]
   return(result);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e6      	bne.n	8007730 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007776:	bf00      	nop
 8007778:	3754      	adds	r7, #84	@ 0x54
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_UARTEx_DisableFifoMode+0x16>
 8007794:	2302      	movs	r3, #2
 8007796:	e027      	b.n	80077e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	@ 0x24
 80077a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007808:	2302      	movs	r3, #2
 800780a:	e02d      	b.n	8007868 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2224      	movs	r2, #36	@ 0x24
 8007818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f84f 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007884:	2302      	movs	r3, #2
 8007886:	e02d      	b.n	80078e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2224      	movs	r2, #36	@ 0x24
 8007894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f811 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d108      	bne.n	800790e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800790c:	e031      	b.n	8007972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800790e:	2308      	movs	r3, #8
 8007910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007912:	2308      	movs	r3, #8
 8007914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	0e5b      	lsrs	r3, r3, #25
 800791e:	b2db      	uxtb	r3, r3
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	0f5b      	lsrs	r3, r3, #29
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	7b3a      	ldrb	r2, [r7, #12]
 800793a:	4911      	ldr	r1, [pc, #68]	@ (8007980 <UARTEx_SetNbDataToProcess+0x94>)
 800793c:	5c8a      	ldrb	r2, [r1, r2]
 800793e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007942:	7b3a      	ldrb	r2, [r7, #12]
 8007944:	490f      	ldr	r1, [pc, #60]	@ (8007984 <UARTEx_SetNbDataToProcess+0x98>)
 8007946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007948:	fb93 f3f2 	sdiv	r3, r3, r2
 800794c:	b29a      	uxth	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	7b7a      	ldrb	r2, [r7, #13]
 8007958:	4909      	ldr	r1, [pc, #36]	@ (8007980 <UARTEx_SetNbDataToProcess+0x94>)
 800795a:	5c8a      	ldrb	r2, [r1, r2]
 800795c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007960:	7b7a      	ldrb	r2, [r7, #13]
 8007962:	4908      	ldr	r1, [pc, #32]	@ (8007984 <UARTEx_SetNbDataToProcess+0x98>)
 8007964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007966:	fb93 f3f2 	sdiv	r3, r3, r2
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	0800d518 	.word	0x0800d518
 8007984:	0800d520 	.word	0x0800d520

08007988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007998:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800799c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80079c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4013      	ands	r3, r2
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b09d      	sub	sp, #116	@ 0x74
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d81f      	bhi.n	8007a9a <USB_ActivateEndpoint+0x72>
 8007a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <USB_ActivateEndpoint+0x38>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007a8d 	.word	0x08007a8d
 8007a68:	08007aa3 	.word	0x08007aa3
 8007a6c:	08007a7f 	.word	0x08007a7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007a70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007a7c:	e012      	b.n	8007aa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007a7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007a86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007a8a:	e00b      	b.n	8007aa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007a98:	e004      	b.n	8007aa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007aa0:	e000      	b.n	8007aa4 <USB_ActivateEndpoint+0x7c>
      break;
 8007aa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	441a      	add	r2, r3
 8007aae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	b21b      	sxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ade:	b21a      	sxth	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b21b      	sxth	r3, r3
 8007aea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	441a      	add	r2, r3
 8007af8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	7b1b      	ldrb	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8178 	bne.w	8007e0a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8084 	beq.w	8007c2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	4413      	add	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	00da      	lsls	r2, r3, #3
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	827b      	strh	r3, [r7, #18]
 8007b66:	8a7b      	ldrh	r3, [r7, #18]
 8007b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01b      	beq.n	8007ba8 <USB_ActivateEndpoint+0x180>
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b86:	823b      	strh	r3, [r7, #16]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	441a      	add	r2, r3
 8007b92:	8a3b      	ldrh	r3, [r7, #16]
 8007b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d020      	beq.n	8007bf2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc6:	81bb      	strh	r3, [r7, #12]
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	f083 0320 	eor.w	r3, r3, #32
 8007bce:	81bb      	strh	r3, [r7, #12]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	89bb      	ldrh	r3, [r7, #12]
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]
 8007bf0:	e2d5      	b.n	800819e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c08:	81fb      	strh	r3, [r7, #14]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	89fb      	ldrh	r3, [r7, #14]
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
 8007c2a:	e2b8      	b.n	800819e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	4413      	add	r3, r2
 8007c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00da      	lsls	r2, r3, #3
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	88db      	ldrh	r3, [r3, #6]
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	4413      	add	r3, r2
 8007c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	00da      	lsls	r2, r3, #3
 8007c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c9a:	d91d      	bls.n	8007cd8 <USB_ActivateEndpoint+0x2b0>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 031f 	and.w	r3, r3, #31
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <USB_ActivateEndpoint+0x28e>
 8007cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	029b      	lsls	r3, r3, #10
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	e026      	b.n	8007d26 <USB_ActivateEndpoint+0x2fe>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <USB_ActivateEndpoint+0x2ce>
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e017      	b.n	8007d26 <USB_ActivateEndpoint+0x2fe>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <USB_ActivateEndpoint+0x2e8>
 8007d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007d34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01b      	beq.n	8007d76 <USB_ActivateEndpoint+0x34e>
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d54:	843b      	strh	r3, [r7, #32]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	8c3b      	ldrh	r3, [r7, #32]
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d124      	bne.n	8007dc8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d94:	83bb      	strh	r3, [r7, #28]
 8007d96:	8bbb      	ldrh	r3, [r7, #28]
 8007d98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d9c:	83bb      	strh	r3, [r7, #28]
 8007d9e:	8bbb      	ldrh	r3, [r7, #28]
 8007da0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007da4:	83bb      	strh	r3, [r7, #28]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	8bbb      	ldrh	r3, [r7, #28]
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]
 8007dc6:	e1ea      	b.n	800819e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	83fb      	strh	r3, [r7, #30]
 8007de0:	8bfb      	ldrh	r3, [r7, #30]
 8007de2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007de6:	83fb      	strh	r3, [r7, #30]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	8bfb      	ldrh	r3, [r7, #30]
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
 8007e08:	e1c9      	b.n	800819e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	78db      	ldrb	r3, [r3, #3]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d11e      	bne.n	8007e50 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e28:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	441a      	add	r2, r3
 8007e36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e42:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	8013      	strh	r3, [r2, #0]
 8007e4e:	e01d      	b.n	8007e8c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e9c:	4413      	add	r3, r2
 8007e9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00da      	lsls	r2, r3, #3
 8007ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	891b      	ldrh	r3, [r3, #8]
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed0:	4413      	add	r3, r2
 8007ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	00da      	lsls	r2, r3, #3
 8007eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	895b      	ldrh	r3, [r3, #10]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 8093 	bne.w	8008024 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007f0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01b      	beq.n	8007f52 <USB_ActivateEndpoint+0x52a>
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01b      	beq.n	8007fa2 <USB_ActivateEndpoint+0x57a>
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f80:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	441a      	add	r2, r3
 8007f8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007fba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007fbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fc0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007fc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007fc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007fc8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008000:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]
 8008022:	e0bc      	b.n	800819e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01d      	beq.n	800807c <USB_ActivateEndpoint+0x654>
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008056:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800806c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008078:	b29b      	uxth	r3, r3
 800807a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800808c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01d      	beq.n	80080d4 <USB_ActivateEndpoint+0x6ac>
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	78db      	ldrb	r3, [r3, #3]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d024      	beq.n	8008126 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80080f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80080fa:	f083 0320 	eor.w	r3, r3, #32
 80080fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	441a      	add	r2, r3
 800810c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800811c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008120:	b29b      	uxth	r3, r3
 8008122:	8013      	strh	r3, [r2, #0]
 8008124:	e01d      	b.n	8008162 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800813c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800814e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800815a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008178:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	441a      	add	r2, r3
 8008186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800818a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800818e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800819a:	b29b      	uxth	r3, r3
 800819c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800819e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3774      	adds	r7, #116	@ 0x74
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b08d      	sub	sp, #52	@ 0x34
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	7b1b      	ldrb	r3, [r3, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 808e 	bne.w	80082e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d044      	beq.n	8008256 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	81bb      	strh	r3, [r7, #12]
 80081da:	89bb      	ldrh	r3, [r7, #12]
 80081dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01b      	beq.n	800821c <USB_DeactivateEndpoint+0x6c>
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fa:	817b      	strh	r3, [r7, #10]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	897b      	ldrh	r3, [r7, #10]
 8008208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800820c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008218:	b29b      	uxth	r3, r3
 800821a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800822e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008232:	813b      	strh	r3, [r7, #8]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	441a      	add	r2, r3
 800823e:	893b      	ldrh	r3, [r7, #8]
 8008240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800824c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008250:	b29b      	uxth	r3, r3
 8008252:	8013      	strh	r3, [r2, #0]
 8008254:	e192      	b.n	800857c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	827b      	strh	r3, [r7, #18]
 8008264:	8a7b      	ldrh	r3, [r7, #18]
 8008266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01b      	beq.n	80082a6 <USB_DeactivateEndpoint+0xf6>
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008284:	823b      	strh	r3, [r7, #16]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	441a      	add	r2, r3
 8008290:	8a3b      	ldrh	r3, [r7, #16]
 8008292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800829a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800829e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082bc:	81fb      	strh	r3, [r7, #14]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	441a      	add	r2, r3
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8013      	strh	r3, [r2, #0]
 80082de:	e14d      	b.n	800857c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f040 80a5 	bne.w	8008434 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	843b      	strh	r3, [r7, #32]
 80082f8:	8c3b      	ldrh	r3, [r7, #32]
 80082fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01b      	beq.n	800833a <USB_DeactivateEndpoint+0x18a>
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008318:	83fb      	strh	r3, [r7, #30]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	8bfb      	ldrh	r3, [r7, #30]
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	83bb      	strh	r3, [r7, #28]
 8008348:	8bbb      	ldrh	r3, [r7, #28]
 800834a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <USB_DeactivateEndpoint+0x1da>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008368:	837b      	strh	r3, [r7, #26]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	8b7b      	ldrh	r3, [r7, #26]
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800837e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008382:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a0:	833b      	strh	r3, [r7, #24]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	8b3b      	ldrh	r3, [r7, #24]
 80083ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d8:	82fb      	strh	r3, [r7, #22]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	441a      	add	r2, r3
 80083e4:	8afb      	ldrh	r3, [r7, #22]
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008410:	82bb      	strh	r3, [r7, #20]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	441a      	add	r2, r3
 800841c:	8abb      	ldrh	r3, [r7, #20]
 800841e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800842a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842e:	b29b      	uxth	r3, r3
 8008430:	8013      	strh	r3, [r2, #0]
 8008432:	e0a3      	b.n	800857c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008442:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <USB_DeactivateEndpoint+0x2d4>
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008462:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800847c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008480:	b29b      	uxth	r3, r3
 8008482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008492:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01b      	beq.n	80084d4 <USB_DeactivateEndpoint+0x324>
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80084c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	441a      	add	r2, r3
 80084f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008508:	b29b      	uxth	r3, r3
 800850a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008522:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008540:	b29b      	uxth	r3, r3
 8008542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	441a      	add	r2, r3
 8008566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800856c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008578:	b29b      	uxth	r3, r3
 800857a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3734      	adds	r7, #52	@ 0x34
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b0c2      	sub	sp, #264	@ 0x108
 800858e:	af00      	add	r7, sp, #0
 8008590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008598:	6018      	str	r0, [r3, #0]
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	f040 86b7 	bne.w	8009324 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80085b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d908      	bls.n	80085e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80085d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80085e2:	e007      	b.n	80085f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d13a      	bne.n	800867a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6959      	ldr	r1, [r3, #20]
 8008610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	88da      	ldrh	r2, [r3, #6]
 800861c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008620:	b29b      	uxth	r3, r3
 8008622:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008626:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800862a:	6800      	ldr	r0, [r0, #0]
 800862c:	f001 fc98 	bl	8009f60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800864a:	b29b      	uxth	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	00da      	lsls	r2, r3, #3
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	4413      	add	r3, r2
 8008666:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	801a      	strh	r2, [r3, #0]
 8008676:	f000 be1f 	b.w	80092b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800867a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	78db      	ldrb	r3, [r3, #3]
 8008686:	2b02      	cmp	r3, #2
 8008688:	f040 8462 	bne.w	8008f50 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6a1a      	ldr	r2, [r3, #32]
 8008698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	f240 83df 	bls.w	8008e68 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80086d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	441a      	add	r2, r3
 80086ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6a1a      	ldr	r2, [r3, #32]
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008716:	1ad2      	subs	r2, r2, r3
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 81c7 	beq.w	8008ada <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30
 8008758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d177      	bne.n	8008858 <USB_EPStartXfer+0x2ce>
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008782:	b29b      	uxth	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	4413      	add	r3, r2
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800878c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	00da      	lsls	r2, r3, #3
 800879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879c:	4413      	add	r3, r2
 800879e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80087ba:	d921      	bls.n	8008800 <USB_EPStartXfer+0x276>
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <USB_EPStartXfer+0x252>
 80087d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	029b      	lsls	r3, r3, #10
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	4313      	orrs	r3, r2
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e050      	b.n	80088a2 <USB_EPStartXfer+0x318>
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <USB_EPStartXfer+0x294>
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008816:	b29a      	uxth	r2, r3
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	e041      	b.n	80088a2 <USB_EPStartXfer+0x318>
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <USB_EPStartXfer+0x2b4>
 8008834:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008838:	3301      	adds	r3, #1
 800883a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008848:	b29b      	uxth	r3, r3
 800884a:	029b      	lsls	r3, r3, #10
 800884c:	b29b      	uxth	r3, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	b29a      	uxth	r2, r3
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e024      	b.n	80088a2 <USB_EPStartXfer+0x318>
 8008858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d11c      	bne.n	80088a2 <USB_EPStartXfer+0x318>
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	4413      	add	r3, r2
 800887e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	00da      	lsls	r2, r3, #3
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	4413      	add	r3, r2
 8008892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800889c:	b29a      	uxth	r2, r3
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	895b      	ldrh	r3, [r3, #10]
 80088ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6959      	ldr	r1, [r3, #20]
 80088be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80088cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80088d0:	6800      	ldr	r0, [r0, #0]
 80088d2:	f001 fb45 	bl	8009f60 <USB_WritePMA>
            ep->xfer_buff += len;
 80088d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695a      	ldr	r2, [r3, #20]
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	441a      	add	r2, r3
 80088e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	429a      	cmp	r2, r3
 800890e:	d90f      	bls.n	8008930 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6a1a      	ldr	r2, [r3, #32]
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008920:	1ad2      	subs	r2, r2, r3
 8008922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	621a      	str	r2, [r3, #32]
 800892e:	e00e      	b.n	800894e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800894e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d177      	bne.n	8008a4e <USB_EPStartXfer+0x4c4>
 800895e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008978:	b29b      	uxth	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	4413      	add	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	00da      	lsls	r2, r3, #3
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	4413      	add	r3, r2
 8008994:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80089b0:	d921      	bls.n	80089f6 <USB_EPStartXfer+0x46c>
 80089b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USB_EPStartXfer+0x448>
 80089c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089cc:	3b01      	subs	r3, #1
 80089ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089dc:	b29b      	uxth	r3, r3
 80089de:	029b      	lsls	r3, r3, #10
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	4313      	orrs	r3, r2
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e056      	b.n	8008aa4 <USB_EPStartXfer+0x51a>
 80089f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <USB_EPStartXfer+0x48a>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e047      	b.n	8008aa4 <USB_EPStartXfer+0x51a>
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <USB_EPStartXfer+0x4aa>
 8008a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	029b      	lsls	r3, r3, #10
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	e02a      	b.n	8008aa4 <USB_EPStartXfer+0x51a>
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	785b      	ldrb	r3, [r3, #1]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d122      	bne.n	8008aa4 <USB_EPStartXfer+0x51a>
 8008a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	623b      	str	r3, [r7, #32]
 8008a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	4413      	add	r3, r2
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	00da      	lsls	r2, r3, #3
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	4413      	add	r3, r2
 8008a94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a98:	61fb      	str	r3, [r7, #28]
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	891b      	ldrh	r3, [r3, #8]
 8008ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6959      	ldr	r1, [r3, #20]
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008aca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ace:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	f001 fa44 	bl	8009f60 <USB_WritePMA>
 8008ad8:	e3ee      	b.n	80092b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d177      	bne.n	8008bda <USB_EPStartXfer+0x650>
 8008aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b0a:	4413      	add	r3, r2
 8008b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	00da      	lsls	r2, r3, #3
 8008b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b1e:	4413      	add	r3, r2
 8008b20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b3c:	d921      	bls.n	8008b82 <USB_EPStartXfer+0x5f8>
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b42:	095b      	lsrs	r3, r3, #5
 8008b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d104      	bne.n	8008b5e <USB_EPStartXfer+0x5d4>
 8008b54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e056      	b.n	8008c30 <USB_EPStartXfer+0x6a6>
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <USB_EPStartXfer+0x616>
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e047      	b.n	8008c30 <USB_EPStartXfer+0x6a6>
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <USB_EPStartXfer+0x636>
 8008bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bba:	3301      	adds	r3, #1
 8008bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e02a      	b.n	8008c30 <USB_EPStartXfer+0x6a6>
 8008bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d122      	bne.n	8008c30 <USB_EPStartXfer+0x6a6>
 8008bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c0a:	4413      	add	r3, r2
 8008c0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	891b      	ldrh	r3, [r3, #8]
 8008c3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6959      	ldr	r1, [r3, #20]
 8008c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	f001 f97e 	bl	8009f60 <USB_WritePMA>
            ep->xfer_buff += len;
 8008c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c74:	441a      	add	r2, r3
 8008c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d90f      	bls.n	8008cbe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	621a      	str	r2, [r3, #32]
 8008cbc:	e00e      	b.n	8008cdc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d177      	bne.n	8008de8 <USB_EPStartXfer+0x85e>
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d18:	4413      	add	r3, r2
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	00da      	lsls	r2, r3, #3
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d48:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d4a:	d921      	bls.n	8008d90 <USB_EPStartXfer+0x806>
 8008d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <USB_EPStartXfer+0x7e2>
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	3b01      	subs	r3, #1
 8008d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	029b      	lsls	r3, r3, #10
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	e050      	b.n	8008e32 <USB_EPStartXfer+0x8a8>
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <USB_EPStartXfer+0x824>
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	e041      	b.n	8008e32 <USB_EPStartXfer+0x8a8>
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <USB_EPStartXfer+0x844>
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc8:	3301      	adds	r3, #1
 8008dca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	029b      	lsls	r3, r3, #10
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	e024      	b.n	8008e32 <USB_EPStartXfer+0x8a8>
 8008de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d11c      	bne.n	8008e32 <USB_EPStartXfer+0x8a8>
 8008df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e0c:	4413      	add	r3, r2
 8008e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	00da      	lsls	r2, r3, #3
 8008e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e20:	4413      	add	r3, r2
 8008e22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	895b      	ldrh	r3, [r3, #10]
 8008e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6959      	ldr	r1, [r3, #20]
 8008e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e60:	6800      	ldr	r0, [r0, #0]
 8008e62:	f001 f87d 	bl	8009f60 <USB_WritePMA>
 8008e66:	e227      	b.n	80092b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	441a      	add	r2, r3
 8008ebc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ef4:	4413      	add	r3, r2
 8008ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	00da      	lsls	r2, r3, #3
 8008f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f08:	4413      	add	r3, r2
 8008f0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	891b      	ldrh	r3, [r3, #8]
 8008f26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6959      	ldr	r1, [r3, #20]
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f48:	6800      	ldr	r0, [r0, #0]
 8008f4a:	f001 f809 	bl	8009f60 <USB_WritePMA>
 8008f4e:	e1b3      	b.n	80092b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6a1a      	ldr	r2, [r3, #32]
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f60:	1ad2      	subs	r2, r2, r3
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80c6 	beq.w	8009122 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d177      	bne.n	80090a2 <USB_EPStartXfer+0xb18>
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fd2:	4413      	add	r3, r2
 8008fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	00da      	lsls	r2, r3, #3
 8008fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008fec:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009002:	2b3e      	cmp	r3, #62	@ 0x3e
 8009004:	d921      	bls.n	800904a <USB_EPStartXfer+0xac0>
 8009006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009014:	f003 031f 	and.w	r3, r3, #31
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <USB_EPStartXfer+0xa9c>
 800901c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009020:	3b01      	subs	r3, #1
 8009022:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009030:	b29b      	uxth	r3, r3
 8009032:	029b      	lsls	r3, r3, #10
 8009034:	b29b      	uxth	r3, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	b29b      	uxth	r3, r3
 800903a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009042:	b29a      	uxth	r2, r3
 8009044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	e050      	b.n	80090ec <USB_EPStartXfer+0xb62>
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <USB_EPStartXfer+0xade>
 8009052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009060:	b29a      	uxth	r2, r3
 8009062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	e041      	b.n	80090ec <USB_EPStartXfer+0xb62>
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <USB_EPStartXfer+0xafe>
 800907e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009082:	3301      	adds	r3, #1
 8009084:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	b29a      	uxth	r2, r3
 800908e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009092:	b29b      	uxth	r3, r3
 8009094:	029b      	lsls	r3, r3, #10
 8009096:	b29b      	uxth	r3, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e024      	b.n	80090ec <USB_EPStartXfer+0xb62>
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d11c      	bne.n	80090ec <USB_EPStartXfer+0xb62>
 80090b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090c6:	4413      	add	r3, r2
 80090c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80090ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	00da      	lsls	r2, r3, #3
 80090d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090da:	4413      	add	r3, r2
 80090dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80090ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	895b      	ldrh	r3, [r3, #10]
 80090f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6959      	ldr	r1, [r3, #20]
 8009108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910c:	b29b      	uxth	r3, r3
 800910e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009112:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009116:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	f000 ff20 	bl	8009f60 <USB_WritePMA>
 8009120:	e0ca      	b.n	80092b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d177      	bne.n	8009222 <USB_EPStartXfer+0xc98>
 8009132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800913e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800914c:	b29b      	uxth	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009152:	4413      	add	r3, r2
 8009154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	00da      	lsls	r2, r3, #3
 8009164:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009166:	4413      	add	r3, r2
 8009168:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800916c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800916e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009178:	b29a      	uxth	r2, r3
 800917a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009182:	2b3e      	cmp	r3, #62	@ 0x3e
 8009184:	d921      	bls.n	80091ca <USB_EPStartXfer+0xc40>
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <USB_EPStartXfer+0xc1c>
 800919c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80091a0:	3b01      	subs	r3, #1
 80091a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80091a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091c6:	801a      	strh	r2, [r3, #0]
 80091c8:	e05c      	b.n	8009284 <USB_EPStartXfer+0xcfa>
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <USB_EPStartXfer+0xc5e>
 80091d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	e04d      	b.n	8009284 <USB_EPStartXfer+0xcfa>
 80091e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <USB_EPStartXfer+0xc7e>
 80091fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009202:	3301      	adds	r3, #1
 8009204:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b29a      	uxth	r2, r3
 800920e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009212:	b29b      	uxth	r3, r3
 8009214:	029b      	lsls	r3, r3, #10
 8009216:	b29b      	uxth	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b29a      	uxth	r2, r3
 800921c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	e030      	b.n	8009284 <USB_EPStartXfer+0xcfa>
 8009222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d128      	bne.n	8009284 <USB_EPStartXfer+0xcfa>
 8009232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800924e:	b29b      	uxth	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009256:	4413      	add	r3, r2
 8009258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800925c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	00da      	lsls	r2, r3, #3
 800926a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800926e:	4413      	add	r3, r2
 8009270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009282:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	891b      	ldrh	r3, [r3, #8]
 8009290:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6959      	ldr	r1, [r3, #20]
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80092ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092b2:	6800      	ldr	r0, [r0, #0]
 80092b4:	f000 fe54 	bl	8009f60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092de:	817b      	strh	r3, [r7, #10]
 80092e0:	897b      	ldrh	r3, [r7, #10]
 80092e2:	f083 0310 	eor.w	r3, r3, #16
 80092e6:	817b      	strh	r3, [r7, #10]
 80092e8:	897b      	ldrh	r3, [r7, #10]
 80092ea:	f083 0320 	eor.w	r3, r3, #32
 80092ee:	817b      	strh	r3, [r7, #10]
 80092f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	897b      	ldrh	r3, [r7, #10]
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]
 8009320:	f000 bcde 	b.w	8009ce0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	7b1b      	ldrb	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f040 80bb 	bne.w	80094ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d917      	bls.n	8009382 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	619a      	str	r2, [r3, #24]
 8009380:	e00e      	b.n	80093a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2200      	movs	r2, #0
 800939e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093bc:	b29b      	uxth	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093c4:	4413      	add	r3, r2
 80093c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	00da      	lsls	r2, r3, #3
 80093d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093dc:	4413      	add	r3, r2
 80093de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8009400:	d924      	bls.n	800944c <USB_EPStartXfer+0xec2>
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800940c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009410:	f003 031f 	and.w	r3, r3, #31
 8009414:	2b00      	cmp	r3, #0
 8009416:	d104      	bne.n	8009422 <USB_EPStartXfer+0xe98>
 8009418:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800941c:	3b01      	subs	r3, #1
 800941e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800942e:	b29b      	uxth	r3, r3
 8009430:	029b      	lsls	r3, r3, #10
 8009432:	b29b      	uxth	r3, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	b29b      	uxth	r3, r3
 8009438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	f000 bc10 	b.w	8009c6c <USB_EPStartXfer+0x16e2>
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10c      	bne.n	800946e <USB_EPStartXfer+0xee4>
 8009454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009464:	b29a      	uxth	r2, r3
 8009466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	e3fe      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
 800946e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009472:	085b      	lsrs	r3, r3, #1
 8009474:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <USB_EPStartXfer+0xf04>
 8009484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009488:	3301      	adds	r3, #1
 800948a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800948e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	b29a      	uxth	r2, r3
 8009496:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800949a:	b29b      	uxth	r3, r3
 800949c:	029b      	lsls	r3, r3, #10
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4313      	orrs	r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e3df      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	f040 8218 	bne.w	80098ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f040 809d 	bne.w	800960a <USB_EPStartXfer+0x1080>
 80094d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	461a      	mov	r2, r3
 80094f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094f4:	4413      	add	r3, r2
 80094f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	00da      	lsls	r2, r3, #3
 8009508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800950c:	4413      	add	r3, r2
 800950e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009522:	b29a      	uxth	r2, r3
 8009524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b3e      	cmp	r3, #62	@ 0x3e
 8009538:	d92b      	bls.n	8009592 <USB_EPStartXfer+0x1008>
 800953a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800954c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <USB_EPStartXfer+0xfe0>
 8009560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009564:	3b01      	subs	r3, #1
 8009566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800956a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29a      	uxth	r2, r3
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009576:	b29b      	uxth	r3, r3
 8009578:	029b      	lsls	r3, r3, #10
 800957a:	b29b      	uxth	r3, r3
 800957c:	4313      	orrs	r3, r2
 800957e:	b29b      	uxth	r3, r3
 8009580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009588:	b29a      	uxth	r2, r3
 800958a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	e070      	b.n	8009674 <USB_EPStartXfer+0x10ea>
 8009592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10c      	bne.n	80095bc <USB_EPStartXfer+0x1032>
 80095a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095b8:	801a      	strh	r2, [r3, #0]
 80095ba:	e05b      	b.n	8009674 <USB_EPStartXfer+0x10ea>
 80095bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	085b      	lsrs	r3, r3, #1
 80095ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d004      	beq.n	80095ec <USB_EPStartXfer+0x1062>
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e6:	3301      	adds	r3, #1
 80095e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	029b      	lsls	r3, r3, #10
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4313      	orrs	r3, r2
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009606:	801a      	strh	r2, [r3, #0]
 8009608:	e034      	b.n	8009674 <USB_EPStartXfer+0x10ea>
 800960a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d12c      	bne.n	8009674 <USB_EPStartXfer+0x10ea>
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009636:	b29b      	uxth	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	00da      	lsls	r2, r3, #3
 8009652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009656:	4413      	add	r3, r2
 8009658:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800965c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	b29a      	uxth	r2, r3
 800966e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009672:	801a      	strh	r2, [r3, #0]
 8009674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 809d 	bne.w	80097ce <USB_EPStartXfer+0x1244>
 8009694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096b8:	4413      	add	r3, r2
 80096ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	00da      	lsls	r2, r3, #3
 80096cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80096fc:	d92b      	bls.n	8009756 <USB_EPStartXfer+0x11cc>
 80096fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USB_EPStartXfer+0x11a4>
 8009724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009728:	3b01      	subs	r3, #1
 800972a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800972e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800973a:	b29b      	uxth	r3, r3
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	b29b      	uxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009752:	801a      	strh	r2, [r3, #0]
 8009754:	e069      	b.n	800982a <USB_EPStartXfer+0x12a0>
 8009756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10c      	bne.n	8009780 <USB_EPStartXfer+0x11f6>
 8009766:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009776:	b29a      	uxth	r2, r3
 8009778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800977c:	801a      	strh	r2, [r3, #0]
 800977e:	e054      	b.n	800982a <USB_EPStartXfer+0x12a0>
 8009780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d004      	beq.n	80097b0 <USB_EPStartXfer+0x1226>
 80097a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097aa:	3301      	adds	r3, #1
 80097ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097bc:	b29b      	uxth	r3, r3
 80097be:	029b      	lsls	r3, r3, #10
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	4313      	orrs	r3, r2
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	e02d      	b.n	800982a <USB_EPStartXfer+0x12a0>
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d125      	bne.n	800982a <USB_EPStartXfer+0x12a0>
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097f4:	4413      	add	r3, r2
 80097f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	00da      	lsls	r2, r3, #3
 8009808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800980c:	4413      	add	r3, r2
 800980e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	b29a      	uxth	r2, r3
 8009824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009828:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800982a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8218 	beq.w	8009c6c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800983c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800985c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <USB_EPStartXfer+0x12ea>
 8009868:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800986c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10d      	bne.n	8009890 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009874:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 81f5 	bne.w	8009c6c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009882:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 81ee 	bne.w	8009c6c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80098ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80098d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	8013      	strh	r3, [r2, #0]
 80098ec:	e1be      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	78db      	ldrb	r3, [r3, #3]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	f040 81b4 	bne.w	8009c68 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	429a      	cmp	r2, r3
 800991a:	d917      	bls.n	800994c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800992c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993c:	1ad2      	subs	r2, r2, r3
 800993e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	619a      	str	r2, [r3, #24]
 800994a:	e00e      	b.n	800996a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800994c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2200      	movs	r2, #0
 8009968:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f040 8085 	bne.w	8009a86 <USB_EPStartXfer+0x14fc>
 800997c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800998a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009998:	b29b      	uxth	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80099a0:	4413      	add	r3, r2
 80099a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	00da      	lsls	r2, r3, #3
 80099b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80099b8:	4413      	add	r3, r2
 80099ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099d4:	801a      	strh	r2, [r3, #0]
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099da:	2b3e      	cmp	r3, #62	@ 0x3e
 80099dc:	d923      	bls.n	8009a26 <USB_EPStartXfer+0x149c>
 80099de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <USB_EPStartXfer+0x1474>
 80099f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	029b      	lsls	r3, r3, #10
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4313      	orrs	r3, r2
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	e060      	b.n	8009ae8 <USB_EPStartXfer+0x155e>
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10c      	bne.n	8009a48 <USB_EPStartXfer+0x14be>
 8009a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	e04f      	b.n	8009ae8 <USB_EPStartXfer+0x155e>
 8009a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4c:	085b      	lsrs	r3, r3, #1
 8009a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <USB_EPStartXfer+0x14de>
 8009a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a62:	3301      	adds	r3, #1
 8009a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	029b      	lsls	r3, r3, #10
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e030      	b.n	8009ae8 <USB_EPStartXfer+0x155e>
 8009a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d128      	bne.n	8009ae8 <USB_EPStartXfer+0x155e>
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009aba:	4413      	add	r3, r2
 8009abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	00da      	lsls	r2, r3, #3
 8009ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8085 	bne.w	8009c12 <USB_EPStartXfer+0x1688>
 8009b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	461a      	mov	r2, r3
 8009b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	00da      	lsls	r2, r3, #3
 8009b40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b44:	4413      	add	r3, r2
 8009b46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b66:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b68:	d923      	bls.n	8009bb2 <USB_EPStartXfer+0x1628>
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b78:	f003 031f 	and.w	r3, r3, #31
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <USB_EPStartXfer+0x1600>
 8009b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b84:	3b01      	subs	r3, #1
 8009b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	029b      	lsls	r3, r3, #10
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	e05c      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <USB_EPStartXfer+0x164a>
 8009bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bd0:	801a      	strh	r2, [r3, #0]
 8009bd2:	e04b      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
 8009bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd8:	085b      	lsrs	r3, r3, #1
 8009bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <USB_EPStartXfer+0x166a>
 8009bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bee:	3301      	adds	r3, #1
 8009bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	029b      	lsls	r3, r3, #10
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	e02c      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
 8009c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d124      	bne.n	8009c6c <USB_EPStartXfer+0x16e2>
 8009c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	461a      	mov	r2, r3
 8009c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c38:	4413      	add	r3, r2
 8009c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	00da      	lsls	r2, r3, #3
 8009c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c50:	4413      	add	r3, r2
 8009c52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	e001      	b.n	8009c6c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e03a      	b.n	8009ce2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009c96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009c9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009c9e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ca2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ca6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009caa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	441a      	add	r2, r3
 8009cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d020      	beq.n	8009d40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d14:	81bb      	strh	r3, [r7, #12]
 8009d16:	89bb      	ldrh	r3, [r7, #12]
 8009d18:	f083 0310 	eor.w	r3, r3, #16
 8009d1c:	81bb      	strh	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	441a      	add	r2, r3
 8009d28:	89bb      	ldrh	r3, [r7, #12]
 8009d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	8013      	strh	r3, [r2, #0]
 8009d3e:	e01f      	b.n	8009d80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d56:	81fb      	strh	r3, [r7, #14]
 8009d58:	89fb      	ldrh	r3, [r7, #14]
 8009d5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d5e:	81fb      	strh	r3, [r7, #14]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	441a      	add	r2, r3
 8009d6a:	89fb      	ldrh	r3, [r7, #14]
 8009d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b087      	sub	sp, #28
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	7b1b      	ldrb	r3, [r3, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 809d 	bne.w	8009edc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d04c      	beq.n	8009e44 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	823b      	strh	r3, [r7, #16]
 8009db8:	8a3b      	ldrh	r3, [r7, #16]
 8009dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d01b      	beq.n	8009dfa <USB_EPClearStall+0x6c>
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dd8:	81fb      	strh	r3, [r7, #14]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	441a      	add	r2, r3
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009df2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	78db      	ldrb	r3, [r3, #3]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d06c      	beq.n	8009edc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e18:	81bb      	strh	r3, [r7, #12]
 8009e1a:	89bb      	ldrh	r3, [r7, #12]
 8009e1c:	f083 0320 	eor.w	r3, r3, #32
 8009e20:	81bb      	strh	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	89bb      	ldrh	r3, [r7, #12]
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
 8009e42:	e04b      	b.n	8009edc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	82fb      	strh	r3, [r7, #22]
 8009e52:	8afb      	ldrh	r3, [r7, #22]
 8009e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d01b      	beq.n	8009e94 <USB_EPClearStall+0x106>
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e72:	82bb      	strh	r3, [r7, #20]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	441a      	add	r2, r3
 8009e7e:	8abb      	ldrh	r3, [r7, #20]
 8009e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eaa:	827b      	strh	r3, [r7, #18]
 8009eac:	8a7b      	ldrh	r3, [r7, #18]
 8009eae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009eb2:	827b      	strh	r3, [r7, #18]
 8009eb4:	8a7b      	ldrh	r3, [r7, #18]
 8009eb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009eba:	827b      	strh	r3, [r7, #18]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	441a      	add	r2, r3
 8009ec6:	8a7b      	ldrh	r3, [r7, #18]
 8009ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d103      	bne.n	8009f04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2280      	movs	r2, #128	@ 0x80
 8009f00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b08b      	sub	sp, #44	@ 0x2c
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	460b      	mov	r3, r1
 8009f70:	80fb      	strh	r3, [r7, #6]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009f76:	88bb      	ldrh	r3, [r7, #4]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f86:	88fa      	ldrh	r2, [r7, #6]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f96:	e01c      	b.n	8009fd2 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	b21b      	sxth	r3, r3
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	b21a      	sxth	r2, r3
 8009faa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	b21b      	sxth	r3, r3
 8009fb2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	8a7a      	ldrh	r2, [r7, #18]
 8009fb8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1df      	bne.n	8009f98 <USB_WritePMA+0x38>
  }
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	372c      	adds	r7, #44	@ 0x2c
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b08b      	sub	sp, #44	@ 0x2c
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	80fb      	strh	r3, [r7, #6]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ffc:	88bb      	ldrh	r3, [r7, #4]
 8009ffe:	085b      	lsrs	r3, r3, #1
 800a000:	b29b      	uxth	r3, r3
 800a002:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a00c:	88fa      	ldrh	r2, [r7, #6]
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a016:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a01c:	e018      	b.n	800a050 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	3302      	adds	r3, #2
 800a02a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	3301      	adds	r3, #1
 800a038:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	0a1b      	lsrs	r3, r3, #8
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3301      	adds	r3, #1
 800a048:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	3b01      	subs	r3, #1
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e3      	bne.n	800a01e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a056:	88bb      	ldrh	r3, [r7, #4]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d007      	beq.n	800a072 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	701a      	strb	r2, [r3, #0]
  }
}
 800a072:	bf00      	nop
 800a074:	372c      	adds	r7, #44	@ 0x2c
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a08a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a08e:	f002 f90b 	bl	800c2a8 <USBD_static_malloc>
 800a092:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e066      	b.n	800a174 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7c1b      	ldrb	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d119      	bne.n	800a0ea <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	2181      	movs	r1, #129	@ 0x81
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 ff99 	bl	800bff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 ff8f 	bl	800bff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2210      	movs	r2, #16
 800a0e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a0e8:	e016      	b.n	800a118 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0ea:	2340      	movs	r3, #64	@ 0x40
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	2181      	movs	r1, #129	@ 0x81
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 ff80 	bl	800bff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0fc:	2340      	movs	r3, #64	@ 0x40
 800a0fe:	2202      	movs	r2, #2
 800a100:	2101      	movs	r1, #1
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f001 ff77 	bl	800bff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2210      	movs	r2, #16
 800a114:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a118:	2308      	movs	r3, #8
 800a11a:	2203      	movs	r2, #3
 800a11c:	2182      	movs	r1, #130	@ 0x82
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 ff69 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7c1b      	ldrb	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d109      	bne.n	800a162 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a158:	2101      	movs	r1, #1
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f002 f83a 	bl	800c1d4 <USBD_LL_PrepareReceive>
 800a160:	e007      	b.n	800a172 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a168:	2340      	movs	r3, #64	@ 0x40
 800a16a:	2101      	movs	r1, #1
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f002 f831 	bl	800c1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a188:	2181      	movs	r1, #129	@ 0x81
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 ff59 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a196:	2101      	movs	r1, #1
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 ff52 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1a6:	2182      	movs	r1, #130	@ 0x82
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 ff4a 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f002 f873 	bl	800c2c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a200:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	e0af      	b.n	800a378 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a220:	2b00      	cmp	r3, #0
 800a222:	d03f      	beq.n	800a2a4 <USBD_CDC_Setup+0xb4>
 800a224:	2b20      	cmp	r3, #32
 800a226:	f040 809f 	bne.w	800a368 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	88db      	ldrh	r3, [r3, #6]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d02e      	beq.n	800a290 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b25b      	sxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da16      	bge.n	800a26a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a248:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	88d2      	ldrh	r2, [r2, #6]
 800a24e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	88db      	ldrh	r3, [r3, #6]
 800a254:	2b07      	cmp	r3, #7
 800a256:	bf28      	it	cs
 800a258:	2307      	movcs	r3, #7
 800a25a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	89fa      	ldrh	r2, [r7, #14]
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 facf 	bl	800b806 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a268:	e085      	b.n	800a376 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	785a      	ldrb	r2, [r3, #1]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a280:	6939      	ldr	r1, [r7, #16]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88db      	ldrh	r3, [r3, #6]
 800a286:	461a      	mov	r2, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fae8 	bl	800b85e <USBD_CtlPrepareRx>
      break;
 800a28e:	e072      	b.n	800a376 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	7850      	ldrb	r0, [r2, #1]
 800a29c:	2200      	movs	r2, #0
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	4798      	blx	r3
      break;
 800a2a2:	e068      	b.n	800a376 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	2b0b      	cmp	r3, #11
 800a2aa:	d852      	bhi.n	800a352 <USBD_CDC_Setup+0x162>
 800a2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <USBD_CDC_Setup+0xc4>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2e5 	.word	0x0800a2e5
 800a2b8:	0800a361 	.word	0x0800a361
 800a2bc:	0800a353 	.word	0x0800a353
 800a2c0:	0800a353 	.word	0x0800a353
 800a2c4:	0800a353 	.word	0x0800a353
 800a2c8:	0800a353 	.word	0x0800a353
 800a2cc:	0800a353 	.word	0x0800a353
 800a2d0:	0800a353 	.word	0x0800a353
 800a2d4:	0800a353 	.word	0x0800a353
 800a2d8:	0800a353 	.word	0x0800a353
 800a2dc:	0800a30f 	.word	0x0800a30f
 800a2e0:	0800a339 	.word	0x0800a339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d107      	bne.n	800a300 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2f0:	f107 030a 	add.w	r3, r7, #10
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fa84 	bl	800b806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fe:	e032      	b.n	800a366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 fa0e 	bl	800b724 <USBD_CtlError>
            ret = USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	75fb      	strb	r3, [r7, #23]
          break;
 800a30c:	e02b      	b.n	800a366 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b03      	cmp	r3, #3
 800a318:	d107      	bne.n	800a32a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a31a:	f107 030d 	add.w	r3, r7, #13
 800a31e:	2201      	movs	r2, #1
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fa6f 	bl	800b806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a328:	e01d      	b.n	800a366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f9f9 	bl	800b724 <USBD_CtlError>
            ret = USBD_FAIL;
 800a332:	2303      	movs	r3, #3
 800a334:	75fb      	strb	r3, [r7, #23]
          break;
 800a336:	e016      	b.n	800a366 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b03      	cmp	r3, #3
 800a342:	d00f      	beq.n	800a364 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 f9ec 	bl	800b724 <USBD_CtlError>
            ret = USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a350:	e008      	b.n	800a364 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 f9e5 	bl	800b724 <USBD_CtlError>
          ret = USBD_FAIL;
 800a35a:	2303      	movs	r3, #3
 800a35c:	75fb      	strb	r3, [r7, #23]
          break;
 800a35e:	e002      	b.n	800a366 <USBD_CDC_Setup+0x176>
          break;
 800a360:	bf00      	nop
 800a362:	e008      	b.n	800a376 <USBD_CDC_Setup+0x186>
          break;
 800a364:	bf00      	nop
      }
      break;
 800a366:	e006      	b.n	800a376 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f9da 	bl	800b724 <USBD_CtlError>
      ret = USBD_FAIL;
 800a370:	2303      	movs	r3, #3
 800a372:	75fb      	strb	r3, [r7, #23]
      break;
 800a374:	bf00      	nop
  }

  return (uint8_t)ret;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e04f      	b.n	800a442 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3318      	adds	r3, #24
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d029      	beq.n	800a414 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	78f9      	ldrb	r1, [r7, #3]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	4403      	add	r3, r0
 800a3e0:	3320      	adds	r3, #32
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3e8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d110      	bne.n	800a414 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	3318      	adds	r3, #24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a406:	78f9      	ldrb	r1, [r7, #3]
 800a408:	2300      	movs	r3, #0
 800a40a:	2200      	movs	r2, #0
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fec0 	bl	800c192 <USBD_LL_Transmit>
 800a412:	e015      	b.n	800a440 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a45c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e015      	b.n	800a498 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fed0 	bl	800c216 <USBD_LL_GetRxDataSize>
 800a476:	4602      	mov	r2, r0
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a492:	4611      	mov	r1, r2
 800a494:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e01a      	b.n	800a4f0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d014      	beq.n	800a4ee <USBD_CDC_EP0_RxReady+0x4e>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a4ca:	2bff      	cmp	r3, #255	@ 0xff
 800a4cc:	d00f      	beq.n	800a4ee <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a4dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	22ff      	movs	r2, #255	@ 0xff
 800a4ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2243      	movs	r2, #67	@ 0x43
 800a504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a506:	4b03      	ldr	r3, [pc, #12]	@ (800a514 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	200000d4 	.word	0x200000d4

0800a518 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2243      	movs	r2, #67	@ 0x43
 800a524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a526:	4b03      	ldr	r3, [pc, #12]	@ (800a534 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000090 	.word	0x20000090

0800a538 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2243      	movs	r2, #67	@ 0x43
 800a544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a546:	4b03      	ldr	r3, [pc, #12]	@ (800a554 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	20000118 	.word	0x20000118

0800a558 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	220a      	movs	r2, #10
 800a564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a566:	4b03      	ldr	r3, [pc, #12]	@ (800a574 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	2000004c 	.word	0x2000004c

0800a578 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	e004      	b.n	800a596 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e008      	b.n	800a5d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e004      	b.n	800a604 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a61e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a620:	2301      	movs	r3, #1
 800a622:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a62e:	2303      	movs	r3, #3
 800a630:	e01a      	b.n	800a668 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d114      	bne.n	800a666 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2201      	movs	r2, #1
 800a640:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a65a:	2181      	movs	r1, #129	@ 0x81
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 fd98 	bl	800c192 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a67e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e016      	b.n	800a6bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	7c1b      	ldrb	r3, [r3, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d109      	bne.n	800a6aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a69c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 fd96 	bl	800c1d4 <USBD_LL_PrepareReceive>
 800a6a8:	e007      	b.n	800a6ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6b0:	2340      	movs	r3, #64	@ 0x40
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fd8d 	bl	800c1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e01f      	b.n	800a71c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	79fa      	ldrb	r2, [r7, #7]
 800a70e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f001 fbf5 	bl	800bf00 <USBD_LL_Init>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	e016      	b.n	800a76a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00b      	beq.n	800a768 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a758:	f107 020e 	add.w	r2, r7, #14
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	4602      	mov	r2, r0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 fc20 	bl	800bfc0 <USBD_LL_Start>
 800a780:	4603      	mov	r3, r0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d009      	beq.n	800a7ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	78fa      	ldrb	r2, [r7, #3]
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d007      	beq.n	800a7fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
  }

  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 ff48 	bl	800b6b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a82e:	461a      	mov	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a83c:	f003 031f 	and.w	r3, r3, #31
 800a840:	2b02      	cmp	r3, #2
 800a842:	d01a      	beq.n	800a87a <USBD_LL_SetupStage+0x72>
 800a844:	2b02      	cmp	r3, #2
 800a846:	d822      	bhi.n	800a88e <USBD_LL_SetupStage+0x86>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <USBD_LL_SetupStage+0x4a>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d00a      	beq.n	800a866 <USBD_LL_SetupStage+0x5e>
 800a850:	e01d      	b.n	800a88e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f9f0 	bl	800ac40 <USBD_StdDevReq>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
      break;
 800a864:	e020      	b.n	800a8a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fa54 	bl	800ad1c <USBD_StdItfReq>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
      break;
 800a878:	e016      	b.n	800a8a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa93 	bl	800adae <USBD_StdEPReq>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
      break;
 800a88c:	e00c      	b.n	800a8a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a894:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fbef 	bl	800c080 <USBD_LL_StallEP>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a6:	bf00      	nop
  }

  return ret;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b086      	sub	sp, #24
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d138      	bne.n	800a938 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a8cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d14a      	bne.n	800a96e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d913      	bls.n	800a90c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	1ad2      	subs	r2, r2, r3
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	bf28      	it	cs
 800a8fe:	4613      	movcs	r3, r2
 800a900:	461a      	mov	r2, r3
 800a902:	6879      	ldr	r1, [r7, #4]
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 ffc7 	bl	800b898 <USBD_CtlContinueRx>
 800a90a:	e030      	b.n	800a96e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b03      	cmp	r3, #3
 800a916:	d10b      	bne.n	800a930 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 ffc2 	bl	800b8ba <USBD_CtlSendStatus>
 800a936:	e01a      	b.n	800a96e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b03      	cmp	r3, #3
 800a942:	d114      	bne.n	800a96e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00e      	beq.n	800a96e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	7afa      	ldrb	r2, [r7, #11]
 800a95a:	4611      	mov	r1, r2
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	4798      	blx	r3
 800a960:	4603      	mov	r3, r0
 800a962:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	e000      	b.n	800a970 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	460b      	mov	r3, r1
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d16b      	bne.n	800aa64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3314      	adds	r3, #20
 800a990:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d156      	bne.n	800aa4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d914      	bls.n	800a9d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	1ad2      	subs	r2, r2, r3
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 ff3c 	bl	800b83c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f001 fc02 	bl	800c1d4 <USBD_LL_PrepareReceive>
 800a9d0:	e03b      	b.n	800aa4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d11c      	bne.n	800aa18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d316      	bcc.n	800aa18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d20f      	bcs.n	800aa18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 ff1d 	bl	800b83c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2100      	movs	r1, #0
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f001 fbdf 	bl	800c1d4 <USBD_LL_PrepareReceive>
 800aa16:	e018      	b.n	800aa4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d10b      	bne.n	800aa3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa3c:	2180      	movs	r1, #128	@ 0x80
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f001 fb1e 	bl	800c080 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 ff4b 	bl	800b8e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d122      	bne.n	800aa9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f7ff fe98 	bl	800a78a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa62:	e01a      	b.n	800aa9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d114      	bne.n	800aa9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00e      	beq.n	800aa9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	7afa      	ldrb	r2, [r7, #11]
 800aa86:	4611      	mov	r1, r2
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	4798      	blx	r3
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	e000      	b.n	800aa9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e02f      	b.n	800ab38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00f      	beq.n	800ab02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6852      	ldr	r2, [r2, #4]
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	4611      	mov	r1, r2
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab02:	2340      	movs	r3, #64	@ 0x40
 800ab04:	2200      	movs	r2, #0
 800ab06:	2100      	movs	r1, #0
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 fa74 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2240      	movs	r2, #64	@ 0x40
 800ab1a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab1e:	2340      	movs	r3, #64	@ 0x40
 800ab20:	2200      	movs	r2, #0
 800ab22:	2180      	movs	r1, #128	@ 0x80
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 fa66 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2240      	movs	r2, #64	@ 0x40
 800ab34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	78fa      	ldrb	r2, [r7, #3]
 800ab50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2204      	movs	r2, #4
 800ab7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d106      	bne.n	800abae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	e012      	b.n	800abf8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d10b      	bne.n	800abf6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	3301      	adds	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	b21a      	sxth	r2, r3
 800ac26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	b21b      	sxth	r3, r3
 800ac2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac30:	89fb      	ldrh	r3, [r7, #14]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
	...

0800ac40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac56:	2b40      	cmp	r3, #64	@ 0x40
 800ac58:	d005      	beq.n	800ac66 <USBD_StdDevReq+0x26>
 800ac5a:	2b40      	cmp	r3, #64	@ 0x40
 800ac5c:	d853      	bhi.n	800ad06 <USBD_StdDevReq+0xc6>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00b      	beq.n	800ac7a <USBD_StdDevReq+0x3a>
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	d14f      	bne.n	800ad06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]
      break;
 800ac78:	e04a      	b.n	800ad10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	d83b      	bhi.n	800acfa <USBD_StdDevReq+0xba>
 800ac82:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <USBD_StdDevReq+0x48>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800acdd 	.word	0x0800acdd
 800ac8c:	0800acf1 	.word	0x0800acf1
 800ac90:	0800acfb 	.word	0x0800acfb
 800ac94:	0800ace7 	.word	0x0800ace7
 800ac98:	0800acfb 	.word	0x0800acfb
 800ac9c:	0800acbb 	.word	0x0800acbb
 800aca0:	0800acb1 	.word	0x0800acb1
 800aca4:	0800acfb 	.word	0x0800acfb
 800aca8:	0800acd3 	.word	0x0800acd3
 800acac:	0800acc5 	.word	0x0800acc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f9de 	bl	800b074 <USBD_GetDescriptor>
          break;
 800acb8:	e024      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fb6d 	bl	800b39c <USBD_SetAddress>
          break;
 800acc2:	e01f      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fbac 	bl	800b424 <USBD_SetConfig>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
          break;
 800acd0:	e018      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fc4b 	bl	800b570 <USBD_GetConfig>
          break;
 800acda:	e013      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fc7c 	bl	800b5dc <USBD_GetStatus>
          break;
 800ace4:	e00e      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fcab 	bl	800b644 <USBD_SetFeature>
          break;
 800acee:	e009      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fcba 	bl	800b66c <USBD_ClrFeature>
          break;
 800acf8:	e004      	b.n	800ad04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fd11 	bl	800b724 <USBD_CtlError>
          break;
 800ad02:	bf00      	nop
      }
      break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fd0b 	bl	800b724 <USBD_CtlError>
      break;
 800ad0e:	bf00      	nop
  }

  return ret;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop

0800ad1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad32:	2b40      	cmp	r3, #64	@ 0x40
 800ad34:	d005      	beq.n	800ad42 <USBD_StdItfReq+0x26>
 800ad36:	2b40      	cmp	r3, #64	@ 0x40
 800ad38:	d82f      	bhi.n	800ad9a <USBD_StdItfReq+0x7e>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <USBD_StdItfReq+0x26>
 800ad3e:	2b20      	cmp	r3, #32
 800ad40:	d12b      	bne.n	800ad9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d81d      	bhi.n	800ad8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	889b      	ldrh	r3, [r3, #4]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d813      	bhi.n	800ad82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	88db      	ldrh	r3, [r3, #6]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d110      	bne.n	800ad96 <USBD_StdItfReq+0x7a>
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10d      	bne.n	800ad96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fd9d 	bl	800b8ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad80:	e009      	b.n	800ad96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fccd 	bl	800b724 <USBD_CtlError>
          break;
 800ad8a:	e004      	b.n	800ad96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fcc8 	bl	800b724 <USBD_CtlError>
          break;
 800ad94:	e000      	b.n	800ad98 <USBD_StdItfReq+0x7c>
          break;
 800ad96:	bf00      	nop
      }
      break;
 800ad98:	e004      	b.n	800ada4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fcc1 	bl	800b724 <USBD_CtlError>
      break;
 800ada2:	bf00      	nop
  }

  return ret;
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	889b      	ldrh	r3, [r3, #4]
 800adc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adca:	2b40      	cmp	r3, #64	@ 0x40
 800adcc:	d007      	beq.n	800adde <USBD_StdEPReq+0x30>
 800adce:	2b40      	cmp	r3, #64	@ 0x40
 800add0:	f200 8145 	bhi.w	800b05e <USBD_StdEPReq+0x2b0>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00c      	beq.n	800adf2 <USBD_StdEPReq+0x44>
 800add8:	2b20      	cmp	r3, #32
 800adda:	f040 8140 	bne.w	800b05e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	4798      	blx	r3
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e13a      	b.n	800b068 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	785b      	ldrb	r3, [r3, #1]
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d007      	beq.n	800ae0a <USBD_StdEPReq+0x5c>
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	f300 8129 	bgt.w	800b052 <USBD_StdEPReq+0x2a4>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d07f      	beq.n	800af04 <USBD_StdEPReq+0x156>
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d03c      	beq.n	800ae82 <USBD_StdEPReq+0xd4>
 800ae08:	e123      	b.n	800b052 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d002      	beq.n	800ae1c <USBD_StdEPReq+0x6e>
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d016      	beq.n	800ae48 <USBD_StdEPReq+0x9a>
 800ae1a:	e02c      	b.n	800ae76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00d      	beq.n	800ae3e <USBD_StdEPReq+0x90>
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	2b80      	cmp	r3, #128	@ 0x80
 800ae26:	d00a      	beq.n	800ae3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 f927 	bl	800c080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae32:	2180      	movs	r1, #128	@ 0x80
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 f923 	bl	800c080 <USBD_LL_StallEP>
 800ae3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae3c:	e020      	b.n	800ae80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fc6f 	bl	800b724 <USBD_CtlError>
              break;
 800ae46:	e01b      	b.n	800ae80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	885b      	ldrh	r3, [r3, #2]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10e      	bne.n	800ae6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <USBD_StdEPReq+0xc0>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b80      	cmp	r3, #128	@ 0x80
 800ae5a:	d008      	beq.n	800ae6e <USBD_StdEPReq+0xc0>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	88db      	ldrh	r3, [r3, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 f909 	bl	800c080 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fd23 	bl	800b8ba <USBD_CtlSendStatus>

              break;
 800ae74:	e004      	b.n	800ae80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fc53 	bl	800b724 <USBD_CtlError>
              break;
 800ae7e:	bf00      	nop
          }
          break;
 800ae80:	e0ec      	b.n	800b05c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d002      	beq.n	800ae94 <USBD_StdEPReq+0xe6>
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d016      	beq.n	800aec0 <USBD_StdEPReq+0x112>
 800ae92:	e030      	b.n	800aef6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00d      	beq.n	800aeb6 <USBD_StdEPReq+0x108>
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b80      	cmp	r3, #128	@ 0x80
 800ae9e:	d00a      	beq.n	800aeb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f8eb 	bl	800c080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeaa:	2180      	movs	r1, #128	@ 0x80
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 f8e7 	bl	800c080 <USBD_LL_StallEP>
 800aeb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aeb4:	e025      	b.n	800af02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fc33 	bl	800b724 <USBD_CtlError>
              break;
 800aebe:	e020      	b.n	800af02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	885b      	ldrh	r3, [r3, #2]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d11b      	bne.n	800af00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 f8f1 	bl	800c0be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fcec 	bl	800b8ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
 800aef0:	4603      	mov	r3, r0
 800aef2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aef4:	e004      	b.n	800af00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fc13 	bl	800b724 <USBD_CtlError>
              break;
 800aefe:	e000      	b.n	800af02 <USBD_StdEPReq+0x154>
              break;
 800af00:	bf00      	nop
          }
          break;
 800af02:	e0ab      	b.n	800b05c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d002      	beq.n	800af16 <USBD_StdEPReq+0x168>
 800af10:	2b03      	cmp	r3, #3
 800af12:	d032      	beq.n	800af7a <USBD_StdEPReq+0x1cc>
 800af14:	e097      	b.n	800b046 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <USBD_StdEPReq+0x17e>
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	2b80      	cmp	r3, #128	@ 0x80
 800af20:	d004      	beq.n	800af2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fbfd 	bl	800b724 <USBD_CtlError>
                break;
 800af2a:	e091      	b.n	800b050 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	da0b      	bge.n	800af4c <USBD_StdEPReq+0x19e>
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	3310      	adds	r3, #16
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	4413      	add	r3, r2
 800af48:	3304      	adds	r3, #4
 800af4a:	e00b      	b.n	800af64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af52:	4613      	mov	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	4413      	add	r3, r2
 800af62:	3304      	adds	r3, #4
 800af64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2202      	movs	r2, #2
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fc47 	bl	800b806 <USBD_CtlSendData>
              break;
 800af78:	e06a      	b.n	800b050 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da11      	bge.n	800afa6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	3324      	adds	r3, #36	@ 0x24
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d117      	bne.n	800afcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fbc0 	bl	800b724 <USBD_CtlError>
                  break;
 800afa4:	e054      	b.n	800b050 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d104      	bne.n	800afcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fbad 	bl	800b724 <USBD_CtlError>
                  break;
 800afca:	e041      	b.n	800b050 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	da0b      	bge.n	800afec <USBD_StdEPReq+0x23e>
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	3310      	adds	r3, #16
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	4413      	add	r3, r2
 800afe8:	3304      	adds	r3, #4
 800afea:	e00b      	b.n	800b004 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	4413      	add	r3, r2
 800b002:	3304      	adds	r3, #4
 800b004:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <USBD_StdEPReq+0x264>
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	2b80      	cmp	r3, #128	@ 0x80
 800b010:	d103      	bne.n	800b01a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2200      	movs	r2, #0
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	e00e      	b.n	800b038 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 f86c 	bl	800c0fc <USBD_LL_IsStallEP>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2201      	movs	r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e002      	b.n	800b038 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2202      	movs	r2, #2
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fbe1 	bl	800b806 <USBD_CtlSendData>
              break;
 800b044:	e004      	b.n	800b050 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fb6b 	bl	800b724 <USBD_CtlError>
              break;
 800b04e:	bf00      	nop
          }
          break;
 800b050:	e004      	b.n	800b05c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fb65 	bl	800b724 <USBD_CtlError>
          break;
 800b05a:	bf00      	nop
      }
      break;
 800b05c:	e004      	b.n	800b068 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fb5f 	bl	800b724 <USBD_CtlError>
      break;
 800b066:	bf00      	nop
  }

  return ret;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	885b      	ldrh	r3, [r3, #2]
 800b08e:	0a1b      	lsrs	r3, r3, #8
 800b090:	b29b      	uxth	r3, r3
 800b092:	3b01      	subs	r3, #1
 800b094:	2b0e      	cmp	r3, #14
 800b096:	f200 8152 	bhi.w	800b33e <USBD_GetDescriptor+0x2ca>
 800b09a:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <USBD_GetDescriptor+0x2c>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b111 	.word	0x0800b111
 800b0a4:	0800b129 	.word	0x0800b129
 800b0a8:	0800b169 	.word	0x0800b169
 800b0ac:	0800b33f 	.word	0x0800b33f
 800b0b0:	0800b33f 	.word	0x0800b33f
 800b0b4:	0800b2df 	.word	0x0800b2df
 800b0b8:	0800b30b 	.word	0x0800b30b
 800b0bc:	0800b33f 	.word	0x0800b33f
 800b0c0:	0800b33f 	.word	0x0800b33f
 800b0c4:	0800b33f 	.word	0x0800b33f
 800b0c8:	0800b33f 	.word	0x0800b33f
 800b0cc:	0800b33f 	.word	0x0800b33f
 800b0d0:	0800b33f 	.word	0x0800b33f
 800b0d4:	0800b33f 	.word	0x0800b33f
 800b0d8:	0800b0dd 	.word	0x0800b0dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0fe:	e126      	b.n	800b34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fb0e 	bl	800b724 <USBD_CtlError>
        err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
      break;
 800b10e:	e11e      	b.n	800b34e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	7c12      	ldrb	r2, [r2, #16]
 800b11c:	f107 0108 	add.w	r1, r7, #8
 800b120:	4610      	mov	r0, r2
 800b122:	4798      	blx	r3
 800b124:	60f8      	str	r0, [r7, #12]
      break;
 800b126:	e112      	b.n	800b34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7c1b      	ldrb	r3, [r3, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10d      	bne.n	800b14c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b138:	f107 0208 	add.w	r2, r7, #8
 800b13c:	4610      	mov	r0, r2
 800b13e:	4798      	blx	r3
 800b140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	2202      	movs	r2, #2
 800b148:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b14a:	e100      	b.n	800b34e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b154:	f107 0208 	add.w	r2, r7, #8
 800b158:	4610      	mov	r0, r2
 800b15a:	4798      	blx	r3
 800b15c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3301      	adds	r3, #1
 800b162:	2202      	movs	r2, #2
 800b164:	701a      	strb	r2, [r3, #0]
      break;
 800b166:	e0f2      	b.n	800b34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	885b      	ldrh	r3, [r3, #2]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b05      	cmp	r3, #5
 800b170:	f200 80ac 	bhi.w	800b2cc <USBD_GetDescriptor+0x258>
 800b174:	a201      	add	r2, pc, #4	@ (adr r2, 800b17c <USBD_GetDescriptor+0x108>)
 800b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17a:	bf00      	nop
 800b17c:	0800b195 	.word	0x0800b195
 800b180:	0800b1c9 	.word	0x0800b1c9
 800b184:	0800b1fd 	.word	0x0800b1fd
 800b188:	0800b231 	.word	0x0800b231
 800b18c:	0800b265 	.word	0x0800b265
 800b190:	0800b299 	.word	0x0800b299
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00b      	beq.n	800b1b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	7c12      	ldrb	r2, [r2, #16]
 800b1ac:	f107 0108 	add.w	r1, r7, #8
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1b6:	e091      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fab2 	bl	800b724 <USBD_CtlError>
            err++;
 800b1c0:	7afb      	ldrb	r3, [r7, #11]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1c6:	e089      	b.n	800b2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00b      	beq.n	800b1ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7c12      	ldrb	r2, [r2, #16]
 800b1e0:	f107 0108 	add.w	r1, r7, #8
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4798      	blx	r3
 800b1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ea:	e077      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fa98 	bl	800b724 <USBD_CtlError>
            err++;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fa:	e06f      	b.n	800b2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00b      	beq.n	800b220 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	7c12      	ldrb	r2, [r2, #16]
 800b214:	f107 0108 	add.w	r1, r7, #8
 800b218:	4610      	mov	r0, r2
 800b21a:	4798      	blx	r3
 800b21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21e:	e05d      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa7e 	bl	800b724 <USBD_CtlError>
            err++;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	3301      	adds	r3, #1
 800b22c:	72fb      	strb	r3, [r7, #11]
          break;
 800b22e:	e055      	b.n	800b2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	f107 0108 	add.w	r1, r7, #8
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b252:	e043      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa64 	bl	800b724 <USBD_CtlError>
            err++;
 800b25c:	7afb      	ldrb	r3, [r7, #11]
 800b25e:	3301      	adds	r3, #1
 800b260:	72fb      	strb	r3, [r7, #11]
          break;
 800b262:	e03b      	b.n	800b2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7c12      	ldrb	r2, [r2, #16]
 800b27c:	f107 0108 	add.w	r1, r7, #8
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b286:	e029      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa4a 	bl	800b724 <USBD_CtlError>
            err++;
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	3301      	adds	r3, #1
 800b294:	72fb      	strb	r3, [r7, #11]
          break;
 800b296:	e021      	b.n	800b2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	7c12      	ldrb	r2, [r2, #16]
 800b2b0:	f107 0108 	add.w	r1, r7, #8
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ba:	e00f      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa30 	bl	800b724 <USBD_CtlError>
            err++;
 800b2c4:	7afb      	ldrb	r3, [r7, #11]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ca:	e007      	b.n	800b2dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa28 	bl	800b724 <USBD_CtlError>
          err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b2da:	bf00      	nop
      }
      break;
 800b2dc:	e037      	b.n	800b34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7c1b      	ldrb	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ee:	f107 0208 	add.w	r2, r7, #8
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4798      	blx	r3
 800b2f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2f8:	e029      	b.n	800b34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa11 	bl	800b724 <USBD_CtlError>
        err++;
 800b302:	7afb      	ldrb	r3, [r7, #11]
 800b304:	3301      	adds	r3, #1
 800b306:	72fb      	strb	r3, [r7, #11]
      break;
 800b308:	e021      	b.n	800b34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7c1b      	ldrb	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10d      	bne.n	800b32e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b31a:	f107 0208 	add.w	r2, r7, #8
 800b31e:	4610      	mov	r0, r2
 800b320:	4798      	blx	r3
 800b322:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	2207      	movs	r2, #7
 800b32a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b32c:	e00f      	b.n	800b34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f9f7 	bl	800b724 <USBD_CtlError>
        err++;
 800b336:	7afb      	ldrb	r3, [r7, #11]
 800b338:	3301      	adds	r3, #1
 800b33a:	72fb      	strb	r3, [r7, #11]
      break;
 800b33c:	e007      	b.n	800b34e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f9ef 	bl	800b724 <USBD_CtlError>
      err++;
 800b346:	7afb      	ldrb	r3, [r7, #11]
 800b348:	3301      	adds	r3, #1
 800b34a:	72fb      	strb	r3, [r7, #11]
      break;
 800b34c:	bf00      	nop
  }

  if (err != 0U)
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11e      	bne.n	800b392 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	88db      	ldrh	r3, [r3, #6]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d016      	beq.n	800b38a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b35c:	893b      	ldrh	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00e      	beq.n	800b380 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	88da      	ldrh	r2, [r3, #6]
 800b366:	893b      	ldrh	r3, [r7, #8]
 800b368:	4293      	cmp	r3, r2
 800b36a:	bf28      	it	cs
 800b36c:	4613      	movcs	r3, r2
 800b36e:	b29b      	uxth	r3, r3
 800b370:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b372:	893b      	ldrh	r3, [r7, #8]
 800b374:	461a      	mov	r2, r3
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fa44 	bl	800b806 <USBD_CtlSendData>
 800b37e:	e009      	b.n	800b394 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f9ce 	bl	800b724 <USBD_CtlError>
 800b388:	e004      	b.n	800b394 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa95 	bl	800b8ba <USBD_CtlSendStatus>
 800b390:	e000      	b.n	800b394 <USBD_GetDescriptor+0x320>
    return;
 800b392:	bf00      	nop
  }
}
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop

0800b39c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	889b      	ldrh	r3, [r3, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d131      	bne.n	800b412 <USBD_SetAddress+0x76>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	88db      	ldrh	r3, [r3, #6]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d12d      	bne.n	800b412 <USBD_SetAddress+0x76>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	885b      	ldrh	r3, [r3, #2]
 800b3ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3bc:	d829      	bhi.n	800b412 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	885b      	ldrh	r3, [r3, #2]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d104      	bne.n	800b3e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f9a3 	bl	800b724 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3de:	e01d      	b.n	800b41c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7bfa      	ldrb	r2, [r7, #15]
 800b3e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 feb1 	bl	800c154 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa61 	bl	800b8ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d004      	beq.n	800b408 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2202      	movs	r2, #2
 800b402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b406:	e009      	b.n	800b41c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b410:	e004      	b.n	800b41c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f985 	bl	800b724 <USBD_CtlError>
  }
}
 800b41a:	bf00      	nop
 800b41c:	bf00      	nop
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	885b      	ldrh	r3, [r3, #2]
 800b436:	b2da      	uxtb	r2, r3
 800b438:	4b4c      	ldr	r3, [pc, #304]	@ (800b56c <USBD_SetConfig+0x148>)
 800b43a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b43c:	4b4b      	ldr	r3, [pc, #300]	@ (800b56c <USBD_SetConfig+0x148>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d905      	bls.n	800b450 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f96c 	bl	800b724 <USBD_CtlError>
    return USBD_FAIL;
 800b44c:	2303      	movs	r3, #3
 800b44e:	e088      	b.n	800b562 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d002      	beq.n	800b462 <USBD_SetConfig+0x3e>
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d025      	beq.n	800b4ac <USBD_SetConfig+0x88>
 800b460:	e071      	b.n	800b546 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b462:	4b42      	ldr	r3, [pc, #264]	@ (800b56c <USBD_SetConfig+0x148>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d01c      	beq.n	800b4a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b46a:	4b40      	ldr	r3, [pc, #256]	@ (800b56c <USBD_SetConfig+0x148>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b474:	4b3d      	ldr	r3, [pc, #244]	@ (800b56c <USBD_SetConfig+0x148>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff f990 	bl	800a7a0 <USBD_SetClassConfig>
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d004      	beq.n	800b494 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f949 	bl	800b724 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b492:	e065      	b.n	800b560 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fa10 	bl	800b8ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2203      	movs	r2, #3
 800b49e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4a2:	e05d      	b.n	800b560 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa08 	bl	800b8ba <USBD_CtlSendStatus>
      break;
 800b4aa:	e059      	b.n	800b560 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b56c <USBD_SetConfig+0x148>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d112      	bne.n	800b4da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b4bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b56c <USBD_SetConfig+0x148>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4c6:	4b29      	ldr	r3, [pc, #164]	@ (800b56c <USBD_SetConfig+0x148>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff f983 	bl	800a7d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9f1 	bl	800b8ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4d8:	e042      	b.n	800b560 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b4da:	4b24      	ldr	r3, [pc, #144]	@ (800b56c <USBD_SetConfig+0x148>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d02a      	beq.n	800b53e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff f971 	bl	800a7d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b56c <USBD_SetConfig+0x148>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b500:	4b1a      	ldr	r3, [pc, #104]	@ (800b56c <USBD_SetConfig+0x148>)
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff f94a 	bl	800a7a0 <USBD_SetClassConfig>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00f      	beq.n	800b536 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f903 	bl	800b724 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff f956 	bl	800a7d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b534:	e014      	b.n	800b560 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9bf 	bl	800b8ba <USBD_CtlSendStatus>
      break;
 800b53c:	e010      	b.n	800b560 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f9bb 	bl	800b8ba <USBD_CtlSendStatus>
      break;
 800b544:	e00c      	b.n	800b560 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f8eb 	bl	800b724 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b54e:	4b07      	ldr	r3, [pc, #28]	@ (800b56c <USBD_SetConfig+0x148>)
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff f93f 	bl	800a7d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b55a:	2303      	movs	r3, #3
 800b55c:	73fb      	strb	r3, [r7, #15]
      break;
 800b55e:	bf00      	nop
  }

  return ret;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	2000040c 	.word	0x2000040c

0800b570 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d004      	beq.n	800b58c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f8cd 	bl	800b724 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b58a:	e023      	b.n	800b5d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	dc02      	bgt.n	800b59e <USBD_GetConfig+0x2e>
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc03      	bgt.n	800b5a4 <USBD_GetConfig+0x34>
 800b59c:	e015      	b.n	800b5ca <USBD_GetConfig+0x5a>
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d00b      	beq.n	800b5ba <USBD_GetConfig+0x4a>
 800b5a2:	e012      	b.n	800b5ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f927 	bl	800b806 <USBD_CtlSendData>
        break;
 800b5b8:	e00c      	b.n	800b5d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f91f 	bl	800b806 <USBD_CtlSendData>
        break;
 800b5c8:	e004      	b.n	800b5d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f8a9 	bl	800b724 <USBD_CtlError>
        break;
 800b5d2:	bf00      	nop
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d81e      	bhi.n	800b632 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	88db      	ldrh	r3, [r3, #6]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d004      	beq.n	800b606 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f890 	bl	800b724 <USBD_CtlError>
        break;
 800b604:	e01a      	b.n	800b63c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b612:	2b00      	cmp	r3, #0
 800b614:	d005      	beq.n	800b622 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	f043 0202 	orr.w	r2, r3, #2
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	330c      	adds	r3, #12
 800b626:	2202      	movs	r2, #2
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f8eb 	bl	800b806 <USBD_CtlSendData>
      break;
 800b630:	e004      	b.n	800b63c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f875 	bl	800b724 <USBD_CtlError>
      break;
 800b63a:	bf00      	nop
  }
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	885b      	ldrh	r3, [r3, #2]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d106      	bne.n	800b664 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f92b 	bl	800b8ba <USBD_CtlSendStatus>
  }
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	2b02      	cmp	r3, #2
 800b682:	d80b      	bhi.n	800b69c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	885b      	ldrh	r3, [r3, #2]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d10c      	bne.n	800b6a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f910 	bl	800b8ba <USBD_CtlSendStatus>
      }
      break;
 800b69a:	e004      	b.n	800b6a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f840 	bl	800b724 <USBD_CtlError>
      break;
 800b6a4:	e000      	b.n	800b6a8 <USBD_ClrFeature+0x3c>
      break;
 800b6a6:	bf00      	nop
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	781a      	ldrb	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	781a      	ldrb	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fa90 	bl	800ac00 <SWAPBYTE>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7ff fa83 	bl	800ac00 <SWAPBYTE>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fa76 	bl	800ac00 <SWAPBYTE>
 800b714:	4603      	mov	r3, r0
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	80da      	strh	r2, [r3, #6]
}
 800b71c:	bf00      	nop
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b72e:	2180      	movs	r1, #128	@ 0x80
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fca5 	bl	800c080 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b736:	2100      	movs	r1, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fca1 	bl	800c080 <USBD_LL_StallEP>
}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d036      	beq.n	800b7ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b760:	6938      	ldr	r0, [r7, #16]
 800b762:	f000 f836 	bl	800b7d2 <USBD_GetLen>
 800b766:	4603      	mov	r3, r0
 800b768:	3301      	adds	r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	4413      	add	r3, r2
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	7812      	ldrb	r2, [r2, #0]
 800b77e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
 800b782:	3301      	adds	r3, #1
 800b784:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	4413      	add	r3, r2
 800b78c:	2203      	movs	r2, #3
 800b78e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	3301      	adds	r3, #1
 800b794:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b796:	e013      	b.n	800b7c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	4413      	add	r3, r2
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	7812      	ldrb	r2, [r2, #0]
 800b7a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	613b      	str	r3, [r7, #16]
    idx++;
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e7      	bne.n	800b798 <USBD_GetString+0x52>
 800b7c8:	e000      	b.n	800b7cc <USBD_GetString+0x86>
    return;
 800b7ca:	bf00      	nop
  }
}
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7e2:	e005      	b.n	800b7f0 <USBD_GetLen+0x1e>
  {
    len++;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1f5      	bne.n	800b7e4 <USBD_GetLen+0x12>
  }

  return len;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2202      	movs	r2, #2
 800b816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	2100      	movs	r1, #0
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fcb0 	bl	800c192 <USBD_LL_Transmit>

  return USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	2100      	movs	r1, #0
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 fc9f 	bl	800c192 <USBD_LL_Transmit>

  return USBD_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2203      	movs	r2, #3
 800b86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	2100      	movs	r1, #0
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 fca3 	bl	800c1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 fc92 	bl	800c1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fc5e 	bl	800c192 <USBD_LL_Transmit>

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2205      	movs	r2, #5
 800b8ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fc6c 	bl	800c1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b90c:	2200      	movs	r2, #0
 800b90e:	4912      	ldr	r1, [pc, #72]	@ (800b958 <MX_USB_Device_Init+0x50>)
 800b910:	4812      	ldr	r0, [pc, #72]	@ (800b95c <MX_USB_Device_Init+0x54>)
 800b912:	f7fe fed7 	bl	800a6c4 <USBD_Init>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b91c:	f7f5 fb9a 	bl	8001054 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b920:	490f      	ldr	r1, [pc, #60]	@ (800b960 <MX_USB_Device_Init+0x58>)
 800b922:	480e      	ldr	r0, [pc, #56]	@ (800b95c <MX_USB_Device_Init+0x54>)
 800b924:	f7fe fefe 	bl	800a724 <USBD_RegisterClass>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b92e:	f7f5 fb91 	bl	8001054 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b932:	490c      	ldr	r1, [pc, #48]	@ (800b964 <MX_USB_Device_Init+0x5c>)
 800b934:	4809      	ldr	r0, [pc, #36]	@ (800b95c <MX_USB_Device_Init+0x54>)
 800b936:	f7fe fe1f 	bl	800a578 <USBD_CDC_RegisterInterface>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b940:	f7f5 fb88 	bl	8001054 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b944:	4805      	ldr	r0, [pc, #20]	@ (800b95c <MX_USB_Device_Init+0x54>)
 800b946:	f7fe ff14 	bl	800a772 <USBD_Start>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b950:	f7f5 fb80 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b954:	bf00      	nop
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000170 	.word	0x20000170
 800b95c:	20000410 	.word	0x20000410
 800b960:	20000058 	.word	0x20000058
 800b964:	2000015c 	.word	0x2000015c

0800b968 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b96c:	2200      	movs	r2, #0
 800b96e:	4905      	ldr	r1, [pc, #20]	@ (800b984 <CDC_Init_FS+0x1c>)
 800b970:	4805      	ldr	r0, [pc, #20]	@ (800b988 <CDC_Init_FS+0x20>)
 800b972:	f7fe fe16 	bl	800a5a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b976:	4905      	ldr	r1, [pc, #20]	@ (800b98c <CDC_Init_FS+0x24>)
 800b978:	4803      	ldr	r0, [pc, #12]	@ (800b988 <CDC_Init_FS+0x20>)
 800b97a:	f7fe fe30 	bl	800a5de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b97e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b980:	4618      	mov	r0, r3
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20000ae0 	.word	0x20000ae0
 800b988:	20000410 	.word	0x20000410
 800b98c:	200006e0 	.word	0x200006e0

0800b990 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b994:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b996:	4618      	mov	r0, r3
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	6039      	str	r1, [r7, #0]
 800b9aa:	71fb      	strb	r3, [r7, #7]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b9b0:	79fb      	ldrb	r3, [r7, #7]
 800b9b2:	2b23      	cmp	r3, #35	@ 0x23
 800b9b4:	d84a      	bhi.n	800ba4c <CDC_Control_FS+0xac>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <CDC_Control_FS+0x1c>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800ba4d 	.word	0x0800ba4d
 800b9c0:	0800ba4d 	.word	0x0800ba4d
 800b9c4:	0800ba4d 	.word	0x0800ba4d
 800b9c8:	0800ba4d 	.word	0x0800ba4d
 800b9cc:	0800ba4d 	.word	0x0800ba4d
 800b9d0:	0800ba4d 	.word	0x0800ba4d
 800b9d4:	0800ba4d 	.word	0x0800ba4d
 800b9d8:	0800ba4d 	.word	0x0800ba4d
 800b9dc:	0800ba4d 	.word	0x0800ba4d
 800b9e0:	0800ba4d 	.word	0x0800ba4d
 800b9e4:	0800ba4d 	.word	0x0800ba4d
 800b9e8:	0800ba4d 	.word	0x0800ba4d
 800b9ec:	0800ba4d 	.word	0x0800ba4d
 800b9f0:	0800ba4d 	.word	0x0800ba4d
 800b9f4:	0800ba4d 	.word	0x0800ba4d
 800b9f8:	0800ba4d 	.word	0x0800ba4d
 800b9fc:	0800ba4d 	.word	0x0800ba4d
 800ba00:	0800ba4d 	.word	0x0800ba4d
 800ba04:	0800ba4d 	.word	0x0800ba4d
 800ba08:	0800ba4d 	.word	0x0800ba4d
 800ba0c:	0800ba4d 	.word	0x0800ba4d
 800ba10:	0800ba4d 	.word	0x0800ba4d
 800ba14:	0800ba4d 	.word	0x0800ba4d
 800ba18:	0800ba4d 	.word	0x0800ba4d
 800ba1c:	0800ba4d 	.word	0x0800ba4d
 800ba20:	0800ba4d 	.word	0x0800ba4d
 800ba24:	0800ba4d 	.word	0x0800ba4d
 800ba28:	0800ba4d 	.word	0x0800ba4d
 800ba2c:	0800ba4d 	.word	0x0800ba4d
 800ba30:	0800ba4d 	.word	0x0800ba4d
 800ba34:	0800ba4d 	.word	0x0800ba4d
 800ba38:	0800ba4d 	.word	0x0800ba4d
 800ba3c:	0800ba4d 	.word	0x0800ba4d
 800ba40:	0800ba4d 	.word	0x0800ba4d
 800ba44:	0800ba4d 	.word	0x0800ba4d
 800ba48:	0800ba4d 	.word	0x0800ba4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba4c:	bf00      	nop
  }

  return (USBD_OK);
 800ba4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	process_received_data(UserRxBufferFS, *Len);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4807      	ldr	r0, [pc, #28]	@ (800ba8c <CDC_Receive_FS+0x30>)
 800ba6e:	f7f6 fca9 	bl	80023c4 <process_received_data>

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba72:	6879      	ldr	r1, [r7, #4]
 800ba74:	4806      	ldr	r0, [pc, #24]	@ (800ba90 <CDC_Receive_FS+0x34>)
 800ba76:	f7fe fdb2 	bl	800a5de <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba7a:	4805      	ldr	r0, [pc, #20]	@ (800ba90 <CDC_Receive_FS+0x34>)
 800ba7c:	f7fe fdf8 	bl	800a670 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800ba80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200006e0 	.word	0x200006e0
 800ba90:	20000410 	.word	0x20000410

0800ba94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800baa4:	4b0d      	ldr	r3, [pc, #52]	@ (800badc <CDC_Transmit_FS+0x48>)
 800baa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800baaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e00b      	b.n	800bad2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800baba:	887b      	ldrh	r3, [r7, #2]
 800babc:	461a      	mov	r2, r3
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	4806      	ldr	r0, [pc, #24]	@ (800badc <CDC_Transmit_FS+0x48>)
 800bac2:	f7fe fd6e 	bl	800a5a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bac6:	4805      	ldr	r0, [pc, #20]	@ (800badc <CDC_Transmit_FS+0x48>)
 800bac8:	f7fe fda2 	bl	800a610 <USBD_CDC_TransmitPacket>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	20000410 	.word	0x20000410

0800bae0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800baf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
	...

0800bb04 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2212      	movs	r2, #18
 800bb14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bb16:	4b03      	ldr	r3, [pc, #12]	@ (800bb24 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	20000190 	.word	0x20000190

0800bb28 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2204      	movs	r2, #4
 800bb38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb3a:	4b03      	ldr	r3, [pc, #12]	@ (800bb48 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	200001a4 	.word	0x200001a4

0800bb4c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	6039      	str	r1, [r7, #0]
 800bb56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	4907      	ldr	r1, [pc, #28]	@ (800bb80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bb62:	4808      	ldr	r0, [pc, #32]	@ (800bb84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bb64:	f7ff fdef 	bl	800b746 <USBD_GetString>
 800bb68:	e004      	b.n	800bb74 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	4904      	ldr	r1, [pc, #16]	@ (800bb80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bb6e:	4805      	ldr	r0, [pc, #20]	@ (800bb84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bb70:	f7ff fde9 	bl	800b746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000ee0 	.word	0x20000ee0
 800bb84:	0800d4a0 	.word	0x0800d4a0

0800bb88 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6039      	str	r1, [r7, #0]
 800bb92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	4904      	ldr	r1, [pc, #16]	@ (800bba8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bb98:	4804      	ldr	r0, [pc, #16]	@ (800bbac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bb9a:	f7ff fdd4 	bl	800b746 <USBD_GetString>
  return USBD_StrDesc;
 800bb9e:	4b02      	ldr	r3, [pc, #8]	@ (800bba8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000ee0 	.word	0x20000ee0
 800bbac:	0800d4b8 	.word	0x0800d4b8

0800bbb0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	221a      	movs	r2, #26
 800bbc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbc2:	f000 f843 	bl	800bc4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bbc6:	4b02      	ldr	r3, [pc, #8]	@ (800bbd0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	200001a8 	.word	0x200001a8

0800bbd4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d105      	bne.n	800bbf2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	4907      	ldr	r1, [pc, #28]	@ (800bc08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bbea:	4808      	ldr	r0, [pc, #32]	@ (800bc0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bbec:	f7ff fdab 	bl	800b746 <USBD_GetString>
 800bbf0:	e004      	b.n	800bbfc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4904      	ldr	r1, [pc, #16]	@ (800bc08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bbf6:	4805      	ldr	r0, [pc, #20]	@ (800bc0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bbf8:	f7ff fda5 	bl	800b746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbfc:	4b02      	ldr	r3, [pc, #8]	@ (800bc08 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000ee0 	.word	0x20000ee0
 800bc0c:	0800d4cc 	.word	0x0800d4cc

0800bc10 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d105      	bne.n	800bc2e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	4907      	ldr	r1, [pc, #28]	@ (800bc44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bc26:	4808      	ldr	r0, [pc, #32]	@ (800bc48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bc28:	f7ff fd8d 	bl	800b746 <USBD_GetString>
 800bc2c:	e004      	b.n	800bc38 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4904      	ldr	r1, [pc, #16]	@ (800bc44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bc32:	4805      	ldr	r0, [pc, #20]	@ (800bc48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bc34:	f7ff fd87 	bl	800b746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc38:	4b02      	ldr	r3, [pc, #8]	@ (800bc44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000ee0 	.word	0x20000ee0
 800bc48:	0800d4d8 	.word	0x0800d4d8

0800bc4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc52:	4b0f      	ldr	r3, [pc, #60]	@ (800bc90 <Get_SerialNum+0x44>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc58:	4b0e      	ldr	r3, [pc, #56]	@ (800bc94 <Get_SerialNum+0x48>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc98 <Get_SerialNum+0x4c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4413      	add	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc72:	2208      	movs	r2, #8
 800bc74:	4909      	ldr	r1, [pc, #36]	@ (800bc9c <Get_SerialNum+0x50>)
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 f814 	bl	800bca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	4908      	ldr	r1, [pc, #32]	@ (800bca0 <Get_SerialNum+0x54>)
 800bc80:	68b8      	ldr	r0, [r7, #8]
 800bc82:	f000 f80f 	bl	800bca4 <IntToUnicode>
  }
}
 800bc86:	bf00      	nop
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	1fff7590 	.word	0x1fff7590
 800bc94:	1fff7594 	.word	0x1fff7594
 800bc98:	1fff7598 	.word	0x1fff7598
 800bc9c:	200001aa 	.word	0x200001aa
 800bca0:	200001ba 	.word	0x200001ba

0800bca4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	75fb      	strb	r3, [r7, #23]
 800bcba:	e027      	b.n	800bd0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	0f1b      	lsrs	r3, r3, #28
 800bcc0:	2b09      	cmp	r3, #9
 800bcc2:	d80b      	bhi.n	800bcdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	0f1b      	lsrs	r3, r3, #28
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	005b      	lsls	r3, r3, #1
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	440b      	add	r3, r1
 800bcd4:	3230      	adds	r2, #48	@ 0x30
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	e00a      	b.n	800bcf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	0f1b      	lsrs	r3, r3, #28
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	4619      	mov	r1, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	440b      	add	r3, r1
 800bcec:	3237      	adds	r2, #55	@ 0x37
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	011b      	lsls	r3, r3, #4
 800bcf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	4413      	add	r3, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	7dfa      	ldrb	r2, [r7, #23]
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d3d3      	bcc.n	800bcbc <IntToUnicode+0x18>
  }
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b094      	sub	sp, #80	@ 0x50
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd2c:	f107 030c 	add.w	r3, r7, #12
 800bd30:	2244      	movs	r2, #68	@ 0x44
 800bd32:	2100      	movs	r1, #0
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fb01 	bl	800c33c <memset>
  if(pcdHandle->Instance==USB)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a19      	ldr	r2, [pc, #100]	@ (800bda4 <HAL_PCD_MspInit+0x80>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d12a      	bne.n	800bd9a <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bd44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd4e:	f107 030c 	add.w	r3, r7, #12
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7f9 f9bc 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bd5e:	f7f5 f979 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd62:	4b11      	ldr	r3, [pc, #68]	@ (800bda8 <HAL_PCD_MspInit+0x84>)
 800bd64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd66:	4a10      	ldr	r2, [pc, #64]	@ (800bda8 <HAL_PCD_MspInit+0x84>)
 800bd68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bda8 <HAL_PCD_MspInit+0x84>)
 800bd70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	2013      	movs	r0, #19
 800bd80:	f7f6 fcd9 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800bd84:	2013      	movs	r0, #19
 800bd86:	f7f6 fcf0 	bl	800276a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	2014      	movs	r0, #20
 800bd90:	f7f6 fcd1 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bd94:	2014      	movs	r0, #20
 800bd96:	f7f6 fce8 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	3750      	adds	r7, #80	@ 0x50
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	40005c00 	.word	0x40005c00
 800bda8:	40021000 	.word	0x40021000

0800bdac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	f7fe fd20 	bl	800a808 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	78fb      	ldrb	r3, [r7, #3]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7fe fd5a 	bl	800a8b2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	460b      	mov	r3, r1
 800be10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	440b      	add	r3, r1
 800be26:	3324      	adds	r3, #36	@ 0x24
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	4619      	mov	r1, r3
 800be2e:	f7fe fda3 	bl	800a978 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe feb7 	bl	800abbc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800be4e:	bf00      	nop
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b084      	sub	sp, #16
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be5e:	2301      	movs	r3, #1
 800be60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	795b      	ldrb	r3, [r3, #5]
 800be66:	2b02      	cmp	r3, #2
 800be68:	d001      	beq.n	800be6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be6a:	f7f5 f8f3 	bl	8001054 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be74:	7bfa      	ldrb	r2, [r7, #15]
 800be76:	4611      	mov	r1, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe fe61 	bl	800ab40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be84:	4618      	mov	r0, r3
 800be86:	f7fe fe0d 	bl	800aaa4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fe5c 	bl	800ab60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7a5b      	ldrb	r3, [r3, #9]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beb0:	4b04      	ldr	r3, [pc, #16]	@ (800bec4 <HAL_PCD_SuspendCallback+0x30>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	4a03      	ldr	r2, [pc, #12]	@ (800bec4 <HAL_PCD_SuspendCallback+0x30>)
 800beb6:	f043 0306 	orr.w	r3, r3, #6
 800beba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	e000ed00 	.word	0xe000ed00

0800bec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7a5b      	ldrb	r3, [r3, #9]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d007      	beq.n	800bee8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bed8:	4b08      	ldr	r3, [pc, #32]	@ (800befc <HAL_PCD_ResumeCallback+0x34>)
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	4a07      	ldr	r2, [pc, #28]	@ (800befc <HAL_PCD_ResumeCallback+0x34>)
 800bede:	f023 0306 	bic.w	r3, r3, #6
 800bee2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bee4:	f000 f9f8 	bl	800c2d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe fe4c 	bl	800ab8c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	e000ed00 	.word	0xe000ed00

0800bf00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bf08:	4a2b      	ldr	r2, [pc, #172]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a29      	ldr	r2, [pc, #164]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bf18:	4b27      	ldr	r3, [pc, #156]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf1a:	4a28      	ldr	r2, [pc, #160]	@ (800bfbc <USBD_LL_Init+0xbc>)
 800bf1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf1e:	4b26      	ldr	r3, [pc, #152]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf20:	2208      	movs	r2, #8
 800bf22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf24:	4b24      	ldr	r3, [pc, #144]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf26:	2202      	movs	r2, #2
 800bf28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf2a:	4b23      	ldr	r3, [pc, #140]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf30:	4b21      	ldr	r3, [pc, #132]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf36:	4b20      	ldr	r3, [pc, #128]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf3c:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf42:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf48:	481b      	ldr	r0, [pc, #108]	@ (800bfb8 <USBD_LL_Init+0xb8>)
 800bf4a:	f7f6 fdab 	bl	8002aa4 <HAL_PCD_Init>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bf54:	f7f5 f87e 	bl	8001054 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf5e:	2318      	movs	r3, #24
 800bf60:	2200      	movs	r2, #0
 800bf62:	2100      	movs	r1, #0
 800bf64:	f7f8 fa64 	bl	8004430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf6e:	2358      	movs	r3, #88	@ 0x58
 800bf70:	2200      	movs	r2, #0
 800bf72:	2180      	movs	r1, #128	@ 0x80
 800bf74:	f7f8 fa5c 	bl	8004430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf7e:	23c0      	movs	r3, #192	@ 0xc0
 800bf80:	2200      	movs	r2, #0
 800bf82:	2181      	movs	r1, #129	@ 0x81
 800bf84:	f7f8 fa54 	bl	8004430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bf92:	2200      	movs	r2, #0
 800bf94:	2101      	movs	r1, #1
 800bf96:	f7f8 fa4b 	bl	8004430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bfa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2182      	movs	r1, #130	@ 0x82
 800bfa8:	f7f8 fa42 	bl	8004430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	200010e0 	.word	0x200010e0
 800bfbc:	40005c00 	.word	0x40005c00

0800bfc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7f6 fe32 	bl	8002c40 <HAL_PCD_Start>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f97e 	bl	800c2e4 <USBD_Get_USB_Status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	461a      	mov	r2, r3
 800c004:	4603      	mov	r3, r0
 800c006:	70fb      	strb	r3, [r7, #3]
 800c008:	460b      	mov	r3, r1
 800c00a:	70bb      	strb	r3, [r7, #2]
 800c00c:	4613      	mov	r3, r2
 800c00e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c01e:	78bb      	ldrb	r3, [r7, #2]
 800c020:	883a      	ldrh	r2, [r7, #0]
 800c022:	78f9      	ldrb	r1, [r7, #3]
 800c024:	f7f6 ff79 	bl	8002f1a <HAL_PCD_EP_Open>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f958 	bl	800c2e4 <USBD_Get_USB_Status>
 800c034:	4603      	mov	r3, r0
 800c036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c038:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f7f6 ffb7 	bl	8002fd4 <HAL_PCD_EP_Close>
 800c066:	4603      	mov	r3, r0
 800c068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 f939 	bl	800c2e4 <USBD_Get_USB_Status>
 800c072:	4603      	mov	r3, r0
 800c074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c076:	7bbb      	ldrb	r3, [r7, #14]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	4611      	mov	r1, r2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f7 f860 	bl	8003164 <HAL_PCD_EP_SetStall>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f91a 	bl	800c2e4 <USBD_Get_USB_Status>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f7 f893 	bl	8003208 <HAL_PCD_EP_ClrStall>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f8fb 	bl	800c2e4 <USBD_Get_USB_Status>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c10e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0b      	bge.n	800c130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	440b      	add	r3, r1
 800c12a:	3312      	adds	r3, #18
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	e00b      	b.n	800c148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	440b      	add	r3, r1
 800c142:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c146:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c16e:	78fa      	ldrb	r2, [r7, #3]
 800c170:	4611      	mov	r1, r2
 800c172:	4618      	mov	r0, r3
 800c174:	f7f6 fead 	bl	8002ed2 <HAL_PCD_SetAddress>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 f8b0 	bl	800c2e4 <USBD_Get_USB_Status>
 800c184:	4603      	mov	r3, r0
 800c186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c188:	7bbb      	ldrb	r3, [r7, #14]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b086      	sub	sp, #24
 800c196:	af00      	add	r7, sp, #0
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c1b0:	7af9      	ldrb	r1, [r7, #11]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	f7f6 ff9e 	bl	80030f6 <HAL_PCD_EP_Transmit>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 f88f 	bl	800c2e4 <USBD_Get_USB_Status>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	607a      	str	r2, [r7, #4]
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c1f2:	7af9      	ldrb	r1, [r7, #11]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	f7f6 ff34 	bl	8003064 <HAL_PCD_EP_Receive>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c200:	7dfb      	ldrb	r3, [r7, #23]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 f86e 	bl	800c2e4 <USBD_Get_USB_Status>
 800c208:	4603      	mov	r3, r0
 800c20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c228:	78fa      	ldrb	r2, [r7, #3]
 800c22a:	4611      	mov	r1, r2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7f6 ff4a 	bl	80030c6 <HAL_PCD_EP_GetRxCount>
 800c232:	4603      	mov	r3, r0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <HAL_PCDEx_LPM_Callback+0x18>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d013      	beq.n	800c27a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c252:	e023      	b.n	800c29c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7a5b      	ldrb	r3, [r3, #9]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d007      	beq.n	800c26c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c25c:	f000 f83c 	bl	800c2d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c260:	4b10      	ldr	r3, [pc, #64]	@ (800c2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	4a0f      	ldr	r2, [pc, #60]	@ (800c2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c266:	f023 0306 	bic.w	r3, r3, #6
 800c26a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fc8a 	bl	800ab8c <USBD_LL_Resume>
    break;
 800c278:	e010      	b.n	800c29c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c280:	4618      	mov	r0, r3
 800c282:	f7fe fc6d 	bl	800ab60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7a5b      	ldrb	r3, [r3, #9]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d005      	beq.n	800c29a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c28e:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	4a04      	ldr	r2, [pc, #16]	@ (800c2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c294:	f043 0306 	orr.w	r3, r3, #6
 800c298:	6113      	str	r3, [r2, #16]
    break;
 800c29a:	bf00      	nop
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	e000ed00 	.word	0xe000ed00

0800c2a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2b0:	4b03      	ldr	r3, [pc, #12]	@ (800c2c0 <USBD_static_malloc+0x18>)
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	200013bc 	.word	0x200013bc

0800c2c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c2dc:	f7f4 fe6c 	bl	8000fb8 <SystemClock_Config>
}
 800c2e0:	bf00      	nop
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d817      	bhi.n	800c328 <USBD_Get_USB_Status+0x44>
 800c2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <USBD_Get_USB_Status+0x1c>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c311 	.word	0x0800c311
 800c304:	0800c317 	.word	0x0800c317
 800c308:	0800c31d 	.word	0x0800c31d
 800c30c:	0800c323 	.word	0x0800c323
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
    break;
 800c314:	e00b      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c316:	2303      	movs	r3, #3
 800c318:	73fb      	strb	r3, [r7, #15]
    break;
 800c31a:	e008      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c31c:	2301      	movs	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
    break;
 800c320:	e005      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c322:	2303      	movs	r3, #3
 800c324:	73fb      	strb	r3, [r7, #15]
    break;
 800c326:	e002      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	73fb      	strb	r3, [r7, #15]
    break;
 800c32c:	bf00      	nop
  }
  return usb_status;
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <memset>:
 800c33c:	4402      	add	r2, r0
 800c33e:	4603      	mov	r3, r0
 800c340:	4293      	cmp	r3, r2
 800c342:	d100      	bne.n	800c346 <memset+0xa>
 800c344:	4770      	bx	lr
 800c346:	f803 1b01 	strb.w	r1, [r3], #1
 800c34a:	e7f9      	b.n	800c340 <memset+0x4>

0800c34c <__libc_init_array>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4d0d      	ldr	r5, [pc, #52]	@ (800c384 <__libc_init_array+0x38>)
 800c350:	4c0d      	ldr	r4, [pc, #52]	@ (800c388 <__libc_init_array+0x3c>)
 800c352:	1b64      	subs	r4, r4, r5
 800c354:	10a4      	asrs	r4, r4, #2
 800c356:	2600      	movs	r6, #0
 800c358:	42a6      	cmp	r6, r4
 800c35a:	d109      	bne.n	800c370 <__libc_init_array+0x24>
 800c35c:	4d0b      	ldr	r5, [pc, #44]	@ (800c38c <__libc_init_array+0x40>)
 800c35e:	4c0c      	ldr	r4, [pc, #48]	@ (800c390 <__libc_init_array+0x44>)
 800c360:	f001 f892 	bl	800d488 <_init>
 800c364:	1b64      	subs	r4, r4, r5
 800c366:	10a4      	asrs	r4, r4, #2
 800c368:	2600      	movs	r6, #0
 800c36a:	42a6      	cmp	r6, r4
 800c36c:	d105      	bne.n	800c37a <__libc_init_array+0x2e>
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	f855 3b04 	ldr.w	r3, [r5], #4
 800c374:	4798      	blx	r3
 800c376:	3601      	adds	r6, #1
 800c378:	e7ee      	b.n	800c358 <__libc_init_array+0xc>
 800c37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c37e:	4798      	blx	r3
 800c380:	3601      	adds	r6, #1
 800c382:	e7f2      	b.n	800c36a <__libc_init_array+0x1e>
 800c384:	0800d708 	.word	0x0800d708
 800c388:	0800d708 	.word	0x0800d708
 800c38c:	0800d708 	.word	0x0800d708
 800c390:	0800d70c 	.word	0x0800d70c
 800c394:	00000000 	.word	0x00000000

0800c398 <cos>:
 800c398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c39a:	ec53 2b10 	vmov	r2, r3, d0
 800c39e:	4826      	ldr	r0, [pc, #152]	@ (800c438 <cos+0xa0>)
 800c3a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c3a4:	4281      	cmp	r1, r0
 800c3a6:	d806      	bhi.n	800c3b6 <cos+0x1e>
 800c3a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c430 <cos+0x98>
 800c3ac:	b005      	add	sp, #20
 800c3ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b2:	f000 b899 	b.w	800c4e8 <__kernel_cos>
 800c3b6:	4821      	ldr	r0, [pc, #132]	@ (800c43c <cos+0xa4>)
 800c3b8:	4281      	cmp	r1, r0
 800c3ba:	d908      	bls.n	800c3ce <cos+0x36>
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f7f3 ff2e 	bl	8000220 <__aeabi_dsub>
 800c3c4:	ec41 0b10 	vmov	d0, r0, r1
 800c3c8:	b005      	add	sp, #20
 800c3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3ce:	4668      	mov	r0, sp
 800c3d0:	f000 fa0e 	bl	800c7f0 <__ieee754_rem_pio2>
 800c3d4:	f000 0003 	and.w	r0, r0, #3
 800c3d8:	2801      	cmp	r0, #1
 800c3da:	d00b      	beq.n	800c3f4 <cos+0x5c>
 800c3dc:	2802      	cmp	r0, #2
 800c3de:	d015      	beq.n	800c40c <cos+0x74>
 800c3e0:	b9d8      	cbnz	r0, 800c41a <cos+0x82>
 800c3e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3e6:	ed9d 0b00 	vldr	d0, [sp]
 800c3ea:	f000 f87d 	bl	800c4e8 <__kernel_cos>
 800c3ee:	ec51 0b10 	vmov	r0, r1, d0
 800c3f2:	e7e7      	b.n	800c3c4 <cos+0x2c>
 800c3f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3f8:	ed9d 0b00 	vldr	d0, [sp]
 800c3fc:	f000 f93c 	bl	800c678 <__kernel_sin>
 800c400:	ec53 2b10 	vmov	r2, r3, d0
 800c404:	4610      	mov	r0, r2
 800c406:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c40a:	e7db      	b.n	800c3c4 <cos+0x2c>
 800c40c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c410:	ed9d 0b00 	vldr	d0, [sp]
 800c414:	f000 f868 	bl	800c4e8 <__kernel_cos>
 800c418:	e7f2      	b.n	800c400 <cos+0x68>
 800c41a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c41e:	ed9d 0b00 	vldr	d0, [sp]
 800c422:	2001      	movs	r0, #1
 800c424:	f000 f928 	bl	800c678 <__kernel_sin>
 800c428:	e7e1      	b.n	800c3ee <cos+0x56>
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w
	...
 800c438:	3fe921fb 	.word	0x3fe921fb
 800c43c:	7fefffff 	.word	0x7fefffff

0800c440 <sin>:
 800c440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c442:	ec53 2b10 	vmov	r2, r3, d0
 800c446:	4826      	ldr	r0, [pc, #152]	@ (800c4e0 <sin+0xa0>)
 800c448:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c44c:	4281      	cmp	r1, r0
 800c44e:	d807      	bhi.n	800c460 <sin+0x20>
 800c450:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c4d8 <sin+0x98>
 800c454:	2000      	movs	r0, #0
 800c456:	b005      	add	sp, #20
 800c458:	f85d eb04 	ldr.w	lr, [sp], #4
 800c45c:	f000 b90c 	b.w	800c678 <__kernel_sin>
 800c460:	4820      	ldr	r0, [pc, #128]	@ (800c4e4 <sin+0xa4>)
 800c462:	4281      	cmp	r1, r0
 800c464:	d908      	bls.n	800c478 <sin+0x38>
 800c466:	4610      	mov	r0, r2
 800c468:	4619      	mov	r1, r3
 800c46a:	f7f3 fed9 	bl	8000220 <__aeabi_dsub>
 800c46e:	ec41 0b10 	vmov	d0, r0, r1
 800c472:	b005      	add	sp, #20
 800c474:	f85d fb04 	ldr.w	pc, [sp], #4
 800c478:	4668      	mov	r0, sp
 800c47a:	f000 f9b9 	bl	800c7f0 <__ieee754_rem_pio2>
 800c47e:	f000 0003 	and.w	r0, r0, #3
 800c482:	2801      	cmp	r0, #1
 800c484:	d00c      	beq.n	800c4a0 <sin+0x60>
 800c486:	2802      	cmp	r0, #2
 800c488:	d011      	beq.n	800c4ae <sin+0x6e>
 800c48a:	b9e8      	cbnz	r0, 800c4c8 <sin+0x88>
 800c48c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c490:	ed9d 0b00 	vldr	d0, [sp]
 800c494:	2001      	movs	r0, #1
 800c496:	f000 f8ef 	bl	800c678 <__kernel_sin>
 800c49a:	ec51 0b10 	vmov	r0, r1, d0
 800c49e:	e7e6      	b.n	800c46e <sin+0x2e>
 800c4a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4a4:	ed9d 0b00 	vldr	d0, [sp]
 800c4a8:	f000 f81e 	bl	800c4e8 <__kernel_cos>
 800c4ac:	e7f5      	b.n	800c49a <sin+0x5a>
 800c4ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4b2:	ed9d 0b00 	vldr	d0, [sp]
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	f000 f8de 	bl	800c678 <__kernel_sin>
 800c4bc:	ec53 2b10 	vmov	r2, r3, d0
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c4c6:	e7d2      	b.n	800c46e <sin+0x2e>
 800c4c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4cc:	ed9d 0b00 	vldr	d0, [sp]
 800c4d0:	f000 f80a 	bl	800c4e8 <__kernel_cos>
 800c4d4:	e7f2      	b.n	800c4bc <sin+0x7c>
 800c4d6:	bf00      	nop
	...
 800c4e0:	3fe921fb 	.word	0x3fe921fb
 800c4e4:	7fefffff 	.word	0x7fefffff

0800c4e8 <__kernel_cos>:
 800c4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	ec57 6b10 	vmov	r6, r7, d0
 800c4f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c4f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c4f8:	ed8d 1b00 	vstr	d1, [sp]
 800c4fc:	d206      	bcs.n	800c50c <__kernel_cos+0x24>
 800c4fe:	4630      	mov	r0, r6
 800c500:	4639      	mov	r1, r7
 800c502:	f7f4 fadf 	bl	8000ac4 <__aeabi_d2iz>
 800c506:	2800      	cmp	r0, #0
 800c508:	f000 8088 	beq.w	800c61c <__kernel_cos+0x134>
 800c50c:	4632      	mov	r2, r6
 800c50e:	463b      	mov	r3, r7
 800c510:	4630      	mov	r0, r6
 800c512:	4639      	mov	r1, r7
 800c514:	f7f4 f83c 	bl	8000590 <__aeabi_dmul>
 800c518:	4b51      	ldr	r3, [pc, #324]	@ (800c660 <__kernel_cos+0x178>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	4604      	mov	r4, r0
 800c51e:	460d      	mov	r5, r1
 800c520:	f7f4 f836 	bl	8000590 <__aeabi_dmul>
 800c524:	a340      	add	r3, pc, #256	@ (adr r3, 800c628 <__kernel_cos+0x140>)
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	4682      	mov	sl, r0
 800c52c:	468b      	mov	fp, r1
 800c52e:	4620      	mov	r0, r4
 800c530:	4629      	mov	r1, r5
 800c532:	f7f4 f82d 	bl	8000590 <__aeabi_dmul>
 800c536:	a33e      	add	r3, pc, #248	@ (adr r3, 800c630 <__kernel_cos+0x148>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f3 fe72 	bl	8000224 <__adddf3>
 800c540:	4622      	mov	r2, r4
 800c542:	462b      	mov	r3, r5
 800c544:	f7f4 f824 	bl	8000590 <__aeabi_dmul>
 800c548:	a33b      	add	r3, pc, #236	@ (adr r3, 800c638 <__kernel_cos+0x150>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f3 fe67 	bl	8000220 <__aeabi_dsub>
 800c552:	4622      	mov	r2, r4
 800c554:	462b      	mov	r3, r5
 800c556:	f7f4 f81b 	bl	8000590 <__aeabi_dmul>
 800c55a:	a339      	add	r3, pc, #228	@ (adr r3, 800c640 <__kernel_cos+0x158>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f3 fe60 	bl	8000224 <__adddf3>
 800c564:	4622      	mov	r2, r4
 800c566:	462b      	mov	r3, r5
 800c568:	f7f4 f812 	bl	8000590 <__aeabi_dmul>
 800c56c:	a336      	add	r3, pc, #216	@ (adr r3, 800c648 <__kernel_cos+0x160>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7f3 fe55 	bl	8000220 <__aeabi_dsub>
 800c576:	4622      	mov	r2, r4
 800c578:	462b      	mov	r3, r5
 800c57a:	f7f4 f809 	bl	8000590 <__aeabi_dmul>
 800c57e:	a334      	add	r3, pc, #208	@ (adr r3, 800c650 <__kernel_cos+0x168>)
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f3 fe4e 	bl	8000224 <__adddf3>
 800c588:	4622      	mov	r2, r4
 800c58a:	462b      	mov	r3, r5
 800c58c:	f7f4 f800 	bl	8000590 <__aeabi_dmul>
 800c590:	4622      	mov	r2, r4
 800c592:	462b      	mov	r3, r5
 800c594:	f7f3 fffc 	bl	8000590 <__aeabi_dmul>
 800c598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c59c:	4604      	mov	r4, r0
 800c59e:	460d      	mov	r5, r1
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	4639      	mov	r1, r7
 800c5a4:	f7f3 fff4 	bl	8000590 <__aeabi_dmul>
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f7f3 fe36 	bl	8000220 <__aeabi_dsub>
 800c5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800c664 <__kernel_cos+0x17c>)
 800c5b6:	4598      	cmp	r8, r3
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	d810      	bhi.n	800c5e0 <__kernel_cos+0xf8>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	4659      	mov	r1, fp
 800c5c6:	f7f3 fe2b 	bl	8000220 <__aeabi_dsub>
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4926      	ldr	r1, [pc, #152]	@ (800c668 <__kernel_cos+0x180>)
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	f7f3 fe25 	bl	8000220 <__aeabi_dsub>
 800c5d6:	ec41 0b10 	vmov	d0, r0, r1
 800c5da:	b003      	add	sp, #12
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	4b22      	ldr	r3, [pc, #136]	@ (800c66c <__kernel_cos+0x184>)
 800c5e2:	4921      	ldr	r1, [pc, #132]	@ (800c668 <__kernel_cos+0x180>)
 800c5e4:	4598      	cmp	r8, r3
 800c5e6:	bf8c      	ite	hi
 800c5e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800c670 <__kernel_cos+0x188>)
 800c5ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f7f3 fe13 	bl	8000220 <__aeabi_dsub>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	462b      	mov	r3, r5
 800c602:	4650      	mov	r0, sl
 800c604:	4659      	mov	r1, fp
 800c606:	f7f3 fe0b 	bl	8000220 <__aeabi_dsub>
 800c60a:	4632      	mov	r2, r6
 800c60c:	463b      	mov	r3, r7
 800c60e:	f7f3 fe07 	bl	8000220 <__aeabi_dsub>
 800c612:	4602      	mov	r2, r0
 800c614:	460b      	mov	r3, r1
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	e7da      	b.n	800c5d2 <__kernel_cos+0xea>
 800c61c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c658 <__kernel_cos+0x170>
 800c620:	e7db      	b.n	800c5da <__kernel_cos+0xf2>
 800c622:	bf00      	nop
 800c624:	f3af 8000 	nop.w
 800c628:	be8838d4 	.word	0xbe8838d4
 800c62c:	bda8fae9 	.word	0xbda8fae9
 800c630:	bdb4b1c4 	.word	0xbdb4b1c4
 800c634:	3e21ee9e 	.word	0x3e21ee9e
 800c638:	809c52ad 	.word	0x809c52ad
 800c63c:	3e927e4f 	.word	0x3e927e4f
 800c640:	19cb1590 	.word	0x19cb1590
 800c644:	3efa01a0 	.word	0x3efa01a0
 800c648:	16c15177 	.word	0x16c15177
 800c64c:	3f56c16c 	.word	0x3f56c16c
 800c650:	5555554c 	.word	0x5555554c
 800c654:	3fa55555 	.word	0x3fa55555
 800c658:	00000000 	.word	0x00000000
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	3fe00000 	.word	0x3fe00000
 800c664:	3fd33332 	.word	0x3fd33332
 800c668:	3ff00000 	.word	0x3ff00000
 800c66c:	3fe90000 	.word	0x3fe90000
 800c670:	3fd20000 	.word	0x3fd20000
 800c674:	00000000 	.word	0x00000000

0800c678 <__kernel_sin>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	ec55 4b10 	vmov	r4, r5, d0
 800c680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c684:	b085      	sub	sp, #20
 800c686:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c68a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c68e:	4680      	mov	r8, r0
 800c690:	d205      	bcs.n	800c69e <__kernel_sin+0x26>
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f4 fa15 	bl	8000ac4 <__aeabi_d2iz>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d052      	beq.n	800c744 <__kernel_sin+0xcc>
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 ff73 	bl	8000590 <__aeabi_dmul>
 800c6aa:	4682      	mov	sl, r0
 800c6ac:	468b      	mov	fp, r1
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7f3 ff6b 	bl	8000590 <__aeabi_dmul>
 800c6ba:	a342      	add	r3, pc, #264	@ (adr r3, 800c7c4 <__kernel_sin+0x14c>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	e9cd 0100 	strd	r0, r1, [sp]
 800c6c4:	4650      	mov	r0, sl
 800c6c6:	4659      	mov	r1, fp
 800c6c8:	f7f3 ff62 	bl	8000590 <__aeabi_dmul>
 800c6cc:	a33f      	add	r3, pc, #252	@ (adr r3, 800c7cc <__kernel_sin+0x154>)
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	f7f3 fda5 	bl	8000220 <__aeabi_dsub>
 800c6d6:	4652      	mov	r2, sl
 800c6d8:	465b      	mov	r3, fp
 800c6da:	f7f3 ff59 	bl	8000590 <__aeabi_dmul>
 800c6de:	a33d      	add	r3, pc, #244	@ (adr r3, 800c7d4 <__kernel_sin+0x15c>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 fd9e 	bl	8000224 <__adddf3>
 800c6e8:	4652      	mov	r2, sl
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	f7f3 ff50 	bl	8000590 <__aeabi_dmul>
 800c6f0:	a33a      	add	r3, pc, #232	@ (adr r3, 800c7dc <__kernel_sin+0x164>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 fd93 	bl	8000220 <__aeabi_dsub>
 800c6fa:	4652      	mov	r2, sl
 800c6fc:	465b      	mov	r3, fp
 800c6fe:	f7f3 ff47 	bl	8000590 <__aeabi_dmul>
 800c702:	a338      	add	r3, pc, #224	@ (adr r3, 800c7e4 <__kernel_sin+0x16c>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 fd8c 	bl	8000224 <__adddf3>
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	f1b8 0f00 	cmp.w	r8, #0
 800c714:	d11b      	bne.n	800c74e <__kernel_sin+0xd6>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4650      	mov	r0, sl
 800c71c:	4659      	mov	r1, fp
 800c71e:	f7f3 ff37 	bl	8000590 <__aeabi_dmul>
 800c722:	a325      	add	r3, pc, #148	@ (adr r3, 800c7b8 <__kernel_sin+0x140>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f7f3 fd7a 	bl	8000220 <__aeabi_dsub>
 800c72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c730:	f7f3 ff2e 	bl	8000590 <__aeabi_dmul>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	f7f3 fd72 	bl	8000224 <__adddf3>
 800c740:	4604      	mov	r4, r0
 800c742:	460d      	mov	r5, r1
 800c744:	ec45 4b10 	vmov	d0, r4, r5
 800c748:	b005      	add	sp, #20
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c752:	4b1b      	ldr	r3, [pc, #108]	@ (800c7c0 <__kernel_sin+0x148>)
 800c754:	2200      	movs	r2, #0
 800c756:	f7f3 ff1b 	bl	8000590 <__aeabi_dmul>
 800c75a:	4632      	mov	r2, r6
 800c75c:	4680      	mov	r8, r0
 800c75e:	4689      	mov	r9, r1
 800c760:	463b      	mov	r3, r7
 800c762:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c766:	f7f3 ff13 	bl	8000590 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4640      	mov	r0, r8
 800c770:	4649      	mov	r1, r9
 800c772:	f7f3 fd55 	bl	8000220 <__aeabi_dsub>
 800c776:	4652      	mov	r2, sl
 800c778:	465b      	mov	r3, fp
 800c77a:	f7f3 ff09 	bl	8000590 <__aeabi_dmul>
 800c77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c782:	f7f3 fd4d 	bl	8000220 <__aeabi_dsub>
 800c786:	a30c      	add	r3, pc, #48	@ (adr r3, 800c7b8 <__kernel_sin+0x140>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	4606      	mov	r6, r0
 800c78e:	460f      	mov	r7, r1
 800c790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c794:	f7f3 fefc 	bl	8000590 <__aeabi_dmul>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f3 fd40 	bl	8000224 <__adddf3>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	f7f3 fd38 	bl	8000220 <__aeabi_dsub>
 800c7b0:	e7c6      	b.n	800c740 <__kernel_sin+0xc8>
 800c7b2:	bf00      	nop
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	55555549 	.word	0x55555549
 800c7bc:	3fc55555 	.word	0x3fc55555
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	5acfd57c 	.word	0x5acfd57c
 800c7c8:	3de5d93a 	.word	0x3de5d93a
 800c7cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c7d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c7d4:	57b1fe7d 	.word	0x57b1fe7d
 800c7d8:	3ec71de3 	.word	0x3ec71de3
 800c7dc:	19c161d5 	.word	0x19c161d5
 800c7e0:	3f2a01a0 	.word	0x3f2a01a0
 800c7e4:	1110f8a6 	.word	0x1110f8a6
 800c7e8:	3f811111 	.word	0x3f811111
 800c7ec:	00000000 	.word	0x00000000

0800c7f0 <__ieee754_rem_pio2>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	ec57 6b10 	vmov	r6, r7, d0
 800c7f8:	4bc5      	ldr	r3, [pc, #788]	@ (800cb10 <__ieee754_rem_pio2+0x320>)
 800c7fa:	b08d      	sub	sp, #52	@ 0x34
 800c7fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c800:	4598      	cmp	r8, r3
 800c802:	4604      	mov	r4, r0
 800c804:	9704      	str	r7, [sp, #16]
 800c806:	d807      	bhi.n	800c818 <__ieee754_rem_pio2+0x28>
 800c808:	2200      	movs	r2, #0
 800c80a:	2300      	movs	r3, #0
 800c80c:	ed80 0b00 	vstr	d0, [r0]
 800c810:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c814:	2500      	movs	r5, #0
 800c816:	e028      	b.n	800c86a <__ieee754_rem_pio2+0x7a>
 800c818:	4bbe      	ldr	r3, [pc, #760]	@ (800cb14 <__ieee754_rem_pio2+0x324>)
 800c81a:	4598      	cmp	r8, r3
 800c81c:	d878      	bhi.n	800c910 <__ieee754_rem_pio2+0x120>
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	4dbd      	ldr	r5, [pc, #756]	@ (800cb18 <__ieee754_rem_pio2+0x328>)
 800c822:	2b00      	cmp	r3, #0
 800c824:	4630      	mov	r0, r6
 800c826:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cad8 <__ieee754_rem_pio2+0x2e8>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	4639      	mov	r1, r7
 800c82e:	dd38      	ble.n	800c8a2 <__ieee754_rem_pio2+0xb2>
 800c830:	f7f3 fcf6 	bl	8000220 <__aeabi_dsub>
 800c834:	45a8      	cmp	r8, r5
 800c836:	4606      	mov	r6, r0
 800c838:	460f      	mov	r7, r1
 800c83a:	d01a      	beq.n	800c872 <__ieee754_rem_pio2+0x82>
 800c83c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cae0 <__ieee754_rem_pio2+0x2f0>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fced 	bl	8000220 <__aeabi_dsub>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	4680      	mov	r8, r0
 800c84c:	4689      	mov	r9, r1
 800c84e:	4630      	mov	r0, r6
 800c850:	4639      	mov	r1, r7
 800c852:	f7f3 fce5 	bl	8000220 <__aeabi_dsub>
 800c856:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cae0 <__ieee754_rem_pio2+0x2f0>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7f3 fce0 	bl	8000220 <__aeabi_dsub>
 800c860:	e9c4 8900 	strd	r8, r9, [r4]
 800c864:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c868:	2501      	movs	r5, #1
 800c86a:	4628      	mov	r0, r5
 800c86c:	b00d      	add	sp, #52	@ 0x34
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	a39d      	add	r3, pc, #628	@ (adr r3, 800cae8 <__ieee754_rem_pio2+0x2f8>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fcd2 	bl	8000220 <__aeabi_dsub>
 800c87c:	a39c      	add	r3, pc, #624	@ (adr r3, 800caf0 <__ieee754_rem_pio2+0x300>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	4606      	mov	r6, r0
 800c884:	460f      	mov	r7, r1
 800c886:	f7f3 fccb 	bl	8000220 <__aeabi_dsub>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4680      	mov	r8, r0
 800c890:	4689      	mov	r9, r1
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 fcc3 	bl	8000220 <__aeabi_dsub>
 800c89a:	a395      	add	r3, pc, #596	@ (adr r3, 800caf0 <__ieee754_rem_pio2+0x300>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	e7dc      	b.n	800c85c <__ieee754_rem_pio2+0x6c>
 800c8a2:	f7f3 fcbf 	bl	8000224 <__adddf3>
 800c8a6:	45a8      	cmp	r8, r5
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	460f      	mov	r7, r1
 800c8ac:	d018      	beq.n	800c8e0 <__ieee754_rem_pio2+0xf0>
 800c8ae:	a38c      	add	r3, pc, #560	@ (adr r3, 800cae0 <__ieee754_rem_pio2+0x2f0>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f7f3 fcb6 	bl	8000224 <__adddf3>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4680      	mov	r8, r0
 800c8be:	4689      	mov	r9, r1
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	f7f3 fcac 	bl	8000220 <__aeabi_dsub>
 800c8c8:	a385      	add	r3, pc, #532	@ (adr r3, 800cae0 <__ieee754_rem_pio2+0x2f0>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 fca9 	bl	8000224 <__adddf3>
 800c8d2:	f04f 35ff 	mov.w	r5, #4294967295
 800c8d6:	e9c4 8900 	strd	r8, r9, [r4]
 800c8da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8de:	e7c4      	b.n	800c86a <__ieee754_rem_pio2+0x7a>
 800c8e0:	a381      	add	r3, pc, #516	@ (adr r3, 800cae8 <__ieee754_rem_pio2+0x2f8>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f7f3 fc9d 	bl	8000224 <__adddf3>
 800c8ea:	a381      	add	r3, pc, #516	@ (adr r3, 800caf0 <__ieee754_rem_pio2+0x300>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	460f      	mov	r7, r1
 800c8f4:	f7f3 fc96 	bl	8000224 <__adddf3>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fc8c 	bl	8000220 <__aeabi_dsub>
 800c908:	a379      	add	r3, pc, #484	@ (adr r3, 800caf0 <__ieee754_rem_pio2+0x300>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e7de      	b.n	800c8ce <__ieee754_rem_pio2+0xde>
 800c910:	4b82      	ldr	r3, [pc, #520]	@ (800cb1c <__ieee754_rem_pio2+0x32c>)
 800c912:	4598      	cmp	r8, r3
 800c914:	f200 80d1 	bhi.w	800caba <__ieee754_rem_pio2+0x2ca>
 800c918:	f000 f966 	bl	800cbe8 <fabs>
 800c91c:	ec57 6b10 	vmov	r6, r7, d0
 800c920:	a375      	add	r3, pc, #468	@ (adr r3, 800caf8 <__ieee754_rem_pio2+0x308>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	4630      	mov	r0, r6
 800c928:	4639      	mov	r1, r7
 800c92a:	f7f3 fe31 	bl	8000590 <__aeabi_dmul>
 800c92e:	4b7c      	ldr	r3, [pc, #496]	@ (800cb20 <__ieee754_rem_pio2+0x330>)
 800c930:	2200      	movs	r2, #0
 800c932:	f7f3 fc77 	bl	8000224 <__adddf3>
 800c936:	f7f4 f8c5 	bl	8000ac4 <__aeabi_d2iz>
 800c93a:	4605      	mov	r5, r0
 800c93c:	f7f3 fdbe 	bl	80004bc <__aeabi_i2d>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c948:	a363      	add	r3, pc, #396	@ (adr r3, 800cad8 <__ieee754_rem_pio2+0x2e8>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f7f3 fe1f 	bl	8000590 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4630      	mov	r0, r6
 800c958:	4639      	mov	r1, r7
 800c95a:	f7f3 fc61 	bl	8000220 <__aeabi_dsub>
 800c95e:	a360      	add	r3, pc, #384	@ (adr r3, 800cae0 <__ieee754_rem_pio2+0x2f0>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	4682      	mov	sl, r0
 800c966:	468b      	mov	fp, r1
 800c968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96c:	f7f3 fe10 	bl	8000590 <__aeabi_dmul>
 800c970:	2d1f      	cmp	r5, #31
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	dc0c      	bgt.n	800c992 <__ieee754_rem_pio2+0x1a2>
 800c978:	4b6a      	ldr	r3, [pc, #424]	@ (800cb24 <__ieee754_rem_pio2+0x334>)
 800c97a:	1e6a      	subs	r2, r5, #1
 800c97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c980:	4543      	cmp	r3, r8
 800c982:	d006      	beq.n	800c992 <__ieee754_rem_pio2+0x1a2>
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	4650      	mov	r0, sl
 800c98a:	4659      	mov	r1, fp
 800c98c:	f7f3 fc48 	bl	8000220 <__aeabi_dsub>
 800c990:	e00e      	b.n	800c9b0 <__ieee754_rem_pio2+0x1c0>
 800c992:	463b      	mov	r3, r7
 800c994:	4632      	mov	r2, r6
 800c996:	4650      	mov	r0, sl
 800c998:	4659      	mov	r1, fp
 800c99a:	f7f3 fc41 	bl	8000220 <__aeabi_dsub>
 800c99e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c9a2:	9305      	str	r3, [sp, #20]
 800c9a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	dc02      	bgt.n	800c9b6 <__ieee754_rem_pio2+0x1c6>
 800c9b0:	e9c4 0100 	strd	r0, r1, [r4]
 800c9b4:	e039      	b.n	800ca2a <__ieee754_rem_pio2+0x23a>
 800c9b6:	a34c      	add	r3, pc, #304	@ (adr r3, 800cae8 <__ieee754_rem_pio2+0x2f8>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c0:	f7f3 fde6 	bl	8000590 <__aeabi_dmul>
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4650      	mov	r0, sl
 800c9ce:	4659      	mov	r1, fp
 800c9d0:	f7f3 fc26 	bl	8000220 <__aeabi_dsub>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4680      	mov	r8, r0
 800c9da:	4689      	mov	r9, r1
 800c9dc:	4650      	mov	r0, sl
 800c9de:	4659      	mov	r1, fp
 800c9e0:	f7f3 fc1e 	bl	8000220 <__aeabi_dsub>
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	f7f3 fc1a 	bl	8000220 <__aeabi_dsub>
 800c9ec:	a340      	add	r3, pc, #256	@ (adr r3, 800caf0 <__ieee754_rem_pio2+0x300>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fa:	f7f3 fdc9 	bl	8000590 <__aeabi_dmul>
 800c9fe:	4632      	mov	r2, r6
 800ca00:	463b      	mov	r3, r7
 800ca02:	f7f3 fc0d 	bl	8000220 <__aeabi_dsub>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f3 fc05 	bl	8000220 <__aeabi_dsub>
 800ca16:	9a05      	ldr	r2, [sp, #20]
 800ca18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	2b31      	cmp	r3, #49	@ 0x31
 800ca20:	dc20      	bgt.n	800ca64 <__ieee754_rem_pio2+0x274>
 800ca22:	e9c4 0100 	strd	r0, r1, [r4]
 800ca26:	46c2      	mov	sl, r8
 800ca28:	46cb      	mov	fp, r9
 800ca2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca2e:	4650      	mov	r0, sl
 800ca30:	4642      	mov	r2, r8
 800ca32:	464b      	mov	r3, r9
 800ca34:	4659      	mov	r1, fp
 800ca36:	f7f3 fbf3 	bl	8000220 <__aeabi_dsub>
 800ca3a:	463b      	mov	r3, r7
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	f7f3 fbef 	bl	8000220 <__aeabi_dsub>
 800ca42:	9b04      	ldr	r3, [sp, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca4a:	f6bf af0e 	bge.w	800c86a <__ieee754_rem_pio2+0x7a>
 800ca4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ca52:	6063      	str	r3, [r4, #4]
 800ca54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca58:	f8c4 8000 	str.w	r8, [r4]
 800ca5c:	60a0      	str	r0, [r4, #8]
 800ca5e:	60e3      	str	r3, [r4, #12]
 800ca60:	426d      	negs	r5, r5
 800ca62:	e702      	b.n	800c86a <__ieee754_rem_pio2+0x7a>
 800ca64:	a326      	add	r3, pc, #152	@ (adr r3, 800cb00 <__ieee754_rem_pio2+0x310>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6e:	f7f3 fd8f 	bl	8000590 <__aeabi_dmul>
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f3 fbcf 	bl	8000220 <__aeabi_dsub>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4682      	mov	sl, r0
 800ca88:	468b      	mov	fp, r1
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	f7f3 fbc7 	bl	8000220 <__aeabi_dsub>
 800ca92:	4632      	mov	r2, r6
 800ca94:	463b      	mov	r3, r7
 800ca96:	f7f3 fbc3 	bl	8000220 <__aeabi_dsub>
 800ca9a:	a31b      	add	r3, pc, #108	@ (adr r3, 800cb08 <__ieee754_rem_pio2+0x318>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	4606      	mov	r6, r0
 800caa2:	460f      	mov	r7, r1
 800caa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa8:	f7f3 fd72 	bl	8000590 <__aeabi_dmul>
 800caac:	4632      	mov	r2, r6
 800caae:	463b      	mov	r3, r7
 800cab0:	f7f3 fbb6 	bl	8000220 <__aeabi_dsub>
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	e764      	b.n	800c984 <__ieee754_rem_pio2+0x194>
 800caba:	4b1b      	ldr	r3, [pc, #108]	@ (800cb28 <__ieee754_rem_pio2+0x338>)
 800cabc:	4598      	cmp	r8, r3
 800cabe:	d935      	bls.n	800cb2c <__ieee754_rem_pio2+0x33c>
 800cac0:	4632      	mov	r2, r6
 800cac2:	463b      	mov	r3, r7
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fbaa 	bl	8000220 <__aeabi_dsub>
 800cacc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cad0:	e9c4 0100 	strd	r0, r1, [r4]
 800cad4:	e69e      	b.n	800c814 <__ieee754_rem_pio2+0x24>
 800cad6:	bf00      	nop
 800cad8:	54400000 	.word	0x54400000
 800cadc:	3ff921fb 	.word	0x3ff921fb
 800cae0:	1a626331 	.word	0x1a626331
 800cae4:	3dd0b461 	.word	0x3dd0b461
 800cae8:	1a600000 	.word	0x1a600000
 800caec:	3dd0b461 	.word	0x3dd0b461
 800caf0:	2e037073 	.word	0x2e037073
 800caf4:	3ba3198a 	.word	0x3ba3198a
 800caf8:	6dc9c883 	.word	0x6dc9c883
 800cafc:	3fe45f30 	.word	0x3fe45f30
 800cb00:	2e000000 	.word	0x2e000000
 800cb04:	3ba3198a 	.word	0x3ba3198a
 800cb08:	252049c1 	.word	0x252049c1
 800cb0c:	397b839a 	.word	0x397b839a
 800cb10:	3fe921fb 	.word	0x3fe921fb
 800cb14:	4002d97b 	.word	0x4002d97b
 800cb18:	3ff921fb 	.word	0x3ff921fb
 800cb1c:	413921fb 	.word	0x413921fb
 800cb20:	3fe00000 	.word	0x3fe00000
 800cb24:	0800d528 	.word	0x0800d528
 800cb28:	7fefffff 	.word	0x7fefffff
 800cb2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cb30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cb34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cb38:	4630      	mov	r0, r6
 800cb3a:	460f      	mov	r7, r1
 800cb3c:	f7f3 ffc2 	bl	8000ac4 <__aeabi_d2iz>
 800cb40:	f7f3 fcbc 	bl	80004bc <__aeabi_i2d>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4630      	mov	r0, r6
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb50:	f7f3 fb66 	bl	8000220 <__aeabi_dsub>
 800cb54:	4b22      	ldr	r3, [pc, #136]	@ (800cbe0 <__ieee754_rem_pio2+0x3f0>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	f7f3 fd1a 	bl	8000590 <__aeabi_dmul>
 800cb5c:	460f      	mov	r7, r1
 800cb5e:	4606      	mov	r6, r0
 800cb60:	f7f3 ffb0 	bl	8000ac4 <__aeabi_d2iz>
 800cb64:	f7f3 fcaa 	bl	80004bc <__aeabi_i2d>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	4639      	mov	r1, r7
 800cb70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cb74:	f7f3 fb54 	bl	8000220 <__aeabi_dsub>
 800cb78:	4b19      	ldr	r3, [pc, #100]	@ (800cbe0 <__ieee754_rem_pio2+0x3f0>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f7f3 fd08 	bl	8000590 <__aeabi_dmul>
 800cb80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cb84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cb88:	f04f 0803 	mov.w	r8, #3
 800cb8c:	2600      	movs	r6, #0
 800cb8e:	2700      	movs	r7, #0
 800cb90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cb94:	4632      	mov	r2, r6
 800cb96:	463b      	mov	r3, r7
 800cb98:	46c2      	mov	sl, r8
 800cb9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb9e:	f7f3 ff5f 	bl	8000a60 <__aeabi_dcmpeq>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d1f4      	bne.n	800cb90 <__ieee754_rem_pio2+0x3a0>
 800cba6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe4 <__ieee754_rem_pio2+0x3f4>)
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	2302      	movs	r3, #2
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	462a      	mov	r2, r5
 800cbb0:	4653      	mov	r3, sl
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	a806      	add	r0, sp, #24
 800cbb6:	f000 f81f 	bl	800cbf8 <__kernel_rem_pio2>
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	f6bf ae53 	bge.w	800c86a <__ieee754_rem_pio2+0x7a>
 800cbc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cbc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbcc:	e9c4 2300 	strd	r2, r3, [r4]
 800cbd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cbd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cbdc:	e740      	b.n	800ca60 <__ieee754_rem_pio2+0x270>
 800cbde:	bf00      	nop
 800cbe0:	41700000 	.word	0x41700000
 800cbe4:	0800d5a8 	.word	0x0800d5a8

0800cbe8 <fabs>:
 800cbe8:	ec51 0b10 	vmov	r0, r1, d0
 800cbec:	4602      	mov	r2, r0
 800cbee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cbf2:	ec43 2b10 	vmov	d0, r2, r3
 800cbf6:	4770      	bx	lr

0800cbf8 <__kernel_rem_pio2>:
 800cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfc:	ed2d 8b02 	vpush	{d8}
 800cc00:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cc04:	f112 0f14 	cmn.w	r2, #20
 800cc08:	9306      	str	r3, [sp, #24]
 800cc0a:	9104      	str	r1, [sp, #16]
 800cc0c:	4bc2      	ldr	r3, [pc, #776]	@ (800cf18 <__kernel_rem_pio2+0x320>)
 800cc0e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cc10:	9008      	str	r0, [sp, #32]
 800cc12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	9b06      	ldr	r3, [sp, #24]
 800cc1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc1e:	bfa8      	it	ge
 800cc20:	1ed4      	subge	r4, r2, #3
 800cc22:	9305      	str	r3, [sp, #20]
 800cc24:	bfb2      	itee	lt
 800cc26:	2400      	movlt	r4, #0
 800cc28:	2318      	movge	r3, #24
 800cc2a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cc2e:	f06f 0317 	mvn.w	r3, #23
 800cc32:	fb04 3303 	mla	r3, r4, r3, r3
 800cc36:	eb03 0b02 	add.w	fp, r3, r2
 800cc3a:	9b00      	ldr	r3, [sp, #0]
 800cc3c:	9a05      	ldr	r2, [sp, #20]
 800cc3e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800cf08 <__kernel_rem_pio2+0x310>
 800cc42:	eb03 0802 	add.w	r8, r3, r2
 800cc46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cc48:	1aa7      	subs	r7, r4, r2
 800cc4a:	ae20      	add	r6, sp, #128	@ 0x80
 800cc4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cc50:	2500      	movs	r5, #0
 800cc52:	4545      	cmp	r5, r8
 800cc54:	dd12      	ble.n	800cc7c <__kernel_rem_pio2+0x84>
 800cc56:	9b06      	ldr	r3, [sp, #24]
 800cc58:	aa20      	add	r2, sp, #128	@ 0x80
 800cc5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cc5e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cc62:	2700      	movs	r7, #0
 800cc64:	9b00      	ldr	r3, [sp, #0]
 800cc66:	429f      	cmp	r7, r3
 800cc68:	dc2e      	bgt.n	800ccc8 <__kernel_rem_pio2+0xd0>
 800cc6a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800cf08 <__kernel_rem_pio2+0x310>
 800cc6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc72:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc76:	46a8      	mov	r8, r5
 800cc78:	2600      	movs	r6, #0
 800cc7a:	e01b      	b.n	800ccb4 <__kernel_rem_pio2+0xbc>
 800cc7c:	42ef      	cmn	r7, r5
 800cc7e:	d407      	bmi.n	800cc90 <__kernel_rem_pio2+0x98>
 800cc80:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cc84:	f7f3 fc1a 	bl	80004bc <__aeabi_i2d>
 800cc88:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cc8c:	3501      	adds	r5, #1
 800cc8e:	e7e0      	b.n	800cc52 <__kernel_rem_pio2+0x5a>
 800cc90:	ec51 0b18 	vmov	r0, r1, d8
 800cc94:	e7f8      	b.n	800cc88 <__kernel_rem_pio2+0x90>
 800cc96:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800cc9a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cc9e:	f7f3 fc77 	bl	8000590 <__aeabi_dmul>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccaa:	f7f3 fabb 	bl	8000224 <__adddf3>
 800ccae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccb2:	3601      	adds	r6, #1
 800ccb4:	9b05      	ldr	r3, [sp, #20]
 800ccb6:	429e      	cmp	r6, r3
 800ccb8:	dded      	ble.n	800cc96 <__kernel_rem_pio2+0x9e>
 800ccba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccbe:	3701      	adds	r7, #1
 800ccc0:	ecaa 7b02 	vstmia	sl!, {d7}
 800ccc4:	3508      	adds	r5, #8
 800ccc6:	e7cd      	b.n	800cc64 <__kernel_rem_pio2+0x6c>
 800ccc8:	9b00      	ldr	r3, [sp, #0]
 800ccca:	f8dd 8000 	ldr.w	r8, [sp]
 800ccce:	aa0c      	add	r2, sp, #48	@ 0x30
 800ccd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ccd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ccdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cce4:	ab98      	add	r3, sp, #608	@ 0x260
 800cce6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ccea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ccee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccf2:	ac0c      	add	r4, sp, #48	@ 0x30
 800ccf4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ccf6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ccfa:	46a1      	mov	r9, r4
 800ccfc:	46c2      	mov	sl, r8
 800ccfe:	f1ba 0f00 	cmp.w	sl, #0
 800cd02:	dc77      	bgt.n	800cdf4 <__kernel_rem_pio2+0x1fc>
 800cd04:	4658      	mov	r0, fp
 800cd06:	ed9d 0b02 	vldr	d0, [sp, #8]
 800cd0a:	f000 fac5 	bl	800d298 <scalbn>
 800cd0e:	ec57 6b10 	vmov	r6, r7, d0
 800cd12:	2200      	movs	r2, #0
 800cd14:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 fc38 	bl	8000590 <__aeabi_dmul>
 800cd20:	ec41 0b10 	vmov	d0, r0, r1
 800cd24:	f000 fb34 	bl	800d390 <floor>
 800cd28:	4b7c      	ldr	r3, [pc, #496]	@ (800cf1c <__kernel_rem_pio2+0x324>)
 800cd2a:	ec51 0b10 	vmov	r0, r1, d0
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f7f3 fc2e 	bl	8000590 <__aeabi_dmul>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 fa70 	bl	8000220 <__aeabi_dsub>
 800cd40:	460f      	mov	r7, r1
 800cd42:	4606      	mov	r6, r0
 800cd44:	f7f3 febe 	bl	8000ac4 <__aeabi_d2iz>
 800cd48:	9002      	str	r0, [sp, #8]
 800cd4a:	f7f3 fbb7 	bl	80004bc <__aeabi_i2d>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 fa63 	bl	8000220 <__aeabi_dsub>
 800cd5a:	f1bb 0f00 	cmp.w	fp, #0
 800cd5e:	4606      	mov	r6, r0
 800cd60:	460f      	mov	r7, r1
 800cd62:	dd6c      	ble.n	800ce3e <__kernel_rem_pio2+0x246>
 800cd64:	f108 31ff 	add.w	r1, r8, #4294967295
 800cd68:	ab0c      	add	r3, sp, #48	@ 0x30
 800cd6a:	9d02      	ldr	r5, [sp, #8]
 800cd6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd70:	f1cb 0018 	rsb	r0, fp, #24
 800cd74:	fa43 f200 	asr.w	r2, r3, r0
 800cd78:	4415      	add	r5, r2
 800cd7a:	4082      	lsls	r2, r0
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	aa0c      	add	r2, sp, #48	@ 0x30
 800cd80:	9502      	str	r5, [sp, #8]
 800cd82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cd86:	f1cb 0217 	rsb	r2, fp, #23
 800cd8a:	fa43 f902 	asr.w	r9, r3, r2
 800cd8e:	f1b9 0f00 	cmp.w	r9, #0
 800cd92:	dd64      	ble.n	800ce5e <__kernel_rem_pio2+0x266>
 800cd94:	9b02      	ldr	r3, [sp, #8]
 800cd96:	2200      	movs	r2, #0
 800cd98:	3301      	adds	r3, #1
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	4615      	mov	r5, r2
 800cd9e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cda2:	4590      	cmp	r8, r2
 800cda4:	f300 80a1 	bgt.w	800ceea <__kernel_rem_pio2+0x2f2>
 800cda8:	f1bb 0f00 	cmp.w	fp, #0
 800cdac:	dd07      	ble.n	800cdbe <__kernel_rem_pio2+0x1c6>
 800cdae:	f1bb 0f01 	cmp.w	fp, #1
 800cdb2:	f000 80c1 	beq.w	800cf38 <__kernel_rem_pio2+0x340>
 800cdb6:	f1bb 0f02 	cmp.w	fp, #2
 800cdba:	f000 80c8 	beq.w	800cf4e <__kernel_rem_pio2+0x356>
 800cdbe:	f1b9 0f02 	cmp.w	r9, #2
 800cdc2:	d14c      	bne.n	800ce5e <__kernel_rem_pio2+0x266>
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	4955      	ldr	r1, [pc, #340]	@ (800cf20 <__kernel_rem_pio2+0x328>)
 800cdca:	2000      	movs	r0, #0
 800cdcc:	f7f3 fa28 	bl	8000220 <__aeabi_dsub>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	460f      	mov	r7, r1
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	d042      	beq.n	800ce5e <__kernel_rem_pio2+0x266>
 800cdd8:	4658      	mov	r0, fp
 800cdda:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800cf10 <__kernel_rem_pio2+0x318>
 800cdde:	f000 fa5b 	bl	800d298 <scalbn>
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	ec53 2b10 	vmov	r2, r3, d0
 800cdea:	f7f3 fa19 	bl	8000220 <__aeabi_dsub>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	e034      	b.n	800ce5e <__kernel_rem_pio2+0x266>
 800cdf4:	4b4b      	ldr	r3, [pc, #300]	@ (800cf24 <__kernel_rem_pio2+0x32c>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdfc:	f7f3 fbc8 	bl	8000590 <__aeabi_dmul>
 800ce00:	f7f3 fe60 	bl	8000ac4 <__aeabi_d2iz>
 800ce04:	f7f3 fb5a 	bl	80004bc <__aeabi_i2d>
 800ce08:	4b47      	ldr	r3, [pc, #284]	@ (800cf28 <__kernel_rem_pio2+0x330>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	460f      	mov	r7, r1
 800ce10:	f7f3 fbbe 	bl	8000590 <__aeabi_dmul>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1c:	f7f3 fa00 	bl	8000220 <__aeabi_dsub>
 800ce20:	f7f3 fe50 	bl	8000ac4 <__aeabi_d2iz>
 800ce24:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ce28:	f849 0b04 	str.w	r0, [r9], #4
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7f3 f9f8 	bl	8000224 <__adddf3>
 800ce34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce3c:	e75f      	b.n	800ccfe <__kernel_rem_pio2+0x106>
 800ce3e:	d107      	bne.n	800ce50 <__kernel_rem_pio2+0x258>
 800ce40:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce44:	aa0c      	add	r2, sp, #48	@ 0x30
 800ce46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ce4e:	e79e      	b.n	800cd8e <__kernel_rem_pio2+0x196>
 800ce50:	4b36      	ldr	r3, [pc, #216]	@ (800cf2c <__kernel_rem_pio2+0x334>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	f7f3 fe22 	bl	8000a9c <__aeabi_dcmpge>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d143      	bne.n	800cee4 <__kernel_rem_pio2+0x2ec>
 800ce5c:	4681      	mov	r9, r0
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2300      	movs	r3, #0
 800ce62:	4630      	mov	r0, r6
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 fdfb 	bl	8000a60 <__aeabi_dcmpeq>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	f000 80c1 	beq.w	800cff2 <__kernel_rem_pio2+0x3fa>
 800ce70:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce74:	2200      	movs	r2, #0
 800ce76:	9900      	ldr	r1, [sp, #0]
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	da70      	bge.n	800cf5e <__kernel_rem_pio2+0x366>
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	f000 808b 	beq.w	800cf98 <__kernel_rem_pio2+0x3a0>
 800ce82:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce86:	ab0c      	add	r3, sp, #48	@ 0x30
 800ce88:	f1ab 0b18 	sub.w	fp, fp, #24
 800ce8c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d0f6      	beq.n	800ce82 <__kernel_rem_pio2+0x28a>
 800ce94:	4658      	mov	r0, fp
 800ce96:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800cf10 <__kernel_rem_pio2+0x318>
 800ce9a:	f000 f9fd 	bl	800d298 <scalbn>
 800ce9e:	f108 0301 	add.w	r3, r8, #1
 800cea2:	00da      	lsls	r2, r3, #3
 800cea4:	9205      	str	r2, [sp, #20]
 800cea6:	ec55 4b10 	vmov	r4, r5, d0
 800ceaa:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ceac:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800cf24 <__kernel_rem_pio2+0x32c>
 800ceb0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ceb4:	4646      	mov	r6, r8
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	f280 80d1 	bge.w	800d062 <__kernel_rem_pio2+0x46a>
 800cec0:	4644      	mov	r4, r8
 800cec2:	2c00      	cmp	r4, #0
 800cec4:	f2c0 80ff 	blt.w	800d0c6 <__kernel_rem_pio2+0x4ce>
 800cec8:	4b19      	ldr	r3, [pc, #100]	@ (800cf30 <__kernel_rem_pio2+0x338>)
 800ceca:	461f      	mov	r7, r3
 800cecc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cece:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ced2:	9306      	str	r3, [sp, #24]
 800ced4:	f04f 0a00 	mov.w	sl, #0
 800ced8:	f04f 0b00 	mov.w	fp, #0
 800cedc:	2600      	movs	r6, #0
 800cede:	eba8 0504 	sub.w	r5, r8, r4
 800cee2:	e0e4      	b.n	800d0ae <__kernel_rem_pio2+0x4b6>
 800cee4:	f04f 0902 	mov.w	r9, #2
 800cee8:	e754      	b.n	800cd94 <__kernel_rem_pio2+0x19c>
 800ceea:	f854 3b04 	ldr.w	r3, [r4], #4
 800ceee:	bb0d      	cbnz	r5, 800cf34 <__kernel_rem_pio2+0x33c>
 800cef0:	b123      	cbz	r3, 800cefc <__kernel_rem_pio2+0x304>
 800cef2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cef6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cefa:	2301      	movs	r3, #1
 800cefc:	3201      	adds	r2, #1
 800cefe:	461d      	mov	r5, r3
 800cf00:	e74f      	b.n	800cda2 <__kernel_rem_pio2+0x1aa>
 800cf02:	bf00      	nop
 800cf04:	f3af 8000 	nop.w
	...
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	0800d6f0 	.word	0x0800d6f0
 800cf1c:	40200000 	.word	0x40200000
 800cf20:	3ff00000 	.word	0x3ff00000
 800cf24:	3e700000 	.word	0x3e700000
 800cf28:	41700000 	.word	0x41700000
 800cf2c:	3fe00000 	.word	0x3fe00000
 800cf30:	0800d6b0 	.word	0x0800d6b0
 800cf34:	1acb      	subs	r3, r1, r3
 800cf36:	e7de      	b.n	800cef6 <__kernel_rem_pio2+0x2fe>
 800cf38:	f108 32ff 	add.w	r2, r8, #4294967295
 800cf3c:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cf46:	a90c      	add	r1, sp, #48	@ 0x30
 800cf48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cf4c:	e737      	b.n	800cdbe <__kernel_rem_pio2+0x1c6>
 800cf4e:	f108 32ff 	add.w	r2, r8, #4294967295
 800cf52:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf5c:	e7f3      	b.n	800cf46 <__kernel_rem_pio2+0x34e>
 800cf5e:	a90c      	add	r1, sp, #48	@ 0x30
 800cf60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	430a      	orrs	r2, r1
 800cf68:	e785      	b.n	800ce76 <__kernel_rem_pio2+0x27e>
 800cf6a:	3401      	adds	r4, #1
 800cf6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	d0fa      	beq.n	800cf6a <__kernel_rem_pio2+0x372>
 800cf74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cf7a:	eb0d 0503 	add.w	r5, sp, r3
 800cf7e:	9b06      	ldr	r3, [sp, #24]
 800cf80:	aa20      	add	r2, sp, #128	@ 0x80
 800cf82:	4443      	add	r3, r8
 800cf84:	f108 0701 	add.w	r7, r8, #1
 800cf88:	3d98      	subs	r5, #152	@ 0x98
 800cf8a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cf8e:	4444      	add	r4, r8
 800cf90:	42bc      	cmp	r4, r7
 800cf92:	da04      	bge.n	800cf9e <__kernel_rem_pio2+0x3a6>
 800cf94:	46a0      	mov	r8, r4
 800cf96:	e6a2      	b.n	800ccde <__kernel_rem_pio2+0xe6>
 800cf98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9a:	2401      	movs	r4, #1
 800cf9c:	e7e6      	b.n	800cf6c <__kernel_rem_pio2+0x374>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cfa4:	f7f3 fa8a 	bl	80004bc <__aeabi_i2d>
 800cfa8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800d268 <__kernel_rem_pio2+0x670>
 800cfac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cfb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfb8:	46b2      	mov	sl, r6
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	9b05      	ldr	r3, [sp, #20]
 800cfc0:	4598      	cmp	r8, r3
 800cfc2:	dd05      	ble.n	800cfd0 <__kernel_rem_pio2+0x3d8>
 800cfc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfc8:	3701      	adds	r7, #1
 800cfca:	eca5 7b02 	vstmia	r5!, {d7}
 800cfce:	e7df      	b.n	800cf90 <__kernel_rem_pio2+0x398>
 800cfd0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800cfd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cfd8:	f7f3 fada 	bl	8000590 <__aeabi_dmul>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe4:	f7f3 f91e 	bl	8000224 <__adddf3>
 800cfe8:	f108 0801 	add.w	r8, r8, #1
 800cfec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cff0:	e7e5      	b.n	800cfbe <__kernel_rem_pio2+0x3c6>
 800cff2:	f1cb 0000 	rsb	r0, fp, #0
 800cff6:	ec47 6b10 	vmov	d0, r6, r7
 800cffa:	f000 f94d 	bl	800d298 <scalbn>
 800cffe:	ec55 4b10 	vmov	r4, r5, d0
 800d002:	4b9b      	ldr	r3, [pc, #620]	@ (800d270 <__kernel_rem_pio2+0x678>)
 800d004:	2200      	movs	r2, #0
 800d006:	4620      	mov	r0, r4
 800d008:	4629      	mov	r1, r5
 800d00a:	f7f3 fd47 	bl	8000a9c <__aeabi_dcmpge>
 800d00e:	b300      	cbz	r0, 800d052 <__kernel_rem_pio2+0x45a>
 800d010:	4b98      	ldr	r3, [pc, #608]	@ (800d274 <__kernel_rem_pio2+0x67c>)
 800d012:	2200      	movs	r2, #0
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 faba 	bl	8000590 <__aeabi_dmul>
 800d01c:	f7f3 fd52 	bl	8000ac4 <__aeabi_d2iz>
 800d020:	4606      	mov	r6, r0
 800d022:	f7f3 fa4b 	bl	80004bc <__aeabi_i2d>
 800d026:	4b92      	ldr	r3, [pc, #584]	@ (800d270 <__kernel_rem_pio2+0x678>)
 800d028:	2200      	movs	r2, #0
 800d02a:	f7f3 fab1 	bl	8000590 <__aeabi_dmul>
 800d02e:	460b      	mov	r3, r1
 800d030:	4602      	mov	r2, r0
 800d032:	4629      	mov	r1, r5
 800d034:	4620      	mov	r0, r4
 800d036:	f7f3 f8f3 	bl	8000220 <__aeabi_dsub>
 800d03a:	f7f3 fd43 	bl	8000ac4 <__aeabi_d2iz>
 800d03e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d040:	f10b 0b18 	add.w	fp, fp, #24
 800d044:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d048:	f108 0801 	add.w	r8, r8, #1
 800d04c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d050:	e720      	b.n	800ce94 <__kernel_rem_pio2+0x29c>
 800d052:	4620      	mov	r0, r4
 800d054:	4629      	mov	r1, r5
 800d056:	f7f3 fd35 	bl	8000ac4 <__aeabi_d2iz>
 800d05a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d05c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d060:	e718      	b.n	800ce94 <__kernel_rem_pio2+0x29c>
 800d062:	ab0c      	add	r3, sp, #48	@ 0x30
 800d064:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d068:	f7f3 fa28 	bl	80004bc <__aeabi_i2d>
 800d06c:	4622      	mov	r2, r4
 800d06e:	462b      	mov	r3, r5
 800d070:	f7f3 fa8e 	bl	8000590 <__aeabi_dmul>
 800d074:	4652      	mov	r2, sl
 800d076:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d07a:	465b      	mov	r3, fp
 800d07c:	4620      	mov	r0, r4
 800d07e:	4629      	mov	r1, r5
 800d080:	f7f3 fa86 	bl	8000590 <__aeabi_dmul>
 800d084:	3e01      	subs	r6, #1
 800d086:	4604      	mov	r4, r0
 800d088:	460d      	mov	r5, r1
 800d08a:	e716      	b.n	800ceba <__kernel_rem_pio2+0x2c2>
 800d08c:	9906      	ldr	r1, [sp, #24]
 800d08e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d092:	9106      	str	r1, [sp, #24]
 800d094:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d098:	f7f3 fa7a 	bl	8000590 <__aeabi_dmul>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	f7f3 f8be 	bl	8000224 <__adddf3>
 800d0a8:	3601      	adds	r6, #1
 800d0aa:	4682      	mov	sl, r0
 800d0ac:	468b      	mov	fp, r1
 800d0ae:	9b00      	ldr	r3, [sp, #0]
 800d0b0:	429e      	cmp	r6, r3
 800d0b2:	dc01      	bgt.n	800d0b8 <__kernel_rem_pio2+0x4c0>
 800d0b4:	42ae      	cmp	r6, r5
 800d0b6:	dde9      	ble.n	800d08c <__kernel_rem_pio2+0x494>
 800d0b8:	ab48      	add	r3, sp, #288	@ 0x120
 800d0ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d0be:	e9c5 ab00 	strd	sl, fp, [r5]
 800d0c2:	3c01      	subs	r4, #1
 800d0c4:	e6fd      	b.n	800cec2 <__kernel_rem_pio2+0x2ca>
 800d0c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	dc0b      	bgt.n	800d0e4 <__kernel_rem_pio2+0x4ec>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dc35      	bgt.n	800d13c <__kernel_rem_pio2+0x544>
 800d0d0:	d059      	beq.n	800d186 <__kernel_rem_pio2+0x58e>
 800d0d2:	9b02      	ldr	r3, [sp, #8]
 800d0d4:	f003 0007 	and.w	r0, r3, #7
 800d0d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d0dc:	ecbd 8b02 	vpop	{d8}
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	d1f3      	bne.n	800d0d2 <__kernel_rem_pio2+0x4da>
 800d0ea:	9b05      	ldr	r3, [sp, #20]
 800d0ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d0f0:	eb0d 0403 	add.w	r4, sp, r3
 800d0f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d0f8:	4625      	mov	r5, r4
 800d0fa:	46c2      	mov	sl, r8
 800d0fc:	f1ba 0f00 	cmp.w	sl, #0
 800d100:	dc69      	bgt.n	800d1d6 <__kernel_rem_pio2+0x5de>
 800d102:	4645      	mov	r5, r8
 800d104:	2d01      	cmp	r5, #1
 800d106:	f300 8087 	bgt.w	800d218 <__kernel_rem_pio2+0x620>
 800d10a:	9c05      	ldr	r4, [sp, #20]
 800d10c:	ab48      	add	r3, sp, #288	@ 0x120
 800d10e:	441c      	add	r4, r3
 800d110:	2000      	movs	r0, #0
 800d112:	2100      	movs	r1, #0
 800d114:	f1b8 0f01 	cmp.w	r8, #1
 800d118:	f300 809c 	bgt.w	800d254 <__kernel_rem_pio2+0x65c>
 800d11c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800d120:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800d124:	f1b9 0f00 	cmp.w	r9, #0
 800d128:	f040 80a6 	bne.w	800d278 <__kernel_rem_pio2+0x680>
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	e9c3 5600 	strd	r5, r6, [r3]
 800d132:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d136:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d13a:	e7ca      	b.n	800d0d2 <__kernel_rem_pio2+0x4da>
 800d13c:	9d05      	ldr	r5, [sp, #20]
 800d13e:	ab48      	add	r3, sp, #288	@ 0x120
 800d140:	441d      	add	r5, r3
 800d142:	4644      	mov	r4, r8
 800d144:	2000      	movs	r0, #0
 800d146:	2100      	movs	r1, #0
 800d148:	2c00      	cmp	r4, #0
 800d14a:	da35      	bge.n	800d1b8 <__kernel_rem_pio2+0x5c0>
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	d038      	beq.n	800d1c4 <__kernel_rem_pio2+0x5cc>
 800d152:	4602      	mov	r2, r0
 800d154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d158:	9c04      	ldr	r4, [sp, #16]
 800d15a:	e9c4 2300 	strd	r2, r3, [r4]
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d166:	f7f3 f85b 	bl	8000220 <__aeabi_dsub>
 800d16a:	ad4a      	add	r5, sp, #296	@ 0x128
 800d16c:	2401      	movs	r4, #1
 800d16e:	45a0      	cmp	r8, r4
 800d170:	da2b      	bge.n	800d1ca <__kernel_rem_pio2+0x5d2>
 800d172:	f1b9 0f00 	cmp.w	r9, #0
 800d176:	d002      	beq.n	800d17e <__kernel_rem_pio2+0x586>
 800d178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d17c:	4619      	mov	r1, r3
 800d17e:	9b04      	ldr	r3, [sp, #16]
 800d180:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d184:	e7a5      	b.n	800d0d2 <__kernel_rem_pio2+0x4da>
 800d186:	9c05      	ldr	r4, [sp, #20]
 800d188:	ab48      	add	r3, sp, #288	@ 0x120
 800d18a:	441c      	add	r4, r3
 800d18c:	2000      	movs	r0, #0
 800d18e:	2100      	movs	r1, #0
 800d190:	f1b8 0f00 	cmp.w	r8, #0
 800d194:	da09      	bge.n	800d1aa <__kernel_rem_pio2+0x5b2>
 800d196:	f1b9 0f00 	cmp.w	r9, #0
 800d19a:	d002      	beq.n	800d1a2 <__kernel_rem_pio2+0x5aa>
 800d19c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	9b04      	ldr	r3, [sp, #16]
 800d1a4:	e9c3 0100 	strd	r0, r1, [r3]
 800d1a8:	e793      	b.n	800d0d2 <__kernel_rem_pio2+0x4da>
 800d1aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d1ae:	f7f3 f839 	bl	8000224 <__adddf3>
 800d1b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1b6:	e7eb      	b.n	800d190 <__kernel_rem_pio2+0x598>
 800d1b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d1bc:	f7f3 f832 	bl	8000224 <__adddf3>
 800d1c0:	3c01      	subs	r4, #1
 800d1c2:	e7c1      	b.n	800d148 <__kernel_rem_pio2+0x550>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	e7c6      	b.n	800d158 <__kernel_rem_pio2+0x560>
 800d1ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d1ce:	f7f3 f829 	bl	8000224 <__adddf3>
 800d1d2:	3401      	adds	r4, #1
 800d1d4:	e7cb      	b.n	800d16e <__kernel_rem_pio2+0x576>
 800d1d6:	ed35 7b02 	vldmdb	r5!, {d7}
 800d1da:	ed8d 7b00 	vstr	d7, [sp]
 800d1de:	ed95 7b02 	vldr	d7, [r5, #8]
 800d1e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1e6:	ec53 2b17 	vmov	r2, r3, d7
 800d1ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1ee:	f7f3 f819 	bl	8000224 <__adddf3>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1fe:	f7f3 f80f 	bl	8000220 <__aeabi_dsub>
 800d202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d206:	f7f3 f80d 	bl	8000224 <__adddf3>
 800d20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d20e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d212:	e9c5 6700 	strd	r6, r7, [r5]
 800d216:	e771      	b.n	800d0fc <__kernel_rem_pio2+0x504>
 800d218:	ed34 7b02 	vldmdb	r4!, {d7}
 800d21c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d220:	ec51 0b17 	vmov	r0, r1, d7
 800d224:	4652      	mov	r2, sl
 800d226:	465b      	mov	r3, fp
 800d228:	ed8d 7b00 	vstr	d7, [sp]
 800d22c:	f7f2 fffa 	bl	8000224 <__adddf3>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d23c:	f7f2 fff0 	bl	8000220 <__aeabi_dsub>
 800d240:	4652      	mov	r2, sl
 800d242:	465b      	mov	r3, fp
 800d244:	f7f2 ffee 	bl	8000224 <__adddf3>
 800d248:	3d01      	subs	r5, #1
 800d24a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d24e:	e9c4 6700 	strd	r6, r7, [r4]
 800d252:	e757      	b.n	800d104 <__kernel_rem_pio2+0x50c>
 800d254:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d258:	f7f2 ffe4 	bl	8000224 <__adddf3>
 800d25c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d260:	e758      	b.n	800d114 <__kernel_rem_pio2+0x51c>
 800d262:	bf00      	nop
 800d264:	f3af 8000 	nop.w
	...
 800d270:	41700000 	.word	0x41700000
 800d274:	3e700000 	.word	0x3e700000
 800d278:	9b04      	ldr	r3, [sp, #16]
 800d27a:	9a04      	ldr	r2, [sp, #16]
 800d27c:	601d      	str	r5, [r3, #0]
 800d27e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800d282:	605c      	str	r4, [r3, #4]
 800d284:	609f      	str	r7, [r3, #8]
 800d286:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800d28a:	60d3      	str	r3, [r2, #12]
 800d28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d290:	6110      	str	r0, [r2, #16]
 800d292:	6153      	str	r3, [r2, #20]
 800d294:	e71d      	b.n	800d0d2 <__kernel_rem_pio2+0x4da>
 800d296:	bf00      	nop

0800d298 <scalbn>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	ec55 4b10 	vmov	r4, r5, d0
 800d29e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	462b      	mov	r3, r5
 800d2a6:	b991      	cbnz	r1, 800d2ce <scalbn+0x36>
 800d2a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d2ac:	4323      	orrs	r3, r4
 800d2ae:	d03b      	beq.n	800d328 <scalbn+0x90>
 800d2b0:	4b33      	ldr	r3, [pc, #204]	@ (800d380 <scalbn+0xe8>)
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f7f3 f96a 	bl	8000590 <__aeabi_dmul>
 800d2bc:	4b31      	ldr	r3, [pc, #196]	@ (800d384 <scalbn+0xec>)
 800d2be:	429e      	cmp	r6, r3
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	460d      	mov	r5, r1
 800d2c4:	da0f      	bge.n	800d2e6 <scalbn+0x4e>
 800d2c6:	a326      	add	r3, pc, #152	@ (adr r3, 800d360 <scalbn+0xc8>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	e01e      	b.n	800d30c <scalbn+0x74>
 800d2ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d2d2:	4291      	cmp	r1, r2
 800d2d4:	d10b      	bne.n	800d2ee <scalbn+0x56>
 800d2d6:	4622      	mov	r2, r4
 800d2d8:	4620      	mov	r0, r4
 800d2da:	4629      	mov	r1, r5
 800d2dc:	f7f2 ffa2 	bl	8000224 <__adddf3>
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	e020      	b.n	800d328 <scalbn+0x90>
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d2ec:	3936      	subs	r1, #54	@ 0x36
 800d2ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d2f2:	4296      	cmp	r6, r2
 800d2f4:	dd0d      	ble.n	800d312 <scalbn+0x7a>
 800d2f6:	2d00      	cmp	r5, #0
 800d2f8:	a11b      	add	r1, pc, #108	@ (adr r1, 800d368 <scalbn+0xd0>)
 800d2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fe:	da02      	bge.n	800d306 <scalbn+0x6e>
 800d300:	a11b      	add	r1, pc, #108	@ (adr r1, 800d370 <scalbn+0xd8>)
 800d302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d306:	a318      	add	r3, pc, #96	@ (adr r3, 800d368 <scalbn+0xd0>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f7f3 f940 	bl	8000590 <__aeabi_dmul>
 800d310:	e7e6      	b.n	800d2e0 <scalbn+0x48>
 800d312:	1872      	adds	r2, r6, r1
 800d314:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d318:	428a      	cmp	r2, r1
 800d31a:	dcec      	bgt.n	800d2f6 <scalbn+0x5e>
 800d31c:	2a00      	cmp	r2, #0
 800d31e:	dd06      	ble.n	800d32e <scalbn+0x96>
 800d320:	f36f 531e 	bfc	r3, #20, #11
 800d324:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d328:	ec45 4b10 	vmov	d0, r4, r5
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d332:	da08      	bge.n	800d346 <scalbn+0xae>
 800d334:	2d00      	cmp	r5, #0
 800d336:	a10a      	add	r1, pc, #40	@ (adr r1, 800d360 <scalbn+0xc8>)
 800d338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33c:	dac3      	bge.n	800d2c6 <scalbn+0x2e>
 800d33e:	a10e      	add	r1, pc, #56	@ (adr r1, 800d378 <scalbn+0xe0>)
 800d340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d344:	e7bf      	b.n	800d2c6 <scalbn+0x2e>
 800d346:	3236      	adds	r2, #54	@ 0x36
 800d348:	f36f 531e 	bfc	r3, #20, #11
 800d34c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d350:	4620      	mov	r0, r4
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <scalbn+0xf0>)
 800d354:	4629      	mov	r1, r5
 800d356:	2200      	movs	r2, #0
 800d358:	e7d8      	b.n	800d30c <scalbn+0x74>
 800d35a:	bf00      	nop
 800d35c:	f3af 8000 	nop.w
 800d360:	c2f8f359 	.word	0xc2f8f359
 800d364:	01a56e1f 	.word	0x01a56e1f
 800d368:	8800759c 	.word	0x8800759c
 800d36c:	7e37e43c 	.word	0x7e37e43c
 800d370:	8800759c 	.word	0x8800759c
 800d374:	fe37e43c 	.word	0xfe37e43c
 800d378:	c2f8f359 	.word	0xc2f8f359
 800d37c:	81a56e1f 	.word	0x81a56e1f
 800d380:	43500000 	.word	0x43500000
 800d384:	ffff3cb0 	.word	0xffff3cb0
 800d388:	3c900000 	.word	0x3c900000
 800d38c:	00000000 	.word	0x00000000

0800d390 <floor>:
 800d390:	ec51 0b10 	vmov	r0, r1, d0
 800d394:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d3a0:	2e13      	cmp	r6, #19
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	dc34      	bgt.n	800d414 <floor+0x84>
 800d3aa:	2e00      	cmp	r6, #0
 800d3ac:	da17      	bge.n	800d3de <floor+0x4e>
 800d3ae:	a332      	add	r3, pc, #200	@ (adr r3, 800d478 <floor+0xe8>)
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	f7f2 ff36 	bl	8000224 <__adddf3>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f7f3 fb78 	bl	8000ab0 <__aeabi_dcmpgt>
 800d3c0:	b150      	cbz	r0, 800d3d8 <floor+0x48>
 800d3c2:	2c00      	cmp	r4, #0
 800d3c4:	da55      	bge.n	800d472 <floor+0xe2>
 800d3c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d3ca:	432c      	orrs	r4, r5
 800d3cc:	2500      	movs	r5, #0
 800d3ce:	42ac      	cmp	r4, r5
 800d3d0:	4c2b      	ldr	r4, [pc, #172]	@ (800d480 <floor+0xf0>)
 800d3d2:	bf08      	it	eq
 800d3d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4628      	mov	r0, r5
 800d3dc:	e023      	b.n	800d426 <floor+0x96>
 800d3de:	4f29      	ldr	r7, [pc, #164]	@ (800d484 <floor+0xf4>)
 800d3e0:	4137      	asrs	r7, r6
 800d3e2:	ea01 0307 	and.w	r3, r1, r7
 800d3e6:	4303      	orrs	r3, r0
 800d3e8:	d01d      	beq.n	800d426 <floor+0x96>
 800d3ea:	a323      	add	r3, pc, #140	@ (adr r3, 800d478 <floor+0xe8>)
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	f7f2 ff18 	bl	8000224 <__adddf3>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f7f3 fb5a 	bl	8000ab0 <__aeabi_dcmpgt>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d0eb      	beq.n	800d3d8 <floor+0x48>
 800d400:	2c00      	cmp	r4, #0
 800d402:	bfbe      	ittt	lt
 800d404:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d408:	4133      	asrlt	r3, r6
 800d40a:	18e4      	addlt	r4, r4, r3
 800d40c:	ea24 0407 	bic.w	r4, r4, r7
 800d410:	2500      	movs	r5, #0
 800d412:	e7e1      	b.n	800d3d8 <floor+0x48>
 800d414:	2e33      	cmp	r6, #51	@ 0x33
 800d416:	dd0a      	ble.n	800d42e <floor+0x9e>
 800d418:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d41c:	d103      	bne.n	800d426 <floor+0x96>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	f7f2 feff 	bl	8000224 <__adddf3>
 800d426:	ec41 0b10 	vmov	d0, r0, r1
 800d42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d432:	f04f 37ff 	mov.w	r7, #4294967295
 800d436:	40df      	lsrs	r7, r3
 800d438:	4207      	tst	r7, r0
 800d43a:	d0f4      	beq.n	800d426 <floor+0x96>
 800d43c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d478 <floor+0xe8>)
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	f7f2 feef 	bl	8000224 <__adddf3>
 800d446:	2200      	movs	r2, #0
 800d448:	2300      	movs	r3, #0
 800d44a:	f7f3 fb31 	bl	8000ab0 <__aeabi_dcmpgt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d0c2      	beq.n	800d3d8 <floor+0x48>
 800d452:	2c00      	cmp	r4, #0
 800d454:	da0a      	bge.n	800d46c <floor+0xdc>
 800d456:	2e14      	cmp	r6, #20
 800d458:	d101      	bne.n	800d45e <floor+0xce>
 800d45a:	3401      	adds	r4, #1
 800d45c:	e006      	b.n	800d46c <floor+0xdc>
 800d45e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d462:	2301      	movs	r3, #1
 800d464:	40b3      	lsls	r3, r6
 800d466:	441d      	add	r5, r3
 800d468:	4545      	cmp	r5, r8
 800d46a:	d3f6      	bcc.n	800d45a <floor+0xca>
 800d46c:	ea25 0507 	bic.w	r5, r5, r7
 800d470:	e7b2      	b.n	800d3d8 <floor+0x48>
 800d472:	2500      	movs	r5, #0
 800d474:	462c      	mov	r4, r5
 800d476:	e7af      	b.n	800d3d8 <floor+0x48>
 800d478:	8800759c 	.word	0x8800759c
 800d47c:	7e37e43c 	.word	0x7e37e43c
 800d480:	bff00000 	.word	0xbff00000
 800d484:	000fffff 	.word	0x000fffff

0800d488 <_init>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	bf00      	nop
 800d48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d48e:	bc08      	pop	{r3}
 800d490:	469e      	mov	lr, r3
 800d492:	4770      	bx	lr

0800d494 <_fini>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	bf00      	nop
 800d498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49a:	bc08      	pop	{r3}
 800d49c:	469e      	mov	lr, r3
 800d49e:	4770      	bx	lr
